
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	80 11 00 20 ad 14 00 00 91 49 00 00 81 14 00 00     ... .....I......
  10:	81 14 00 00 81 14 00 00 81 14 00 00 00 00 00 00     ................
	...
  2c:	99 11 00 00 81 14 00 00 00 00 00 00 45 11 00 00     ............E...
  3c:	81 14 00 00                                         ....

00000040 <_irq_vector_table>:
  40:	49 12 00 00 49 12 00 00 49 12 00 00 49 12 00 00     I...I...I...I...
  50:	49 12 00 00 49 12 00 00 49 12 00 00 49 12 00 00     I...I...I...I...
  60:	49 12 00 00 49 12 00 00 49 12 00 00 49 12 00 00     I...I...I...I...
  70:	49 12 00 00 49 12 00 00 49 12 00 00 49 12 00 00     I...I...I...I...
  80:	49 12 00 00 49 12 00 00 49 12 00 00 49 12 00 00     I...I...I...I...
  90:	49 12 00 00 49 12 00 00 49 12 00 00 49 12 00 00     I...I...I...I...
  a0:	49 12 00 00 49 12 00 00 49 12 00 00 49 12 00 00     I...I...I...I...
  b0:	49 12 00 00 49 12 00 00                             I...I...

Disassembly of section text:

000000b8 <__aeabi_uldivmod>:
      b8:	b953      	cbnz	r3, d0 <CONFIG_FLASH_SIZE+0x10>
      ba:	b94a      	cbnz	r2, d0 <CONFIG_FLASH_SIZE+0x10>
      bc:	2900      	cmp	r1, #0
      be:	bf08      	it	eq
      c0:	2800      	cmpeq	r0, #0
      c2:	bf1c      	itt	ne
      c4:	f04f 31ff 	movne.w	r1, #4294967295
      c8:	f04f 30ff 	movne.w	r0, #4294967295
      cc:	f000 b80c 	b.w	e8 <__aeabi_idiv0>
      d0:	f1ad 0c08 	sub.w	ip, sp, #8
      d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
      d8:	f000 f808 	bl	ec <__udivmoddi4>
      dc:	f8dd e004 	ldr.w	lr, [sp, #4]
      e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
      e4:	b004      	add	sp, #16
      e6:	4770      	bx	lr

000000e8 <__aeabi_idiv0>:
      e8:	4770      	bx	lr
      ea:	bf00      	nop

000000ec <__udivmoddi4>:
      ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      f0:	4686      	mov	lr, r0
      f2:	468c      	mov	ip, r1
      f4:	4608      	mov	r0, r1
      f6:	9e08      	ldr	r6, [sp, #32]
      f8:	4615      	mov	r5, r2
      fa:	4674      	mov	r4, lr
      fc:	4619      	mov	r1, r3
      fe:	2b00      	cmp	r3, #0
     100:	f040 80c2 	bne.w	288 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x94>
     104:	4285      	cmp	r5, r0
     106:	fab2 f282 	clz	r2, r2
     10a:	d945      	bls.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     10c:	b14a      	cbz	r2, 122 <CONFIG_IDLE_STACK_SIZE+0x22>
     10e:	f1c2 0320 	rsb	r3, r2, #32
     112:	fa00 fc02 	lsl.w	ip, r0, r2
     116:	fa2e f303 	lsr.w	r3, lr, r3
     11a:	4095      	lsls	r5, r2
     11c:	ea43 0c0c 	orr.w	ip, r3, ip
     120:	4094      	lsls	r4, r2
     122:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     126:	b2a8      	uxth	r0, r5
     128:	fbbc f8fe 	udiv	r8, ip, lr
     12c:	0c23      	lsrs	r3, r4, #16
     12e:	fb0e cc18 	mls	ip, lr, r8, ip
     132:	fb08 f900 	mul.w	r9, r8, r0
     136:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     13a:	4599      	cmp	r9, r3
     13c:	d928      	bls.n	190 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x23>
     13e:	18eb      	adds	r3, r5, r3
     140:	f108 37ff 	add.w	r7, r8, #4294967295
     144:	d204      	bcs.n	150 <CONFIG_IDLE_STACK_SIZE+0x50>
     146:	4599      	cmp	r9, r3
     148:	d902      	bls.n	150 <CONFIG_IDLE_STACK_SIZE+0x50>
     14a:	f1a8 0702 	sub.w	r7, r8, #2
     14e:	442b      	add	r3, r5
     150:	eba3 0309 	sub.w	r3, r3, r9
     154:	b2a4      	uxth	r4, r4
     156:	fbb3 fcfe 	udiv	ip, r3, lr
     15a:	fb0e 331c 	mls	r3, lr, ip, r3
     15e:	fb0c f000 	mul.w	r0, ip, r0
     162:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     166:	42a0      	cmp	r0, r4
     168:	d914      	bls.n	194 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x27>
     16a:	192c      	adds	r4, r5, r4
     16c:	f10c 33ff 	add.w	r3, ip, #4294967295
     170:	d204      	bcs.n	17c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xf>
     172:	42a0      	cmp	r0, r4
     174:	d902      	bls.n	17c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xf>
     176:	f1ac 0302 	sub.w	r3, ip, #2
     17a:	442c      	add	r4, r5
     17c:	1a24      	subs	r4, r4, r0
     17e:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     182:	b11e      	cbz	r6, 18c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1f>
     184:	40d4      	lsrs	r4, r2
     186:	2300      	movs	r3, #0
     188:	6034      	str	r4, [r6, #0]
     18a:	6073      	str	r3, [r6, #4]
     18c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     190:	4647      	mov	r7, r8
     192:	e7dd      	b.n	150 <CONFIG_IDLE_STACK_SIZE+0x50>
     194:	4663      	mov	r3, ip
     196:	e7f1      	b.n	17c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xf>
     198:	bb92      	cbnz	r2, 200 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xc>
     19a:	1b43      	subs	r3, r0, r5
     19c:	2101      	movs	r1, #1
     19e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1a2:	b2af      	uxth	r7, r5
     1a4:	fbb3 fcfe 	udiv	ip, r3, lr
     1a8:	0c20      	lsrs	r0, r4, #16
     1aa:	fb0e 331c 	mls	r3, lr, ip, r3
     1ae:	fb0c f807 	mul.w	r8, ip, r7
     1b2:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     1b6:	4598      	cmp	r8, r3
     1b8:	d962      	bls.n	280 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x8c>
     1ba:	18eb      	adds	r3, r5, r3
     1bc:	f10c 30ff 	add.w	r0, ip, #4294967295
     1c0:	d204      	bcs.n	1cc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5f>
     1c2:	4598      	cmp	r8, r3
     1c4:	d902      	bls.n	1cc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5f>
     1c6:	f1ac 0002 	sub.w	r0, ip, #2
     1ca:	442b      	add	r3, r5
     1cc:	eba3 0308 	sub.w	r3, r3, r8
     1d0:	b2a4      	uxth	r4, r4
     1d2:	fbb3 fcfe 	udiv	ip, r3, lr
     1d6:	fb0e 331c 	mls	r3, lr, ip, r3
     1da:	fb0c f707 	mul.w	r7, ip, r7
     1de:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1e2:	42a7      	cmp	r7, r4
     1e4:	d94e      	bls.n	284 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x90>
     1e6:	192c      	adds	r4, r5, r4
     1e8:	f10c 33ff 	add.w	r3, ip, #4294967295
     1ec:	d204      	bcs.n	1f8 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x4>
     1ee:	42a7      	cmp	r7, r4
     1f0:	d902      	bls.n	1f8 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x4>
     1f2:	f1ac 0302 	sub.w	r3, ip, #2
     1f6:	442c      	add	r4, r5
     1f8:	1be4      	subs	r4, r4, r7
     1fa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     1fe:	e7c0      	b.n	182 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x15>
     200:	f1c2 0320 	rsb	r3, r2, #32
     204:	fa20 f103 	lsr.w	r1, r0, r3
     208:	4095      	lsls	r5, r2
     20a:	4090      	lsls	r0, r2
     20c:	fa2e f303 	lsr.w	r3, lr, r3
     210:	4303      	orrs	r3, r0
     212:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     216:	b2af      	uxth	r7, r5
     218:	fbb1 fcfe 	udiv	ip, r1, lr
     21c:	fb0e 101c 	mls	r0, lr, ip, r1
     220:	0c19      	lsrs	r1, r3, #16
     222:	fb0c f807 	mul.w	r8, ip, r7
     226:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     22a:	4588      	cmp	r8, r1
     22c:	fa04 f402 	lsl.w	r4, r4, r2
     230:	d922      	bls.n	278 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x84>
     232:	1869      	adds	r1, r5, r1
     234:	f10c 30ff 	add.w	r0, ip, #4294967295
     238:	d204      	bcs.n	244 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x50>
     23a:	4588      	cmp	r8, r1
     23c:	d902      	bls.n	244 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x50>
     23e:	f1ac 0002 	sub.w	r0, ip, #2
     242:	4429      	add	r1, r5
     244:	eba1 0108 	sub.w	r1, r1, r8
     248:	b29b      	uxth	r3, r3
     24a:	fbb1 fcfe 	udiv	ip, r1, lr
     24e:	fb0e 111c 	mls	r1, lr, ip, r1
     252:	fb0c f707 	mul.w	r7, ip, r7
     256:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     25a:	429f      	cmp	r7, r3
     25c:	d90e      	bls.n	27c <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x88>
     25e:	18eb      	adds	r3, r5, r3
     260:	f10c 31ff 	add.w	r1, ip, #4294967295
     264:	d204      	bcs.n	270 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x7c>
     266:	429f      	cmp	r7, r3
     268:	d902      	bls.n	270 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x7c>
     26a:	f1ac 0102 	sub.w	r1, ip, #2
     26e:	442b      	add	r3, r5
     270:	1bdb      	subs	r3, r3, r7
     272:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     276:	e792      	b.n	19e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x31>
     278:	4660      	mov	r0, ip
     27a:	e7e3      	b.n	244 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x50>
     27c:	4661      	mov	r1, ip
     27e:	e7f7      	b.n	270 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x7c>
     280:	4660      	mov	r0, ip
     282:	e7a3      	b.n	1cc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5f>
     284:	4663      	mov	r3, ip
     286:	e7b7      	b.n	1f8 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x4>
     288:	4283      	cmp	r3, r0
     28a:	d906      	bls.n	29a <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xa6>
     28c:	b916      	cbnz	r6, 294 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xa0>
     28e:	2100      	movs	r1, #0
     290:	4608      	mov	r0, r1
     292:	e77b      	b.n	18c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1f>
     294:	e9c6 e000 	strd	lr, r0, [r6]
     298:	e7f9      	b.n	28e <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x9a>
     29a:	fab3 f783 	clz	r7, r3
     29e:	b98f      	cbnz	r7, 2c4 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xd0>
     2a0:	4283      	cmp	r3, r0
     2a2:	d301      	bcc.n	2a8 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xb4>
     2a4:	4572      	cmp	r2, lr
     2a6:	d808      	bhi.n	2ba <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xc6>
     2a8:	ebbe 0402 	subs.w	r4, lr, r2
     2ac:	eb60 0303 	sbc.w	r3, r0, r3
     2b0:	2001      	movs	r0, #1
     2b2:	469c      	mov	ip, r3
     2b4:	b91e      	cbnz	r6, 2be <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xca>
     2b6:	2100      	movs	r1, #0
     2b8:	e768      	b.n	18c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1f>
     2ba:	4638      	mov	r0, r7
     2bc:	e7fa      	b.n	2b4 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xc0>
     2be:	e9c6 4c00 	strd	r4, ip, [r6]
     2c2:	e7f8      	b.n	2b6 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xc2>
     2c4:	f1c7 0c20 	rsb	ip, r7, #32
     2c8:	40bb      	lsls	r3, r7
     2ca:	fa22 f40c 	lsr.w	r4, r2, ip
     2ce:	431c      	orrs	r4, r3
     2d0:	fa2e f10c 	lsr.w	r1, lr, ip
     2d4:	fa20 f30c 	lsr.w	r3, r0, ip
     2d8:	40b8      	lsls	r0, r7
     2da:	4301      	orrs	r1, r0
     2dc:	ea4f 4914 	mov.w	r9, r4, lsr #16
     2e0:	fa0e f507 	lsl.w	r5, lr, r7
     2e4:	fbb3 f8f9 	udiv	r8, r3, r9
     2e8:	fa1f fe84 	uxth.w	lr, r4
     2ec:	fb09 3018 	mls	r0, r9, r8, r3
     2f0:	0c0b      	lsrs	r3, r1, #16
     2f2:	fb08 fa0e 	mul.w	sl, r8, lr
     2f6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     2fa:	459a      	cmp	sl, r3
     2fc:	fa02 f207 	lsl.w	r2, r2, r7
     300:	d940      	bls.n	384 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x190>
     302:	18e3      	adds	r3, r4, r3
     304:	f108 30ff 	add.w	r0, r8, #4294967295
     308:	d204      	bcs.n	314 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x120>
     30a:	459a      	cmp	sl, r3
     30c:	d902      	bls.n	314 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x120>
     30e:	f1a8 0002 	sub.w	r0, r8, #2
     312:	4423      	add	r3, r4
     314:	eba3 030a 	sub.w	r3, r3, sl
     318:	b289      	uxth	r1, r1
     31a:	fbb3 f8f9 	udiv	r8, r3, r9
     31e:	fb09 3318 	mls	r3, r9, r8, r3
     322:	fb08 fe0e 	mul.w	lr, r8, lr
     326:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     32a:	458e      	cmp	lr, r1
     32c:	d92c      	bls.n	388 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x194>
     32e:	1861      	adds	r1, r4, r1
     330:	f108 33ff 	add.w	r3, r8, #4294967295
     334:	d204      	bcs.n	340 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x14c>
     336:	458e      	cmp	lr, r1
     338:	d902      	bls.n	340 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x14c>
     33a:	f1a8 0302 	sub.w	r3, r8, #2
     33e:	4421      	add	r1, r4
     340:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     344:	fba0 9802 	umull	r9, r8, r0, r2
     348:	eba1 010e 	sub.w	r1, r1, lr
     34c:	4541      	cmp	r1, r8
     34e:	46ce      	mov	lr, r9
     350:	4643      	mov	r3, r8
     352:	d302      	bcc.n	35a <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x166>
     354:	d106      	bne.n	364 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x170>
     356:	454d      	cmp	r5, r9
     358:	d204      	bcs.n	364 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x170>
     35a:	ebb9 0e02 	subs.w	lr, r9, r2
     35e:	eb68 0304 	sbc.w	r3, r8, r4
     362:	3801      	subs	r0, #1
     364:	2e00      	cmp	r6, #0
     366:	d0a6      	beq.n	2b6 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xc2>
     368:	ebb5 020e 	subs.w	r2, r5, lr
     36c:	eb61 0103 	sbc.w	r1, r1, r3
     370:	fa01 fc0c 	lsl.w	ip, r1, ip
     374:	fa22 f307 	lsr.w	r3, r2, r7
     378:	ea4c 0303 	orr.w	r3, ip, r3
     37c:	40f9      	lsrs	r1, r7
     37e:	e9c6 3100 	strd	r3, r1, [r6]
     382:	e798      	b.n	2b6 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xc2>
     384:	4640      	mov	r0, r8
     386:	e7c5      	b.n	314 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x120>
     388:	4643      	mov	r3, r8
     38a:	e7d9      	b.n	340 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x14c>

0000038c <gpio_pin_set_dt.constprop.0.isra.0>:
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
			       int value)
{
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
     38c:	4b08      	ldr	r3, [pc, #32]	; (3b0 <gpio_pin_set_dt.constprop.0.isra.0+0x24>)
			(const struct gpio_driver_data *)port->data;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     38e:	691a      	ldr	r2, [r3, #16]
     390:	6812      	ldr	r2, [r2, #0]
     392:	0392      	lsls	r2, r2, #14
		value = (value != 0) ? 0 : 1;
     394:	bf48      	it	mi
     396:	f080 0001 	eormi.w	r0, r0, #1
	if (value != 0)	{
     39a:	b128      	cbz	r0, 3a8 <gpio_pin_set_dt.constprop.0.isra.0+0x1c>
	return api->port_set_bits_raw(port, pins);
     39c:	689b      	ldr	r3, [r3, #8]
     39e:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
     3a0:	4803      	ldr	r0, [pc, #12]	; (3b0 <gpio_pin_set_dt.constprop.0.isra.0+0x24>)
     3a2:	f44f 3100 	mov.w	r1, #131072	; 0x20000
     3a6:	4718      	bx	r3
     3a8:	689b      	ldr	r3, [r3, #8]
     3aa:	691b      	ldr	r3, [r3, #16]
     3ac:	e7f8      	b.n	3a0 <gpio_pin_set_dt.constprop.0.isra.0+0x14>
     3ae:	bf00      	nop
     3b0:	000052f4 	.word	0x000052f4

000003b4 <main>:
 * See the sample documentation for information on how to fix this.
 */
static const struct gpio_dt_spec led = GPIO_DT_SPEC_GET(LED0_NODE, gpios);

void main(void)
{
     3b4:	b510      	push	{r4, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     3b6:	4c14      	ldr	r4, [pc, #80]	; (408 <CONFIG_MAIN_STACK_SIZE+0x8>)
     3b8:	4620      	mov	r0, r4
     3ba:	f004 fd8a 	bl	4ed2 <z_device_is_ready>
	int ret;

	if (!device_is_ready(led.port)) {
     3be:	b308      	cbz	r0, 404 <CONFIG_MAIN_STACK_SIZE+0x4>
	struct gpio_driver_data *data =
     3c0:	6922      	ldr	r2, [r4, #16]
	const struct gpio_driver_api *api =
     3c2:	68a1      	ldr	r1, [r4, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
     3c4:	6813      	ldr	r3, [r2, #0]
     3c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     3ca:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
     3cc:	680b      	ldr	r3, [r1, #0]
     3ce:	4a0f      	ldr	r2, [pc, #60]	; (40c <CONFIG_MAIN_STACK_SIZE+0xc>)
     3d0:	2111      	movs	r1, #17
     3d2:	4620      	mov	r0, r4
     3d4:	4798      	blx	r3
		return;
	}

	ret = gpio_pin_configure_dt(&led, GPIO_OUTPUT | GPIO_OPEN_DRAIN | GPIO_PULL_UP);
	if (ret < 0) {
     3d6:	2800      	cmp	r0, #0
     3d8:	db14      	blt.n	404 <CONFIG_MAIN_STACK_SIZE+0x4>
		return;
	}
	
	gpio_pin_set_dt(&led, 1);	//led on
     3da:	2001      	movs	r0, #1
     3dc:	f7ff ffd6 	bl	38c <gpio_pin_set_dt.constprop.0.isra.0>
	k_msleep(SLEEP_TIME_MS);
     3e0:	f004 f952 	bl	4688 <k_msleep.constprop.0.isra.0>
	k_msleep(SLEEP_TIME_MS);
     3e4:	f004 f950 	bl	4688 <k_msleep.constprop.0.isra.0>
	k_msleep(SLEEP_TIME_MS);
     3e8:	f004 f94e 	bl	4688 <k_msleep.constprop.0.isra.0>
	gpio_pin_set_dt(&led, 0);	//led off
     3ec:	2000      	movs	r0, #0
     3ee:	f7ff ffcd 	bl	38c <gpio_pin_set_dt.constprop.0.isra.0>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     3f2:	f04f 30ff 	mov.w	r0, #4294967295
     3f6:	f04f 31ff 	mov.w	r1, #4294967295
     3fa:	f003 fe83 	bl	4104 <z_impl_k_sleep>
	k_sleep(K_FOREVER);

	while (1) {
		//gpio_pin_toggle_dt(&led);
		k_msleep(SLEEP_TIME_MS);
     3fe:	f004 f943 	bl	4688 <k_msleep.constprop.0.isra.0>
	while (1) {
     402:	e7fc      	b.n	3fe <main+0x4a>
	}
}
     404:	bd10      	pop	{r4, pc}
     406:	bf00      	nop
     408:	000052f4 	.word	0x000052f4
     40c:	00020017 	.word	0x00020017

00000410 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
     410:	4b01      	ldr	r3, [pc, #4]	; (418 <char_out+0x8>)
     412:	681b      	ldr	r3, [r3, #0]
     414:	4718      	bx	r3
     416:	bf00      	nop
     418:	20000000 	.word	0x20000000

0000041c <__printk_hook_install>:
	_char_out = fn;
     41c:	4b01      	ldr	r3, [pc, #4]	; (424 <__printk_hook_install+0x8>)
     41e:	6018      	str	r0, [r3, #0]
}
     420:	4770      	bx	lr
     422:	bf00      	nop
     424:	20000000 	.word	0x20000000

00000428 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
     428:	b507      	push	{r0, r1, r2, lr}
     42a:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
     42c:	2100      	movs	r1, #0
     42e:	4602      	mov	r2, r0
     430:	9100      	str	r1, [sp, #0]
     432:	4803      	ldr	r0, [pc, #12]	; (440 <vprintk+0x18>)
     434:	f000 f914 	bl	660 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     438:	b003      	add	sp, #12
     43a:	f85d fb04 	ldr.w	pc, [sp], #4
     43e:	bf00      	nop
     440:	00000411 	.word	0x00000411

00000444 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     448:	8b05      	ldrh	r5, [r0, #24]
{
     44a:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     44c:	0728      	lsls	r0, r5, #28
{
     44e:	4690      	mov	r8, r2
	if (processing) {
     450:	d411      	bmi.n	476 <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
     452:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     454:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
     458:	f040 80cd 	bne.w	5f6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10e>
			evt = process_recheck(mgr);
     45c:	4620      	mov	r0, r4
     45e:	f004 f931 	bl	46c4 <process_recheck>
		}

		if (evt == EVT_NOP) {
     462:	b178      	cbz	r0, 484 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
     464:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     466:	8b21      	ldrh	r1, [r4, #24]
     468:	2804      	cmp	r0, #4
     46a:	d811      	bhi.n	490 <process_event+0x4c>
     46c:	e8df f000 	tbb	[pc, r0]
     470:	856d10c3 	.word	0x856d10c3
     474:	95          	.byte	0x95
     475:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
     476:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     478:	bf0c      	ite	eq
     47a:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
     47e:	f045 0520 	orrne.w	r5, r5, #32
     482:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     484:	f388 8811 	msr	BASEPRI, r8
     488:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     48c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     490:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     494:	45aa      	cmp	sl, r5
     496:	f000 80a6 	beq.w	5e6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xfe>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
     49a:	2700      	movs	r7, #0
     49c:	46b9      	mov	r9, r7
     49e:	463e      	mov	r6, r7
     4a0:	68a3      	ldr	r3, [r4, #8]
     4a2:	2b00      	cmp	r3, #0
     4a4:	f000 80bd 	beq.w	622 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x13a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     4a8:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     4ac:	8321      	strh	r1, [r4, #24]
     4ae:	f388 8811 	msr	BASEPRI, r8
     4b2:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     4b6:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     4b8:	2900      	cmp	r1, #0
     4ba:	f000 80bb 	beq.w	634 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14c>
	return node->next;
     4be:	680d      	ldr	r5, [r1, #0]
     4c0:	2900      	cmp	r1, #0
     4c2:	f000 80b7 	beq.w	634 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14c>
		mon->callback(mgr, mon, state, res);
     4c6:	f8d1 8004 	ldr.w	r8, [r1, #4]
     4ca:	4633      	mov	r3, r6
     4cc:	4652      	mov	r2, sl
     4ce:	4620      	mov	r0, r4
     4d0:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     4d2:	2d00      	cmp	r5, #0
     4d4:	d076      	beq.n	5c4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xdc>
     4d6:	682b      	ldr	r3, [r5, #0]
     4d8:	4629      	mov	r1, r5
     4da:	461d      	mov	r5, r3
     4dc:	e7f0      	b.n	4c0 <process_event+0x7c>
     4de:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     4e2:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     4e4:	2a01      	cmp	r2, #1
     4e6:	d81b      	bhi.n	520 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x38>
	list->head = NULL;
     4e8:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     4ea:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     4ee:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     4f0:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     4f2:	b289      	uxth	r1, r1
	list->tail = NULL;
     4f4:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     4f8:	d109      	bne.n	50e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x26>
     4fa:	463b      	mov	r3, r7
     4fc:	e003      	b.n	506 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1e>
				mgr->refs += 1U;
     4fe:	8b62      	ldrh	r2, [r4, #26]
     500:	3201      	adds	r2, #1
     502:	8362      	strh	r2, [r4, #26]
	return node->next;
     504:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     506:	2b00      	cmp	r3, #0
     508:	d1f9      	bne.n	4fe <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x16>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     50a:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     50e:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     510:	4620      	mov	r0, r4
     512:	f004 f8d7 	bl	46c4 <process_recheck>
     516:	2800      	cmp	r0, #0
     518:	d07b      	beq.n	612 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     51a:	f041 0120 	orr.w	r1, r1, #32
     51e:	e077      	b.n	610 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x128>
	} else if (state == ONOFF_STATE_TO_OFF) {
     520:	2b04      	cmp	r3, #4
     522:	d10a      	bne.n	53a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x52>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     524:	f021 0107 	bic.w	r1, r1, #7
     528:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     52a:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     52c:	4620      	mov	r0, r4
     52e:	f004 f8c9 	bl	46c4 <process_recheck>
     532:	b110      	cbz	r0, 53a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x52>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     534:	f041 0120 	orr.w	r1, r1, #32
     538:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     53a:	8b21      	ldrh	r1, [r4, #24]
     53c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     540:	45aa      	cmp	sl, r5
     542:	d050      	beq.n	5e6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xfe>
     544:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
     546:	46b9      	mov	r9, r7
     548:	e7aa      	b.n	4a0 <process_event+0x5c>
			transit = mgr->transitions->start;
     54a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     54c:	f021 0107 	bic.w	r1, r1, #7
     550:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
     554:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
     556:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
     55a:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     55c:	d12d      	bne.n	5ba <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd2>
		    || (transit != NULL)) {
     55e:	f1b9 0f00 	cmp.w	r9, #0
     562:	d040      	beq.n	5e6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xfe>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     564:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     568:	8321      	strh	r1, [r4, #24]
     56a:	f388 8811 	msr	BASEPRI, r8
     56e:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
     572:	493a      	ldr	r1, [pc, #232]	; (65c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x174>)
     574:	4620      	mov	r0, r4
     576:	47c8      	blx	r9
     578:	e029      	b.n	5ce <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     57a:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
     57e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     580:	f041 0104 	orr.w	r1, r1, #4
     584:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
     586:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
     588:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
     58c:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     58e:	d0e6      	beq.n	55e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x76>
     590:	2700      	movs	r7, #0
		res = 0;
     592:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     594:	f04f 0a04 	mov.w	sl, #4
     598:	e782      	b.n	4a0 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     59a:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
     59e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5a0:	f041 0105 	orr.w	r1, r1, #5
     5a4:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
     5a6:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
     5a8:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
     5ac:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     5ae:	d0d6      	beq.n	55e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x76>
     5b0:	2700      	movs	r7, #0
		res = 0;
     5b2:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     5b4:	f04f 0a05 	mov.w	sl, #5
     5b8:	e772      	b.n	4a0 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
     5ba:	2700      	movs	r7, #0
		res = 0;
     5bc:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     5be:	f04f 0a06 	mov.w	sl, #6
     5c2:	e76d      	b.n	4a0 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     5c4:	462b      	mov	r3, r5
     5c6:	e787      	b.n	4d8 <process_event+0x94>
			if (transit != NULL) {
     5c8:	f1b9 0f00 	cmp.w	r9, #0
     5cc:	d1d1      	bne.n	572 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8a>
	__asm__ volatile(
     5ce:	f04f 0320 	mov.w	r3, #32
     5d2:	f3ef 8811 	mrs	r8, BASEPRI
     5d6:	f383 8812 	msr	BASEPRI_MAX, r3
     5da:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     5de:	8b23      	ldrh	r3, [r4, #24]
     5e0:	f023 0308 	bic.w	r3, r3, #8
     5e4:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     5e6:	8b25      	ldrh	r5, [r4, #24]
     5e8:	06ea      	lsls	r2, r5, #27
     5ea:	d52e      	bpl.n	64a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x162>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     5ec:	f025 0310 	bic.w	r3, r5, #16
     5f0:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     5f2:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
     5f6:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     5f8:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     5fa:	2e00      	cmp	r6, #0
     5fc:	f6bf af6f 	bge.w	4de <process_event+0x9a>
	list->head = NULL;
     600:	2300      	movs	r3, #0
		*clients = mgr->clients;
     602:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
     604:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     608:	f021 0107 	bic.w	r1, r1, #7
     60c:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
     610:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     612:	8b21      	ldrh	r1, [r4, #24]
     614:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     618:	45aa      	cmp	sl, r5
     61a:	f04f 0900 	mov.w	r9, #0
     61e:	f47f af3f 	bne.w	4a0 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
     622:	2f00      	cmp	r7, #0
     624:	d09b      	beq.n	55e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x76>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     626:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     62a:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
     62c:	f388 8811 	msr	BASEPRI, r8
     630:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
     634:	2f00      	cmp	r7, #0
     636:	d0c7      	beq.n	5c8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe0>
	return node->next;
     638:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
     63a:	4639      	mov	r1, r7
     63c:	4633      	mov	r3, r6
     63e:	4652      	mov	r2, sl
     640:	4620      	mov	r0, r4
     642:	f004 f86b 	bl	471c <notify_one>
	list->head = node;
     646:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
     648:	e7f4      	b.n	634 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     64a:	06ab      	lsls	r3, r5, #26
     64c:	f57f af1a 	bpl.w	484 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     650:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     654:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     656:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
     65a:	e6ff      	b.n	45c <process_event+0x18>
     65c:	00004749 	.word	0x00004749

00000660 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
     660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     664:	4681      	mov	r9, r0
     666:	b095      	sub	sp, #84	; 0x54
     668:	468b      	mov	fp, r1
     66a:	4617      	mov	r7, r2
     66c:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     66e:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     670:	7838      	ldrb	r0, [r7, #0]
     672:	b908      	cbnz	r0, 678 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
     674:	4628      	mov	r0, r5
     676:	e358      	b.n	d2a <__z_interrupt_stack_SIZEOF+0x4ea>
			OUTC(*fp++);
     678:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
     67a:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     67c:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
     67e:	d006      	beq.n	68e <z_cbvprintf_impl+0x2e>
			OUTC('%');
     680:	4659      	mov	r1, fp
     682:	47c8      	blx	r9
     684:	2800      	cmp	r0, #0
     686:	f2c0 8350 	blt.w	d2a <__z_interrupt_stack_SIZEOF+0x4ea>
     68a:	3501      	adds	r5, #1
		if (bps == NULL) {
     68c:	e1fb      	b.n	a86 <__z_interrupt_stack_SIZEOF+0x246>
		} state = {
     68e:	2218      	movs	r2, #24
     690:	2100      	movs	r1, #0
     692:	a80e      	add	r0, sp, #56	; 0x38
     694:	f004 f99e 	bl	49d4 <memset>
	if (*sp == '%') {
     698:	787b      	ldrb	r3, [r7, #1]
     69a:	2b25      	cmp	r3, #37	; 0x25
     69c:	d07d      	beq.n	79a <z_cbvprintf_impl+0x13a>
     69e:	2300      	movs	r3, #0
     6a0:	1c78      	adds	r0, r7, #1
     6a2:	4698      	mov	r8, r3
     6a4:	469e      	mov	lr, r3
     6a6:	469c      	mov	ip, r3
     6a8:	461e      	mov	r6, r3
     6aa:	4601      	mov	r1, r0
		switch (*sp) {
     6ac:	f810 2b01 	ldrb.w	r2, [r0], #1
     6b0:	2a2b      	cmp	r2, #43	; 0x2b
     6b2:	f000 80a1 	beq.w	7f8 <z_cbvprintf_impl+0x198>
     6b6:	f200 8098 	bhi.w	7ea <z_cbvprintf_impl+0x18a>
     6ba:	2a20      	cmp	r2, #32
     6bc:	f000 809f 	beq.w	7fe <z_cbvprintf_impl+0x19e>
     6c0:	2a23      	cmp	r2, #35	; 0x23
     6c2:	f000 809f 	beq.w	804 <CONFIG_ISR_STACK_SIZE+0x4>
     6c6:	b12b      	cbz	r3, 6d4 <z_cbvprintf_impl+0x74>
     6c8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     6cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     6d0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     6d4:	f1b8 0f00 	cmp.w	r8, #0
     6d8:	d005      	beq.n	6e6 <z_cbvprintf_impl+0x86>
     6da:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     6de:	f043 0320 	orr.w	r3, r3, #32
     6e2:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     6e6:	f1be 0f00 	cmp.w	lr, #0
     6ea:	d005      	beq.n	6f8 <z_cbvprintf_impl+0x98>
     6ec:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     6f0:	f043 0310 	orr.w	r3, r3, #16
     6f4:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     6f8:	f1bc 0f00 	cmp.w	ip, #0
     6fc:	d005      	beq.n	70a <z_cbvprintf_impl+0xaa>
     6fe:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     702:	f043 0308 	orr.w	r3, r3, #8
     706:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     70a:	b12e      	cbz	r6, 718 <z_cbvprintf_impl+0xb8>
     70c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     710:	f043 0304 	orr.w	r3, r3, #4
     714:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
     718:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     71c:	f003 0044 	and.w	r0, r3, #68	; 0x44
     720:	2844      	cmp	r0, #68	; 0x44
     722:	d103      	bne.n	72c <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
     724:	f36f 1386 	bfc	r3, #6, #1
     728:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
     72c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
     730:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
     732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     736:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
     73a:	d17f      	bne.n	83c <CONFIG_ISR_STACK_SIZE+0x3c>
		conv->width_star = true;
     73c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     740:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
     744:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     746:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
     74a:	781a      	ldrb	r2, [r3, #0]
     74c:	2a2e      	cmp	r2, #46	; 0x2e
     74e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     752:	bf0c      	ite	eq
     754:	2101      	moveq	r1, #1
     756:	2100      	movne	r1, #0
     758:	f361 0241 	bfi	r2, r1, #1, #1
     75c:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
     760:	d178      	bne.n	854 <__z_interrupt_stack_SIZEOF+0x14>
	if (*sp == '*') {
     762:	785a      	ldrb	r2, [r3, #1]
     764:	2a2a      	cmp	r2, #42	; 0x2a
     766:	d06e      	beq.n	846 <__z_interrupt_stack_SIZEOF+0x6>
	++sp;
     768:	3301      	adds	r3, #1
	size_t val = 0;
     76a:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     76c:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     770:	4619      	mov	r1, r3
     772:	f811 0b01 	ldrb.w	r0, [r1], #1
     776:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     77a:	2e09      	cmp	r6, #9
     77c:	f240 8095 	bls.w	8aa <__z_interrupt_stack_SIZEOF+0x6a>
	conv->unsupported |= ((conv->prec_value < 0)
     780:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
     784:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
     786:	f3c1 0040 	ubfx	r0, r1, #1, #1
     78a:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
     78e:	460a      	mov	r2, r1
     790:	f360 0241 	bfi	r2, r0, #1, #1
     794:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
     798:	e05c      	b.n	854 <__z_interrupt_stack_SIZEOF+0x14>
		conv->specifier = *sp++;
     79a:	1cba      	adds	r2, r7, #2
     79c:	9203      	str	r2, [sp, #12]
     79e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
     7a2:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
     7a6:	07da      	lsls	r2, r3, #31
     7a8:	f140 812e 	bpl.w	a08 <__z_interrupt_stack_SIZEOF+0x1c8>
			width = va_arg(ap, int);
     7ac:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
     7b0:	f1b8 0f00 	cmp.w	r8, #0
     7b4:	da07      	bge.n	7c6 <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
     7b6:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
     7ba:	f042 0204 	orr.w	r2, r2, #4
     7be:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
     7c2:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
     7c6:	075e      	lsls	r6, r3, #29
     7c8:	f140 8127 	bpl.w	a1a <__z_interrupt_stack_SIZEOF+0x1da>
			int arg = va_arg(ap, int);
     7cc:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
     7d0:	f1ba 0f00 	cmp.w	sl, #0
     7d4:	f280 8126 	bge.w	a24 <__z_interrupt_stack_SIZEOF+0x1e4>
				conv->prec_present = false;
     7d8:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
     7dc:	f36f 0341 	bfc	r3, #1, #1
     7e0:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
     7e4:	f04f 3aff 	mov.w	sl, #4294967295
     7e8:	e11c      	b.n	a24 <__z_interrupt_stack_SIZEOF+0x1e4>
		switch (*sp) {
     7ea:	2a2d      	cmp	r2, #45	; 0x2d
     7ec:	d00d      	beq.n	80a <CONFIG_ISR_STACK_SIZE+0xa>
     7ee:	2a30      	cmp	r2, #48	; 0x30
     7f0:	f47f af69 	bne.w	6c6 <z_cbvprintf_impl+0x66>
     7f4:	2301      	movs	r3, #1
	} while (loop);
     7f6:	e758      	b.n	6aa <z_cbvprintf_impl+0x4a>
		switch (*sp) {
     7f8:	f04f 0c01 	mov.w	ip, #1
     7fc:	e755      	b.n	6aa <z_cbvprintf_impl+0x4a>
     7fe:	f04f 0e01 	mov.w	lr, #1
     802:	e752      	b.n	6aa <z_cbvprintf_impl+0x4a>
     804:	f04f 0801 	mov.w	r8, #1
     808:	e74f      	b.n	6aa <z_cbvprintf_impl+0x4a>
     80a:	2601      	movs	r6, #1
     80c:	e74d      	b.n	6aa <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
     80e:	fb0e 6202 	mla	r2, lr, r2, r6
     812:	3a30      	subs	r2, #48	; 0x30
     814:	4603      	mov	r3, r0
     816:	4618      	mov	r0, r3
     818:	f810 6b01 	ldrb.w	r6, [r0], #1
     81c:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     820:	f1bc 0f09 	cmp.w	ip, #9
     824:	d9f3      	bls.n	80e <CONFIG_ISR_STACK_SIZE+0xe>
	if (sp != wp) {
     826:	4299      	cmp	r1, r3
     828:	d08f      	beq.n	74a <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     82a:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
     82e:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
     830:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     832:	f362 0141 	bfi	r1, r2, #1, #1
     836:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
     83a:	e786      	b.n	74a <z_cbvprintf_impl+0xea>
     83c:	460b      	mov	r3, r1
	size_t val = 0;
     83e:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     840:	f04f 0e0a 	mov.w	lr, #10
     844:	e7e7      	b.n	816 <CONFIG_ISR_STACK_SIZE+0x16>
		conv->prec_star = true;
     846:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     84a:	f042 0204 	orr.w	r2, r2, #4
     84e:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
     852:	3302      	adds	r3, #2
	switch (*sp) {
     854:	781a      	ldrb	r2, [r3, #0]
     856:	2a6c      	cmp	r2, #108	; 0x6c
     858:	d047      	beq.n	8ea <__z_interrupt_stack_SIZEOF+0xaa>
     85a:	d82b      	bhi.n	8b4 <__z_interrupt_stack_SIZEOF+0x74>
     85c:	2a68      	cmp	r2, #104	; 0x68
     85e:	d031      	beq.n	8c4 <__z_interrupt_stack_SIZEOF+0x84>
     860:	2a6a      	cmp	r2, #106	; 0x6a
     862:	d04b      	beq.n	8fc <__z_interrupt_stack_SIZEOF+0xbc>
     864:	2a4c      	cmp	r2, #76	; 0x4c
     866:	d051      	beq.n	90c <__z_interrupt_stack_SIZEOF+0xcc>
	conv->specifier = *sp++;
     868:	461a      	mov	r2, r3
     86a:	f812 3b01 	ldrb.w	r3, [r2], #1
     86e:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
     870:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
     872:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
     876:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
     87a:	f200 80be 	bhi.w	9fa <__z_interrupt_stack_SIZEOF+0x1ba>
     87e:	2b6d      	cmp	r3, #109	; 0x6d
     880:	d851      	bhi.n	926 <__z_interrupt_stack_SIZEOF+0xe6>
     882:	2b69      	cmp	r3, #105	; 0x69
     884:	f200 80b9 	bhi.w	9fa <__z_interrupt_stack_SIZEOF+0x1ba>
     888:	2b57      	cmp	r3, #87	; 0x57
     88a:	d867      	bhi.n	95c <__z_interrupt_stack_SIZEOF+0x11c>
     88c:	2b41      	cmp	r3, #65	; 0x41
     88e:	d003      	beq.n	898 <__z_interrupt_stack_SIZEOF+0x58>
     890:	3b45      	subs	r3, #69	; 0x45
     892:	2b02      	cmp	r3, #2
     894:	f200 80b1 	bhi.w	9fa <__z_interrupt_stack_SIZEOF+0x1ba>
		conv->specifier_cat = SPECIFIER_FP;
     898:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     89c:	2204      	movs	r2, #4
     89e:	f362 0302 	bfi	r3, r2, #0, #3
     8a2:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
     8a6:	2301      	movs	r3, #1
			break;
     8a8:	e073      	b.n	992 <__z_interrupt_stack_SIZEOF+0x152>
		val = 10U * val + *sp++ - '0';
     8aa:	fb0c 0202 	mla	r2, ip, r2, r0
     8ae:	3a30      	subs	r2, #48	; 0x30
     8b0:	460b      	mov	r3, r1
     8b2:	e75d      	b.n	770 <z_cbvprintf_impl+0x110>
	switch (*sp) {
     8b4:	2a74      	cmp	r2, #116	; 0x74
     8b6:	d025      	beq.n	904 <__z_interrupt_stack_SIZEOF+0xc4>
     8b8:	2a7a      	cmp	r2, #122	; 0x7a
     8ba:	d1d5      	bne.n	868 <__z_interrupt_stack_SIZEOF+0x28>
		conv->length_mod = LENGTH_Z;
     8bc:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     8c0:	2106      	movs	r1, #6
     8c2:	e00c      	b.n	8de <__z_interrupt_stack_SIZEOF+0x9e>
		if (*++sp == 'h') {
     8c4:	785a      	ldrb	r2, [r3, #1]
     8c6:	2a68      	cmp	r2, #104	; 0x68
     8c8:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     8cc:	d106      	bne.n	8dc <__z_interrupt_stack_SIZEOF+0x9c>
			conv->length_mod = LENGTH_HH;
     8ce:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     8d0:	f361 02c6 	bfi	r2, r1, #3, #4
     8d4:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
     8d8:	3302      	adds	r3, #2
     8da:	e7c5      	b.n	868 <__z_interrupt_stack_SIZEOF+0x28>
			conv->length_mod = LENGTH_H;
     8dc:	2102      	movs	r1, #2
     8de:	f361 02c6 	bfi	r2, r1, #3, #4
     8e2:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
     8e6:	3301      	adds	r3, #1
     8e8:	e7be      	b.n	868 <__z_interrupt_stack_SIZEOF+0x28>
		if (*++sp == 'l') {
     8ea:	785a      	ldrb	r2, [r3, #1]
     8ec:	2a6c      	cmp	r2, #108	; 0x6c
     8ee:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     8f2:	d101      	bne.n	8f8 <__z_interrupt_stack_SIZEOF+0xb8>
			conv->length_mod = LENGTH_LL;
     8f4:	2104      	movs	r1, #4
     8f6:	e7eb      	b.n	8d0 <__z_interrupt_stack_SIZEOF+0x90>
			conv->length_mod = LENGTH_L;
     8f8:	2103      	movs	r1, #3
     8fa:	e7f0      	b.n	8de <__z_interrupt_stack_SIZEOF+0x9e>
		conv->length_mod = LENGTH_J;
     8fc:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     900:	2105      	movs	r1, #5
     902:	e7ec      	b.n	8de <__z_interrupt_stack_SIZEOF+0x9e>
		conv->length_mod = LENGTH_T;
     904:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     908:	2107      	movs	r1, #7
     90a:	e7e8      	b.n	8de <__z_interrupt_stack_SIZEOF+0x9e>
		conv->unsupported = true;
     90c:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
     910:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
     914:	f022 0202 	bic.w	r2, r2, #2
     918:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
     91c:	f042 0202 	orr.w	r2, r2, #2
     920:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
     924:	e7df      	b.n	8e6 <__z_interrupt_stack_SIZEOF+0xa6>
	switch (conv->specifier) {
     926:	3b6e      	subs	r3, #110	; 0x6e
     928:	b2d9      	uxtb	r1, r3
     92a:	2301      	movs	r3, #1
     92c:	408b      	lsls	r3, r1
     92e:	f240 4182 	movw	r1, #1154	; 0x482
     932:	420b      	tst	r3, r1
     934:	d137      	bne.n	9a6 <__z_interrupt_stack_SIZEOF+0x166>
     936:	f013 0f24 	tst.w	r3, #36	; 0x24
     93a:	d151      	bne.n	9e0 <__z_interrupt_stack_SIZEOF+0x1a0>
     93c:	07d8      	lsls	r0, r3, #31
     93e:	d55c      	bpl.n	9fa <__z_interrupt_stack_SIZEOF+0x1ba>
		conv->specifier_cat = SPECIFIER_PTR;
     940:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     944:	2103      	movs	r1, #3
     946:	f361 0302 	bfi	r3, r1, #0, #3
     94a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
     94e:	f002 0378 	and.w	r3, r2, #120	; 0x78
     952:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
     956:	424b      	negs	r3, r1
     958:	414b      	adcs	r3, r1
     95a:	e01a      	b.n	992 <__z_interrupt_stack_SIZEOF+0x152>
	switch (conv->specifier) {
     95c:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
     960:	b2c9      	uxtb	r1, r1
     962:	2001      	movs	r0, #1
     964:	fa00 f101 	lsl.w	r1, r0, r1
     968:	f411 4f62 	tst.w	r1, #57856	; 0xe200
     96c:	d194      	bne.n	898 <__z_interrupt_stack_SIZEOF+0x58>
     96e:	f640 0601 	movw	r6, #2049	; 0x801
     972:	4231      	tst	r1, r6
     974:	d11d      	bne.n	9b2 <__z_interrupt_stack_SIZEOF+0x172>
     976:	f411 3f04 	tst.w	r1, #135168	; 0x21000
     97a:	d03e      	beq.n	9fa <__z_interrupt_stack_SIZEOF+0x1ba>
		conv->specifier_cat = SPECIFIER_SINT;
     97c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     980:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     984:	f002 0278 	and.w	r2, r2, #120	; 0x78
     988:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
     98a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
     98e:	d034      	beq.n	9fa <__z_interrupt_stack_SIZEOF+0x1ba>
	bool unsupported = false;
     990:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
     992:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
     996:	f3c2 0140 	ubfx	r1, r2, #1, #1
     99a:	430b      	orrs	r3, r1
     99c:	f363 0241 	bfi	r2, r3, #1, #1
     9a0:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
     9a4:	e6fd      	b.n	7a2 <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
     9a6:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     9aa:	2102      	movs	r1, #2
     9ac:	f361 0302 	bfi	r3, r1, #0, #3
     9b0:	e7e8      	b.n	984 <__z_interrupt_stack_SIZEOF+0x144>
     9b2:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
     9b6:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
     9b8:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     9bc:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     9c0:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     9c2:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
     9c6:	bf02      	ittt	eq
     9c8:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
     9cc:	f041 0101 	orreq.w	r1, r1, #1
     9d0:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
     9d4:	2b63      	cmp	r3, #99	; 0x63
     9d6:	d1db      	bne.n	990 <__z_interrupt_stack_SIZEOF+0x150>
			unsupported = (conv->length_mod != LENGTH_NONE);
     9d8:	1e13      	subs	r3, r2, #0
     9da:	bf18      	it	ne
     9dc:	2301      	movne	r3, #1
     9de:	e7d8      	b.n	992 <__z_interrupt_stack_SIZEOF+0x152>
		conv->specifier_cat = SPECIFIER_PTR;
     9e0:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     9e4:	2103      	movs	r1, #3
     9e6:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
     9ea:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     9ee:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
     9f2:	bf14      	ite	ne
     9f4:	2301      	movne	r3, #1
     9f6:	2300      	moveq	r3, #0
     9f8:	e7cb      	b.n	992 <__z_interrupt_stack_SIZEOF+0x152>
		conv->invalid = true;
     9fa:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     9fe:	f043 0301 	orr.w	r3, r3, #1
     a02:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
     a06:	e7c3      	b.n	990 <__z_interrupt_stack_SIZEOF+0x150>
		} else if (conv->width_present) {
     a08:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
     a0c:	2a00      	cmp	r2, #0
			width = conv->width_value;
     a0e:	bfb4      	ite	lt
     a10:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
     a14:	f04f 38ff 	movge.w	r8, #4294967295
     a18:	e6d5      	b.n	7c6 <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
     a1a:	0798      	lsls	r0, r3, #30
     a1c:	f57f aee2 	bpl.w	7e4 <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
     a20:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
     a24:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
     a28:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     a2a:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
     a2e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
     a32:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     a36:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     a38:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     a3c:	d133      	bne.n	aa6 <__z_interrupt_stack_SIZEOF+0x266>
			switch (length_mod) {
     a3e:	1ecb      	subs	r3, r1, #3
     a40:	2b04      	cmp	r3, #4
     a42:	d804      	bhi.n	a4e <__z_interrupt_stack_SIZEOF+0x20e>
     a44:	e8df f003 	tbb	[pc, r3]
     a48:	21464621 	.word	0x21464621
     a4c:	21          	.byte	0x21
     a4d:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
     a4e:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
     a50:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
     a52:	ea4f 72e3 	mov.w	r2, r3, asr #31
     a56:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
     a5a:	d11c      	bne.n	a96 <__z_interrupt_stack_SIZEOF+0x256>
				value->sint = (signed char)value->sint;
     a5c:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
     a60:	17da      	asrs	r2, r3, #31
     a62:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
     a66:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
     a68:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     a6c:	f013 0603 	ands.w	r6, r3, #3
     a70:	d050      	beq.n	b14 <__z_interrupt_stack_SIZEOF+0x2d4>
			OUTS(sp, fp);
     a72:	9b03      	ldr	r3, [sp, #12]
     a74:	463a      	mov	r2, r7
     a76:	4659      	mov	r1, fp
     a78:	4648      	mov	r0, r9
     a7a:	f003 ff67 	bl	494c <outs>
     a7e:	2800      	cmp	r0, #0
     a80:	f2c0 8153 	blt.w	d2a <__z_interrupt_stack_SIZEOF+0x4ea>
     a84:	4405      	add	r5, r0
			continue;
     a86:	9f03      	ldr	r7, [sp, #12]
     a88:	e5f2      	b.n	670 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     a8a:	f854 3b04 	ldr.w	r3, [r4], #4
     a8e:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
     a90:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
     a94:	e7e8      	b.n	a68 <__z_interrupt_stack_SIZEOF+0x228>
			} else if (length_mod == LENGTH_H) {
     a96:	2902      	cmp	r1, #2
     a98:	d1e5      	bne.n	a66 <__z_interrupt_stack_SIZEOF+0x226>
				value->sint = (short)value->sint;
     a9a:	b21a      	sxth	r2, r3
     a9c:	f343 33c0 	sbfx	r3, r3, #15, #1
     aa0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
     aa4:	e7df      	b.n	a66 <__z_interrupt_stack_SIZEOF+0x226>
		} else if (specifier_cat == SPECIFIER_UINT) {
     aa6:	2b02      	cmp	r3, #2
     aa8:	d124      	bne.n	af4 <__z_interrupt_stack_SIZEOF+0x2b4>
			switch (length_mod) {
     aaa:	1ecb      	subs	r3, r1, #3
     aac:	2b04      	cmp	r3, #4
     aae:	d804      	bhi.n	aba <__z_interrupt_stack_SIZEOF+0x27a>
     ab0:	e8df f003 	tbb	[pc, r3]
     ab4:	18101018 	.word	0x18101018
     ab8:	18          	.byte	0x18
     ab9:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
     aba:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
     abc:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     ac0:	f04f 0200 	mov.w	r2, #0
     ac4:	d014      	beq.n	af0 <__z_interrupt_stack_SIZEOF+0x2b0>
			} else if (length_mod == LENGTH_H) {
     ac6:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
     ac8:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
     acc:	d1cc      	bne.n	a68 <__z_interrupt_stack_SIZEOF+0x228>
				value->uint = (unsigned short)value->uint;
     ace:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
     ad0:	930e      	str	r3, [sp, #56]	; 0x38
     ad2:	e7c9      	b.n	a68 <__z_interrupt_stack_SIZEOF+0x228>
					(uint_value_type)va_arg(ap,
     ad4:	3407      	adds	r4, #7
     ad6:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
     ada:	e8f4 2302 	ldrd	r2, r3, [r4], #8
     ade:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
     ae2:	e7c1      	b.n	a68 <__z_interrupt_stack_SIZEOF+0x228>
					(uint_value_type)va_arg(ap, size_t);
     ae4:	f854 3b04 	ldr.w	r3, [r4], #4
     ae8:	930e      	str	r3, [sp, #56]	; 0x38
     aea:	2300      	movs	r3, #0
     aec:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
     aee:	e7bb      	b.n	a68 <__z_interrupt_stack_SIZEOF+0x228>
				value->uint = (unsigned char)value->uint;
     af0:	b2db      	uxtb	r3, r3
     af2:	e7cd      	b.n	a90 <__z_interrupt_stack_SIZEOF+0x250>
		} else if (specifier_cat == SPECIFIER_FP) {
     af4:	2b04      	cmp	r3, #4
     af6:	d108      	bne.n	b0a <__z_interrupt_stack_SIZEOF+0x2ca>
					(sint_value_type)va_arg(ap, long long);
     af8:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
     afa:	f024 0407 	bic.w	r4, r4, #7
     afe:	e9d4 2300 	ldrd	r2, r3, [r4]
     b02:	3408      	adds	r4, #8
     b04:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
     b08:	e7ae      	b.n	a68 <__z_interrupt_stack_SIZEOF+0x228>
		} else if (specifier_cat == SPECIFIER_PTR) {
     b0a:	2b03      	cmp	r3, #3
     b0c:	d1ac      	bne.n	a68 <__z_interrupt_stack_SIZEOF+0x228>
			value->ptr = va_arg(ap, void *);
     b0e:	f854 3b04 	ldr.w	r3, [r4], #4
     b12:	e7dd      	b.n	ad0 <__z_interrupt_stack_SIZEOF+0x290>
		switch (conv->specifier) {
     b14:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
     b18:	2878      	cmp	r0, #120	; 0x78
     b1a:	d8b4      	bhi.n	a86 <__z_interrupt_stack_SIZEOF+0x246>
     b1c:	2862      	cmp	r0, #98	; 0x62
     b1e:	d81c      	bhi.n	b5a <__z_interrupt_stack_SIZEOF+0x31a>
     b20:	2825      	cmp	r0, #37	; 0x25
     b22:	f43f adad 	beq.w	680 <z_cbvprintf_impl+0x20>
     b26:	2858      	cmp	r0, #88	; 0x58
     b28:	d1ad      	bne.n	a86 <__z_interrupt_stack_SIZEOF+0x246>
			bps = encode_uint(value->uint, conv, buf, bpe);
     b2a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     b2e:	9300      	str	r3, [sp, #0]
     b30:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
     b34:	ab08      	add	r3, sp, #32
     b36:	aa10      	add	r2, sp, #64	; 0x40
     b38:	f003 fec2 	bl	48c0 <encode_uint>
			if (precision >= 0) {
     b3c:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
     b40:	4607      	mov	r7, r0
			if (precision >= 0) {
     b42:	f280 809a 	bge.w	c7a <__z_interrupt_stack_SIZEOF+0x43a>
		if (bps == NULL) {
     b46:	2f00      	cmp	r7, #0
     b48:	d09d      	beq.n	a86 <__z_interrupt_stack_SIZEOF+0x246>
		size_t nj_len = (bpe - bps);
     b4a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     b4e:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
     b50:	2e00      	cmp	r6, #0
     b52:	f000 80c1 	beq.w	cd8 <__z_interrupt_stack_SIZEOF+0x498>
			nj_len += 1U;
     b56:	3001      	adds	r0, #1
     b58:	e0be      	b.n	cd8 <__z_interrupt_stack_SIZEOF+0x498>
		switch (conv->specifier) {
     b5a:	3863      	subs	r0, #99	; 0x63
     b5c:	2815      	cmp	r0, #21
     b5e:	d892      	bhi.n	a86 <__z_interrupt_stack_SIZEOF+0x246>
     b60:	a201      	add	r2, pc, #4	; (adr r2, b68 <__z_interrupt_stack_SIZEOF+0x328>)
     b62:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
     b66:	bf00      	nop
     b68:	00000c3d 	.word	0x00000c3d
     b6c:	00000c4f 	.word	0x00000c4f
     b70:	00000a87 	.word	0x00000a87
     b74:	00000a87 	.word	0x00000a87
     b78:	00000a87 	.word	0x00000a87
     b7c:	00000a87 	.word	0x00000a87
     b80:	00000c4f 	.word	0x00000c4f
     b84:	00000a87 	.word	0x00000a87
     b88:	00000a87 	.word	0x00000a87
     b8c:	00000a87 	.word	0x00000a87
     b90:	00000a87 	.word	0x00000a87
     b94:	00000cdd 	.word	0x00000cdd
     b98:	00000c75 	.word	0x00000c75
     b9c:	00000c9b 	.word	0x00000c9b
     ba0:	00000a87 	.word	0x00000a87
     ba4:	00000a87 	.word	0x00000a87
     ba8:	00000bc1 	.word	0x00000bc1
     bac:	00000a87 	.word	0x00000a87
     bb0:	00000c75 	.word	0x00000c75
     bb4:	00000a87 	.word	0x00000a87
     bb8:	00000a87 	.word	0x00000a87
     bbc:	00000c75 	.word	0x00000c75
			if (precision >= 0) {
     bc0:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
     bc4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
     bc6:	db35      	blt.n	c34 <__z_interrupt_stack_SIZEOF+0x3f4>
				len = strnlen(bps, precision);
     bc8:	4651      	mov	r1, sl
     bca:	4638      	mov	r0, r7
     bcc:	f003 feee 	bl	49ac <strnlen>
			bpe = bps + len;
     bd0:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
     bd4:	2f00      	cmp	r7, #0
     bd6:	f43f af56 	beq.w	a86 <__z_interrupt_stack_SIZEOF+0x246>
		char sign = 0;
     bda:	2600      	movs	r6, #0
		if (conv->altform_0c) {
     bdc:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     be0:	f013 0210 	ands.w	r2, r3, #16
     be4:	9205      	str	r2, [sp, #20]
     be6:	f000 8093 	beq.w	d10 <__z_interrupt_stack_SIZEOF+0x4d0>
			nj_len += 2U;
     bea:	3002      	adds	r0, #2
		if (conv->pad_fp) {
     bec:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
     bee:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
     bf0:	bf48      	it	mi
     bf2:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
     bf4:	9204      	str	r2, [sp, #16]
     bf6:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
     bf8:	bf48      	it	mi
     bfa:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
     bfc:	f1b8 0f00 	cmp.w	r8, #0
     c00:	f340 80a0 	ble.w	d44 <__z_interrupt_stack_SIZEOF+0x504>
			if (!conv->flag_dash) {
     c04:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
     c08:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
     c0c:	f3c2 0380 	ubfx	r3, r2, #2, #1
     c10:	0750      	lsls	r0, r2, #29
     c12:	9306      	str	r3, [sp, #24]
     c14:	f100 8096 	bmi.w	d44 <__z_interrupt_stack_SIZEOF+0x504>
				if (conv->flag_zero) {
     c18:	0651      	lsls	r1, r2, #25
     c1a:	f140 8089 	bpl.w	d30 <__z_interrupt_stack_SIZEOF+0x4f0>
					if (sign != 0) {
     c1e:	b13e      	cbz	r6, c30 <__z_interrupt_stack_SIZEOF+0x3f0>
						OUTC(sign);
     c20:	4659      	mov	r1, fp
     c22:	4630      	mov	r0, r6
     c24:	47c8      	blx	r9
     c26:	2800      	cmp	r0, #0
     c28:	db7f      	blt.n	d2a <__z_interrupt_stack_SIZEOF+0x4ea>
     c2a:	9b06      	ldr	r3, [sp, #24]
     c2c:	3501      	adds	r5, #1
     c2e:	461e      	mov	r6, r3
					pad = '0';
     c30:	2230      	movs	r2, #48	; 0x30
     c32:	e07e      	b.n	d32 <__z_interrupt_stack_SIZEOF+0x4f2>
				len = strlen(bps);
     c34:	4638      	mov	r0, r7
     c36:	f003 feb2 	bl	499e <strlen>
     c3a:	e7c9      	b.n	bd0 <__z_interrupt_stack_SIZEOF+0x390>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     c3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
     c3e:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
     c42:	2600      	movs	r6, #0
			bps = buf;
     c44:	af08      	add	r7, sp, #32
			bpe = buf + 1;
     c46:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
     c4a:	2001      	movs	r0, #1
     c4c:	e7c6      	b.n	bdc <__z_interrupt_stack_SIZEOF+0x39c>
			if (conv->flag_plus) {
     c4e:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
     c50:	bf5c      	itt	pl
     c52:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
     c56:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
     c58:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
     c5c:	bf48      	it	mi
     c5e:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
     c60:	2b00      	cmp	r3, #0
     c62:	f6bf af62 	bge.w	b2a <__z_interrupt_stack_SIZEOF+0x2ea>
				value->uint = (uint_value_type)-sint;
     c66:	4252      	negs	r2, r2
     c68:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     c6c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
     c70:	262d      	movs	r6, #45	; 0x2d
     c72:	e75a      	b.n	b2a <__z_interrupt_stack_SIZEOF+0x2ea>
		switch (conv->specifier) {
     c74:	2600      	movs	r6, #0
     c76:	e758      	b.n	b2a <__z_interrupt_stack_SIZEOF+0x2ea>
		char sign = 0;
     c78:	2600      	movs	r6, #0
				conv->flag_zero = false;
     c7a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
     c7e:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     c82:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
     c84:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     c88:	459a      	cmp	sl, r3
				conv->flag_zero = false;
     c8a:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
     c8e:	f67f af5a 	bls.w	b46 <__z_interrupt_stack_SIZEOF+0x306>
					conv->pad0_value = precision - (int)len;
     c92:	ebaa 0303 	sub.w	r3, sl, r3
     c96:	9311      	str	r3, [sp, #68]	; 0x44
     c98:	e755      	b.n	b46 <__z_interrupt_stack_SIZEOF+0x306>
			if (value->ptr != NULL) {
     c9a:	980e      	ldr	r0, [sp, #56]	; 0x38
     c9c:	b390      	cbz	r0, d04 <__z_interrupt_stack_SIZEOF+0x4c4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     c9e:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     ca2:	9300      	str	r3, [sp, #0]
     ca4:	aa10      	add	r2, sp, #64	; 0x40
     ca6:	ab08      	add	r3, sp, #32
     ca8:	2100      	movs	r1, #0
     caa:	f003 fe09 	bl	48c0 <encode_uint>
				conv->altform_0c = true;
     cae:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
     cb2:	f003 03ef 	and.w	r3, r3, #239	; 0xef
     cb6:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
     cba:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
     cbe:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
     cc2:	4607      	mov	r7, r0
				conv->altform_0c = true;
     cc4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
     cc8:	dad6      	bge.n	c78 <__z_interrupt_stack_SIZEOF+0x438>
		if (bps == NULL) {
     cca:	2800      	cmp	r0, #0
     ccc:	f43f aedb 	beq.w	a86 <__z_interrupt_stack_SIZEOF+0x246>
		size_t nj_len = (bpe - bps);
     cd0:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     cd4:	1a18      	subs	r0, r3, r0
		char sign = 0;
     cd6:	2600      	movs	r6, #0
     cd8:	469a      	mov	sl, r3
     cda:	e77f      	b.n	bdc <__z_interrupt_stack_SIZEOF+0x39c>
				store_count(conv, value->ptr, count);
     cdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
     cde:	2907      	cmp	r1, #7
     ce0:	f63f aed1 	bhi.w	a86 <__z_interrupt_stack_SIZEOF+0x246>
     ce4:	e8df f001 	tbb	[pc, r1]
     ce8:	0c06040c 	.word	0x0c06040c
     cec:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
     cf0:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
     cf2:	e6c8      	b.n	a86 <__z_interrupt_stack_SIZEOF+0x246>
		*(short *)dp = (short)count;
     cf4:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
     cf6:	e6c6      	b.n	a86 <__z_interrupt_stack_SIZEOF+0x246>
		*(intmax_t *)dp = (intmax_t)count;
     cf8:	17ea      	asrs	r2, r5, #31
     cfa:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
     cfe:	e6c2      	b.n	a86 <__z_interrupt_stack_SIZEOF+0x246>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     d00:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
     d02:	e6c0      	b.n	a86 <__z_interrupt_stack_SIZEOF+0x246>
     d04:	4f2e      	ldr	r7, [pc, #184]	; (dc0 <__z_interrupt_stack_SIZEOF+0x580>)
		char sign = 0;
     d06:	4606      	mov	r6, r0
			bpe = bps + 5;
     d08:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
     d0c:	2005      	movs	r0, #5
     d0e:	e765      	b.n	bdc <__z_interrupt_stack_SIZEOF+0x39c>
		} else if (conv->altform_0) {
     d10:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
     d12:	bf48      	it	mi
     d14:	3001      	addmi	r0, #1
     d16:	e769      	b.n	bec <__z_interrupt_stack_SIZEOF+0x3ac>
     d18:	9307      	str	r3, [sp, #28]
					OUTC(pad);
     d1a:	4610      	mov	r0, r2
     d1c:	9206      	str	r2, [sp, #24]
     d1e:	4659      	mov	r1, fp
     d20:	47c8      	blx	r9
     d22:	2800      	cmp	r0, #0
     d24:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
     d28:	da04      	bge.n	d34 <__z_interrupt_stack_SIZEOF+0x4f4>
#undef OUTS
#undef OUTC
}
     d2a:	b015      	add	sp, #84	; 0x54
     d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
     d30:	2220      	movs	r2, #32
					pad = '0';
     d32:	4643      	mov	r3, r8
				while (width-- > 0) {
     d34:	4619      	mov	r1, r3
     d36:	2900      	cmp	r1, #0
     d38:	f103 33ff 	add.w	r3, r3, #4294967295
     d3c:	dcec      	bgt.n	d18 <__z_interrupt_stack_SIZEOF+0x4d8>
     d3e:	4445      	add	r5, r8
     d40:	1a6d      	subs	r5, r5, r1
     d42:	4698      	mov	r8, r3
		if (sign != 0) {
     d44:	b12e      	cbz	r6, d52 <__z_interrupt_stack_SIZEOF+0x512>
			OUTC(sign);
     d46:	4659      	mov	r1, fp
     d48:	4630      	mov	r0, r6
     d4a:	47c8      	blx	r9
     d4c:	2800      	cmp	r0, #0
     d4e:	dbec      	blt.n	d2a <__z_interrupt_stack_SIZEOF+0x4ea>
     d50:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
     d52:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     d56:	06da      	lsls	r2, r3, #27
     d58:	d401      	bmi.n	d5e <__z_interrupt_stack_SIZEOF+0x51e>
     d5a:	071b      	lsls	r3, r3, #28
     d5c:	d505      	bpl.n	d6a <__z_interrupt_stack_SIZEOF+0x52a>
				OUTC('0');
     d5e:	4659      	mov	r1, fp
     d60:	2030      	movs	r0, #48	; 0x30
     d62:	47c8      	blx	r9
     d64:	2800      	cmp	r0, #0
     d66:	dbe0      	blt.n	d2a <__z_interrupt_stack_SIZEOF+0x4ea>
     d68:	3501      	adds	r5, #1
			if (conv->altform_0c) {
     d6a:	9b05      	ldr	r3, [sp, #20]
     d6c:	b133      	cbz	r3, d7c <__z_interrupt_stack_SIZEOF+0x53c>
				OUTC(conv->specifier);
     d6e:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
     d72:	4659      	mov	r1, fp
     d74:	47c8      	blx	r9
     d76:	2800      	cmp	r0, #0
     d78:	dbd7      	blt.n	d2a <__z_interrupt_stack_SIZEOF+0x4ea>
     d7a:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
     d7c:	9e04      	ldr	r6, [sp, #16]
     d7e:	442e      	add	r6, r5
     d80:	e005      	b.n	d8e <__z_interrupt_stack_SIZEOF+0x54e>
				OUTC('0');
     d82:	4659      	mov	r1, fp
     d84:	2030      	movs	r0, #48	; 0x30
     d86:	47c8      	blx	r9
     d88:	2800      	cmp	r0, #0
     d8a:	dbce      	blt.n	d2a <__z_interrupt_stack_SIZEOF+0x4ea>
     d8c:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
     d8e:	1b73      	subs	r3, r6, r5
     d90:	2b00      	cmp	r3, #0
     d92:	dcf6      	bgt.n	d82 <__z_interrupt_stack_SIZEOF+0x542>
			OUTS(bps, bpe);
     d94:	4653      	mov	r3, sl
     d96:	463a      	mov	r2, r7
     d98:	4659      	mov	r1, fp
     d9a:	4648      	mov	r0, r9
     d9c:	f003 fdd6 	bl	494c <outs>
     da0:	2800      	cmp	r0, #0
     da2:	dbc2      	blt.n	d2a <__z_interrupt_stack_SIZEOF+0x4ea>
     da4:	4405      	add	r5, r0
		while (width > 0) {
     da6:	44a8      	add	r8, r5
     da8:	eba8 0305 	sub.w	r3, r8, r5
     dac:	2b00      	cmp	r3, #0
     dae:	f77f ae6a 	ble.w	a86 <__z_interrupt_stack_SIZEOF+0x246>
			OUTC(' ');
     db2:	4659      	mov	r1, fp
     db4:	2020      	movs	r0, #32
     db6:	47c8      	blx	r9
     db8:	2800      	cmp	r0, #0
     dba:	dbb6      	blt.n	d2a <__z_interrupt_stack_SIZEOF+0x4ea>
     dbc:	3501      	adds	r5, #1
			--width;
     dbe:	e7f3      	b.n	da8 <__z_interrupt_stack_SIZEOF+0x568>
     dc0:	00005568 	.word	0x00005568

00000dc4 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
     dc4:	f001 bd08 	b.w	27d8 <SystemInit>

00000dc8 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
     dc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     dcc:	4605      	mov	r5, r0
	__asm__ volatile(
     dce:	f04f 0320 	mov.w	r3, #32
     dd2:	f3ef 8611 	mrs	r6, BASEPRI
     dd6:	f383 8812 	msr	BASEPRI_MAX, r3
     dda:	f3bf 8f6f 	isb	sy
	return list->head;
     dde:	4b0e      	ldr	r3, [pc, #56]	; (e18 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
     de0:	4f0e      	ldr	r7, [pc, #56]	; (e1c <pm_state_notify+0x54>)
     de2:	681c      	ldr	r4, [r3, #0]
     de4:	f8df 8038 	ldr.w	r8, [pc, #56]	; e20 <pm_state_notify+0x58>
     de8:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
     dec:	b92c      	cbnz	r4, dfa <pm_state_notify+0x32>
	__asm__ volatile(
     dee:	f386 8811 	msr	BASEPRI, r6
     df2:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
     df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
     dfa:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
     dfe:	2d00      	cmp	r5, #0
     e00:	bf18      	it	ne
     e02:	4613      	movne	r3, r2
		if (callback) {
     e04:	b12b      	cbz	r3, e12 <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
     e06:	f898 2014 	ldrb.w	r2, [r8, #20]
     e0a:	fb09 f202 	mul.w	r2, r9, r2
     e0e:	5cb8      	ldrb	r0, [r7, r2]
     e10:	4798      	blx	r3
	return node->next;
     e12:	6824      	ldr	r4, [r4, #0]
     e14:	e7ea      	b.n	dec <pm_state_notify+0x24>
     e16:	bf00      	nop
     e18:	200002c8 	.word	0x200002c8
     e1c:	200002bc 	.word	0x200002bc
     e20:	200003b4 	.word	0x200003b4

00000e24 <pm_system_resume>:

void pm_system_resume(void)
{
     e24:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
     e26:	4b19      	ldr	r3, [pc, #100]	; (e8c <pm_system_resume+0x68>)
     e28:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
     e2a:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
     e2e:	f004 031f 	and.w	r3, r4, #31
     e32:	2201      	movs	r2, #1
     e34:	409a      	lsls	r2, r3
     e36:	4b16      	ldr	r3, [pc, #88]	; (e90 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
     e38:	0961      	lsrs	r1, r4, #5
     e3a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
     e3e:	43d0      	mvns	r0, r2
     e40:	e853 1f00 	ldrex	r1, [r3]
     e44:	ea01 0500 	and.w	r5, r1, r0
     e48:	e843 5600 	strex	r6, r5, [r3]
     e4c:	2e00      	cmp	r6, #0
     e4e:	d1f7      	bne.n	e40 <pm_system_resume+0x1c>
     e50:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
     e54:	420a      	tst	r2, r1
     e56:	d013      	beq.n	e80 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
     e58:	4b0e      	ldr	r3, [pc, #56]	; (e94 <pm_system_resume+0x70>)
     e5a:	4d0f      	ldr	r5, [pc, #60]	; (e98 <pm_system_resume+0x74>)
     e5c:	b18b      	cbz	r3, e82 <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
     e5e:	230c      	movs	r3, #12
     e60:	4363      	muls	r3, r4
     e62:	18ea      	adds	r2, r5, r3
     e64:	5ce8      	ldrb	r0, [r5, r3]
     e66:	7851      	ldrb	r1, [r2, #1]
     e68:	f003 fddf 	bl	4a2a <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
     e6c:	2000      	movs	r0, #0
     e6e:	f7ff ffab 	bl	dc8 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
     e72:	230c      	movs	r3, #12
     e74:	435c      	muls	r4, r3
     e76:	192a      	adds	r2, r5, r4
     e78:	2300      	movs	r3, #0
     e7a:	512b      	str	r3, [r5, r4]
     e7c:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
     e80:	bd70      	pop	{r4, r5, r6, pc}
     e82:	f383 8811 	msr	BASEPRI, r3
     e86:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
     e8a:	e7ef      	b.n	e6c <pm_system_resume+0x48>
     e8c:	200003b4 	.word	0x200003b4
     e90:	200002d0 	.word	0x200002d0
     e94:	00004a2b 	.word	0x00004a2b
     e98:	200002bc 	.word	0x200002bc

00000e9c <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
     e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
     ea0:	4b35      	ldr	r3, [pc, #212]	; (f78 <pm_system_suspend+0xdc>)
{
     ea2:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
     ea4:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
     ea6:	f04f 0320 	mov.w	r3, #32
     eaa:	f3ef 8811 	mrs	r8, BASEPRI
     eae:	f383 8812 	msr	BASEPRI_MAX, r3
     eb2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
     eb6:	240c      	movs	r4, #12
     eb8:	4b30      	ldr	r3, [pc, #192]	; (f7c <pm_system_suspend+0xe0>)
     eba:	4e31      	ldr	r6, [pc, #196]	; (f80 <pm_system_suspend+0xe4>)
     ebc:	436c      	muls	r4, r5
     ebe:	191a      	adds	r2, r3, r4
     ec0:	5d19      	ldrb	r1, [r3, r4]
     ec2:	2900      	cmp	r1, #0
     ec4:	d04c      	beq.n	f60 <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
     ec6:	ca07      	ldmia	r2, {r0, r1, r2}
     ec8:	eb06 0c04 	add.w	ip, r6, r4
     ecc:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
     ed0:	2200      	movs	r2, #0
     ed2:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
     ed4:	f388 8811 	msr	BASEPRI, r8
     ed8:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
     edc:	230c      	movs	r3, #12
     ede:	436b      	muls	r3, r5
     ee0:	18f2      	adds	r2, r6, r3
     ee2:	5cf0      	ldrb	r0, [r6, r3]
     ee4:	2800      	cmp	r0, #0
     ee6:	d039      	beq.n	f5c <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
     ee8:	1c7b      	adds	r3, r7, #1
     eea:	d010      	beq.n	f0e <pm_system_suspend+0x72>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
     eec:	f8d2 c008 	ldr.w	ip, [r2, #8]
     ef0:	4c24      	ldr	r4, [pc, #144]	; (f84 <pm_system_suspend+0xe8>)
     ef2:	4a25      	ldr	r2, [pc, #148]	; (f88 <pm_system_suspend+0xec>)
     ef4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     ef8:	2100      	movs	r1, #0
     efa:	fbec 4100 	umlal	r4, r1, ip, r0
     efe:	2300      	movs	r3, #0
     f00:	4620      	mov	r0, r4
     f02:	f7ff f8d9 	bl	b8 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
     f06:	2101      	movs	r1, #1
     f08:	1a38      	subs	r0, r7, r0
     f0a:	f004 f97e 	bl	520a <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
     f0e:	f003 f83b 	bl	3f88 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
     f12:	2001      	movs	r0, #1
     f14:	f7ff ff58 	bl	dc8 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
     f18:	f3bf 8f5b 	dmb	ish
     f1c:	4b1b      	ldr	r3, [pc, #108]	; (f8c <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
     f1e:	096a      	lsrs	r2, r5, #5
     f20:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
     f24:	f005 011f 	and.w	r1, r5, #31
     f28:	2201      	movs	r2, #1
     f2a:	408a      	lsls	r2, r1
     f2c:	e853 0f00 	ldrex	r0, [r3]
     f30:	4310      	orrs	r0, r2
     f32:	e843 0100 	strex	r1, r0, [r3]
     f36:	2900      	cmp	r1, #0
     f38:	d1f8      	bne.n	f2c <pm_system_suspend+0x90>
     f3a:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
     f3e:	4b14      	ldr	r3, [pc, #80]	; (f90 <pm_system_suspend+0xf4>)
     f40:	b13b      	cbz	r3, f52 <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
     f42:	230c      	movs	r3, #12
     f44:	fb03 f005 	mul.w	r0, r3, r5
     f48:	1833      	adds	r3, r6, r0
     f4a:	5c30      	ldrb	r0, [r6, r0]
     f4c:	7859      	ldrb	r1, [r3, #1]
     f4e:	f003 fd60 	bl	4a12 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
     f52:	f7ff ff67 	bl	e24 <pm_system_resume>
	k_sched_unlock();
     f56:	f003 f82b 	bl	3fb0 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
     f5a:	2001      	movs	r0, #1
}
     f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
     f60:	4601      	mov	r1, r0
     f62:	4628      	mov	r0, r5
     f64:	f000 f816 	bl	f94 <pm_policy_next_state>
		if (info != NULL) {
     f68:	2800      	cmp	r0, #0
     f6a:	d0b3      	beq.n	ed4 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
     f6c:	c807      	ldmia	r0, {r0, r1, r2}
     f6e:	4434      	add	r4, r6
     f70:	e884 0007 	stmia.w	r4, {r0, r1, r2}
     f74:	e7ae      	b.n	ed4 <pm_system_suspend+0x38>
     f76:	bf00      	nop
     f78:	200003b4 	.word	0x200003b4
     f7c:	200002b0 	.word	0x200002b0
     f80:	200002bc 	.word	0x200002bc
     f84:	000f423f 	.word	0x000f423f
     f88:	000f4240 	.word	0x000f4240
     f8c:	200002d0 	.word	0x200002d0
     f90:	00004a13 	.word	0x00004a13

00000f94 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
     f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f98:	b085      	sub	sp, #20
     f9a:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
     f9c:	a903      	add	r1, sp, #12
     f9e:	f000 f843 	bl	1028 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
     fa2:	4b1e      	ldr	r3, [pc, #120]	; (101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>)
     fa4:	9d03      	ldr	r5, [sp, #12]
     fa6:	f8d3 a000 	ldr.w	sl, [r3]
     faa:	f8df 8074 	ldr.w	r8, [pc, #116]	; 1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
     fae:	1e43      	subs	r3, r0, #1
     fb0:	b21b      	sxth	r3, r3
     fb2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
     fb6:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
     fb8:	eb05 0583 	add.w	r5, r5, r3, lsl #2
     fbc:	f44f 4700 	mov.w	r7, #32768	; 0x8000
     fc0:	f04f 0b00 	mov.w	fp, #0
     fc4:	b924      	cbnz	r4, fd0 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x30>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
     fc6:	46a1      	mov	r9, r4
}
     fc8:	4648      	mov	r0, r9
     fca:	b005      	add	sp, #20
     fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     fd0:	6868      	ldr	r0, [r5, #4]
     fd2:	4a14      	ldr	r2, [pc, #80]	; (1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>)
     fd4:	46c4      	mov	ip, r8
     fd6:	4659      	mov	r1, fp
     fd8:	fbe0 c107 	umlal	ip, r1, r0, r7
     fdc:	2300      	movs	r3, #0
     fde:	4660      	mov	r0, ip
     fe0:	f7ff f86a 	bl	b8 <__aeabi_uldivmod>
     fe4:	9001      	str	r0, [sp, #4]
     fe6:	68a8      	ldr	r0, [r5, #8]
     fe8:	4a0e      	ldr	r2, [pc, #56]	; (1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>)
     fea:	46c4      	mov	ip, r8
     fec:	4659      	mov	r1, fp
     fee:	fbe0 c107 	umlal	ip, r1, r0, r7
     ff2:	2300      	movs	r3, #0
     ff4:	4660      	mov	r0, ip
     ff6:	f7ff f85f 	bl	b8 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
     ffa:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
     ffe:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    1000:	d001      	beq.n	1006 <CONFIG_FPROTECT_BLOCK_SIZE+0x6>
    1002:	4582      	cmp	sl, r0
    1004:	d905      	bls.n	1012 <CONFIG_FPROTECT_BLOCK_SIZE+0x12>
		if ((ticks == K_TICKS_FOREVER) ||
    1006:	1c73      	adds	r3, r6, #1
    1008:	d0de      	beq.n	fc8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x28>
		    (ticks >= (min_residency + exit_latency))) {
    100a:	9b01      	ldr	r3, [sp, #4]
    100c:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    100e:	42b0      	cmp	r0, r6
    1010:	d9da      	bls.n	fc8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x28>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1012:	3c01      	subs	r4, #1
    1014:	b2a4      	uxth	r4, r4
    1016:	3d0c      	subs	r5, #12
    1018:	e7d4      	b.n	fc4 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x24>
    101a:	bf00      	nop
    101c:	20000004 	.word	0x20000004
    1020:	000f423f 	.word	0x000f423f
    1024:	000f4240 	.word	0x000f4240

00001028 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    1028:	b908      	cbnz	r0, 102e <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    102a:	4b02      	ldr	r3, [pc, #8]	; (1034 <pm_state_cpu_get_all+0xc>)
    102c:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    102e:	2000      	movs	r0, #0
    1030:	4770      	bx	lr
    1032:	bf00      	nop
    1034:	00005458 	.word	0x00005458

00001038 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1038:	4901      	ldr	r1, [pc, #4]	; (1040 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    103a:	2210      	movs	r2, #16
	str	r2, [r1]
    103c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    103e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1040:	e000ed10 	.word	0xe000ed10

00001044 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1044:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1046:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1048:	f380 8811 	msr	BASEPRI, r0
	isb
    104c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1050:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1054:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1056:	b662      	cpsie	i
	isb
    1058:	f3bf 8f6f 	isb	sy

	bx	lr
    105c:	4770      	bx	lr
    105e:	bf00      	nop

00001060 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1060:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    1062:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1064:	f381 8811 	msr	BASEPRI, r1

	wfe
    1068:	bf20      	wfe

	msr	BASEPRI, r0
    106a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    106e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1070:	4770      	bx	lr
    1072:	bf00      	nop

00001074 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1074:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1076:	2800      	cmp	r0, #0
    1078:	db07      	blt.n	108a <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    107a:	4a04      	ldr	r2, [pc, #16]	; (108c <arch_irq_enable+0x18>)
    107c:	0941      	lsrs	r1, r0, #5
    107e:	2301      	movs	r3, #1
    1080:	f000 001f 	and.w	r0, r0, #31
    1084:	4083      	lsls	r3, r0
    1086:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    108a:	4770      	bx	lr
    108c:	e000e100 	.word	0xe000e100

00001090 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1090:	4b05      	ldr	r3, [pc, #20]	; (10a8 <arch_irq_is_enabled+0x18>)
    1092:	0942      	lsrs	r2, r0, #5
    1094:	f000 001f 	and.w	r0, r0, #31
    1098:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    109c:	2301      	movs	r3, #1
    109e:	fa03 f000 	lsl.w	r0, r3, r0
}
    10a2:	4010      	ands	r0, r2
    10a4:	4770      	bx	lr
    10a6:	bf00      	nop
    10a8:	e000e100 	.word	0xe000e100

000010ac <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    10ac:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    10ae:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    10b0:	bfa8      	it	ge
    10b2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    10b6:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    10ba:	bfb8      	it	lt
    10bc:	4b06      	ldrlt	r3, [pc, #24]	; (10d8 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    10be:	ea4f 1141 	mov.w	r1, r1, lsl #5
    10c2:	bfac      	ite	ge
    10c4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    10c8:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    10cc:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    10ce:	bfb4      	ite	lt
    10d0:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    10d2:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
    10d6:	4770      	bx	lr
    10d8:	e000ed14 	.word	0xe000ed14

000010dc <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    10dc:	bf30      	wfi
    b z_SysNmiOnReset
    10de:	f7ff bffd 	b.w	10dc <z_SysNmiOnReset>
    10e2:	bf00      	nop

000010e4 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    10e4:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    10e6:	4b08      	ldr	r3, [pc, #32]	; (1108 <z_arm_prep_c+0x24>)
    10e8:	4a08      	ldr	r2, [pc, #32]	; (110c <z_arm_prep_c+0x28>)
    10ea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    10ee:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    10f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    10f4:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    10f8:	f002 f984 	bl	3404 <z_bss_zero>
	z_data_copy();
    10fc:	f003 f894 	bl	4228 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1100:	f000 f9c8 	bl	1494 <z_arm_interrupt_init>
	z_cstart();
    1104:	f002 f9c2 	bl	348c <z_cstart>
    1108:	00000000 	.word	0x00000000
    110c:	e000ed00 	.word	0xe000ed00

00001110 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1110:	4a09      	ldr	r2, [pc, #36]	; (1138 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1112:	490a      	ldr	r1, [pc, #40]	; (113c <arch_swap+0x2c>)
	_current->arch.basepri = key;
    1114:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1116:	6809      	ldr	r1, [r1, #0]
    1118:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    111a:	4909      	ldr	r1, [pc, #36]	; (1140 <arch_swap+0x30>)
	_current->arch.basepri = key;
    111c:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    111e:	684b      	ldr	r3, [r1, #4]
    1120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1124:	604b      	str	r3, [r1, #4]
    1126:	2300      	movs	r3, #0
    1128:	f383 8811 	msr	BASEPRI, r3
    112c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1130:	6893      	ldr	r3, [r2, #8]
}
    1132:	6f98      	ldr	r0, [r3, #120]	; 0x78
    1134:	4770      	bx	lr
    1136:	bf00      	nop
    1138:	200003b4 	.word	0x200003b4
    113c:	0000554c 	.word	0x0000554c
    1140:	e000ed00 	.word	0xe000ed00

00001144 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1144:	4912      	ldr	r1, [pc, #72]	; (1190 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1146:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1148:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    114c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    114e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1152:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1156:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    1158:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    115c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1160:	4f0c      	ldr	r7, [pc, #48]	; (1194 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1162:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    1166:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    1168:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    116a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    116c:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    116e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1170:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1172:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    1176:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    1178:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    117a:	f000 fa27 	bl	15cc <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    117e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1182:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    1186:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    118a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    118e:	4770      	bx	lr
    ldr r1, =_kernel
    1190:	200003b4 	.word	0x200003b4
    ldr v4, =_SCS_ICSR
    1194:	e000ed04 	.word	0xe000ed04

00001198 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    1198:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    119c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    119e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    11a2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    11a6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    11a8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    11ac:	2902      	cmp	r1, #2
    beq _oops
    11ae:	d0ff      	beq.n	11b0 <_oops>

000011b0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    11b0:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    11b2:	f003 fbe5 	bl	4980 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    11b6:	bd01      	pop	{r0, pc}

000011b8 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    11b8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    11bc:	9b00      	ldr	r3, [sp, #0]
    11be:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    11c2:	490a      	ldr	r1, [pc, #40]	; (11ec <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    11c4:	9b01      	ldr	r3, [sp, #4]
    11c6:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    11ca:	9b02      	ldr	r3, [sp, #8]
    11cc:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    11d0:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    11d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    11d8:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    11dc:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    11e0:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    11e2:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    11e4:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    11e6:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    11e8:	4770      	bx	lr
    11ea:	bf00      	nop
    11ec:	000046b1 	.word	0x000046b1

000011f0 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    11f0:	4a09      	ldr	r2, [pc, #36]	; (1218 <z_check_thread_stack_fail+0x28>)
{
    11f2:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    11f4:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    11f6:	b170      	cbz	r0, 1216 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    11f8:	f113 0f16 	cmn.w	r3, #22
    11fc:	6e40      	ldr	r0, [r0, #100]	; 0x64
    11fe:	d005      	beq.n	120c <z_check_thread_stack_fail+0x1c>
    1200:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
    1204:	429a      	cmp	r2, r3
    1206:	d805      	bhi.n	1214 <z_check_thread_stack_fail+0x24>
    1208:	4283      	cmp	r3, r0
    120a:	d203      	bcs.n	1214 <z_check_thread_stack_fail+0x24>
		return 0;
    120c:	4281      	cmp	r1, r0
    120e:	bf28      	it	cs
    1210:	2000      	movcs	r0, #0
    1212:	4770      	bx	lr
    1214:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
    1216:	4770      	bx	lr
    1218:	200003b4 	.word	0x200003b4

0000121c <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    121c:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    121e:	4b09      	ldr	r3, [pc, #36]	; (1244 <arch_switch_to_main_thread+0x28>)
    1220:	6098      	str	r0, [r3, #8]
{
    1222:	460d      	mov	r5, r1
    1224:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    1226:	f000 f9d1 	bl	15cc <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    122a:	4620      	mov	r0, r4
    122c:	f385 8809 	msr	PSP, r5
    1230:	2100      	movs	r1, #0
    1232:	b663      	cpsie	if
    1234:	f381 8811 	msr	BASEPRI, r1
    1238:	f3bf 8f6f 	isb	sy
    123c:	2200      	movs	r2, #0
    123e:	2300      	movs	r3, #0
    1240:	f003 fa36 	bl	46b0 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1244:	200003b4 	.word	0x200003b4

00001248 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1248:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    124a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    124c:	4a0b      	ldr	r2, [pc, #44]	; (127c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    124e:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    1250:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1252:	bf1e      	ittt	ne
	movne	r1, #0
    1254:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1256:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    1258:	f003 fe70 	blne	4f3c <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    125c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    125e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1262:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1266:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    126a:	4905      	ldr	r1, [pc, #20]	; (1280 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    126c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    126e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1270:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1272:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1276:	4903      	ldr	r1, [pc, #12]	; (1284 <_isr_wrapper+0x3c>)
	bx r1
    1278:	4708      	bx	r1
    127a:	0000      	.short	0x0000
	ldr r2, =_kernel
    127c:	200003b4 	.word	0x200003b4
	ldr r1, =_sw_isr_table
    1280:	0000533c 	.word	0x0000533c
	ldr r1, =z_arm_int_exit
    1284:	00001289 	.word	0x00001289

00001288 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1288:	4b04      	ldr	r3, [pc, #16]	; (129c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    128a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    128c:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    128e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1290:	d003      	beq.n	129a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    1292:	4903      	ldr	r1, [pc, #12]	; (12a0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1294:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1298:	600a      	str	r2, [r1, #0]

0000129a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    129a:	4770      	bx	lr
	ldr r3, =_kernel
    129c:	200003b4 	.word	0x200003b4
	ldr r1, =_SCS_ICSR
    12a0:	e000ed04 	.word	0xe000ed04

000012a4 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    12a4:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    12a6:	4b18      	ldr	r3, [pc, #96]	; (1308 <mem_manage_fault+0x64>)
{
    12a8:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    12aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    12ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    12ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    12b0:	0792      	lsls	r2, r2, #30
{
    12b2:	4606      	mov	r6, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    12b4:	d519      	bpl.n	12ea <mem_manage_fault+0x46>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    12b6:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    12b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    12ba:	0615      	lsls	r5, r2, #24
    12bc:	d515      	bpl.n	12ea <mem_manage_fault+0x46>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    12be:	b119      	cbz	r1, 12c8 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    12c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    12c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    12c6:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    12c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    12ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    12cc:	4d0e      	ldr	r5, [pc, #56]	; (1308 <mem_manage_fault+0x64>)
    12ce:	f012 0f10 	tst.w	r2, #16
    12d2:	d10d      	bne.n	12f0 <mem_manage_fault+0x4c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    12d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    12d6:	079a      	lsls	r2, r3, #30
    12d8:	d40a      	bmi.n	12f0 <mem_manage_fault+0x4c>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    12da:	2000      	movs	r0, #0
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    12dc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    12de:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    12e2:	62ab      	str	r3, [r5, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    12e4:	2300      	movs	r3, #0
    12e6:	7023      	strb	r3, [r4, #0]

	return reason;
}
    12e8:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    12ea:	f06f 0015 	mvn.w	r0, #21
    12ee:	e7eb      	b.n	12c8 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    12f0:	686b      	ldr	r3, [r5, #4]
    12f2:	051b      	lsls	r3, r3, #20
    12f4:	d5f1      	bpl.n	12da <mem_manage_fault+0x36>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    12f6:	4631      	mov	r1, r6
    12f8:	f7ff ff7a 	bl	11f0 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    12fc:	2800      	cmp	r0, #0
    12fe:	d0ec      	beq.n	12da <mem_manage_fault+0x36>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    1300:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    1304:	2002      	movs	r0, #2
    1306:	e7e9      	b.n	12dc <mem_manage_fault+0x38>
    1308:	e000ed00 	.word	0xe000ed00

0000130c <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    130c:	4b0b      	ldr	r3, [pc, #44]	; (133c <bus_fault.constprop.0+0x30>)
    130e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1310:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1312:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1314:	0592      	lsls	r2, r2, #22
    1316:	d508      	bpl.n	132a <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    1318:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    131a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    131c:	0412      	lsls	r2, r2, #16
    131e:	d504      	bpl.n	132a <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    1320:	b118      	cbz	r0, 132a <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1322:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1324:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1328:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    132a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    132c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    132e:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    1330:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1332:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    1336:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1338:	7008      	strb	r0, [r1, #0]

	return reason;
}
    133a:	4770      	bx	lr
    133c:	e000ed00 	.word	0xe000ed00

00001340 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1340:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1342:	4b4a      	ldr	r3, [pc, #296]	; (146c <z_arm_fault+0x12c>)
    1344:	685b      	ldr	r3, [r3, #4]
{
    1346:	b08a      	sub	sp, #40	; 0x28
    1348:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    134a:	f3c3 0308 	ubfx	r3, r3, #0, #9
    134e:	2600      	movs	r6, #0
    1350:	f386 8811 	msr	BASEPRI, r6
    1354:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1358:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    135c:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    1360:	d111      	bne.n	1386 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    1362:	f002 000c 	and.w	r0, r2, #12
    1366:	2808      	cmp	r0, #8
    1368:	d00d      	beq.n	1386 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    136a:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    136c:	bf4c      	ite	mi
    136e:	460d      	movmi	r5, r1
			*nested_exc = true;
    1370:	2601      	movpl	r6, #1
	*recoverable = false;
    1372:	2200      	movs	r2, #0
	switch (fault) {
    1374:	3b03      	subs	r3, #3
	*recoverable = false;
    1376:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    137a:	2b03      	cmp	r3, #3
    137c:	d84d      	bhi.n	141a <z_arm_fault+0xda>
    137e:	e8df f003 	tbb	[pc, r3]
    1382:	6504      	.short	0x6504
    1384:	6d69      	.short	0x6d69
		return NULL;
    1386:	4635      	mov	r5, r6
    1388:	e7f3      	b.n	1372 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    138a:	4b38      	ldr	r3, [pc, #224]	; (146c <z_arm_fault+0x12c>)
    138c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    138e:	0791      	lsls	r1, r2, #30
    1390:	d443      	bmi.n	141a <z_arm_fault+0xda>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    1392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1394:	2a00      	cmp	r2, #0
    1396:	db40      	blt.n	141a <z_arm_fault+0xda>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    139a:	0052      	lsls	r2, r2, #1
    139c:	d53d      	bpl.n	141a <z_arm_fault+0xda>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    139e:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    13a0:	69a9      	ldr	r1, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    13a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    13a6:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    13a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    13ac:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    13b0:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    13b2:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    13b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    13ba:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    13bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    13c0:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    13c4:	f64d 7202 	movw	r2, #57090	; 0xdf02
    13c8:	4291      	cmp	r1, r2
    13ca:	d009      	beq.n	13e0 <z_arm_fault+0xa0>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    13cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    13ce:	b2d2      	uxtb	r2, r2
    13d0:	b142      	cbz	r2, 13e4 <z_arm_fault+0xa4>
			reason = mem_manage_fault(esf, 1, recoverable);
    13d2:	f10d 0207 	add.w	r2, sp, #7
    13d6:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    13d8:	4628      	mov	r0, r5
    13da:	f7ff ff63 	bl	12a4 <mem_manage_fault>
    13de:	e00a      	b.n	13f6 <z_arm_fault+0xb6>
			reason = esf->basic.r0;
    13e0:	682c      	ldr	r4, [r5, #0]
    13e2:	e01b      	b.n	141c <z_arm_fault+0xdc>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    13e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    13e6:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    13ea:	d006      	beq.n	13fa <z_arm_fault+0xba>
			reason = bus_fault(esf, 1, recoverable);
    13ec:	f10d 0107 	add.w	r1, sp, #7
    13f0:	2001      	movs	r0, #1
    13f2:	f7ff ff8b 	bl	130c <bus_fault.constprop.0>
    13f6:	4604      	mov	r4, r0
    13f8:	e010      	b.n	141c <z_arm_fault+0xdc>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    13fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    13fc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    1400:	d30b      	bcc.n	141a <z_arm_fault+0xda>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1402:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1404:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1406:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1408:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    140a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    140c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    140e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1410:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1414:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1418:	629a      	str	r2, [r3, #40]	; 0x28
		return NULL;
    141a:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    141c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1420:	b993      	cbnz	r3, 1448 <z_arm_fault+0x108>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1422:	2220      	movs	r2, #32
    1424:	4629      	mov	r1, r5
    1426:	a802      	add	r0, sp, #8
    1428:	f003 fac9 	bl	49be <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    142c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    142e:	b1be      	cbz	r6, 1460 <z_arm_fault+0x120>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1430:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1434:	b922      	cbnz	r2, 1440 <z_arm_fault+0x100>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1436:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    143a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    143e:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    1440:	a902      	add	r1, sp, #8
    1442:	4620      	mov	r0, r4
    1444:	f003 fa9a 	bl	497c <z_arm_fatal_error>
}
    1448:	b00a      	add	sp, #40	; 0x28
    144a:	bd70      	pop	{r4, r5, r6, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    144c:	f10d 0207 	add.w	r2, sp, #7
    1450:	2100      	movs	r1, #0
    1452:	e7c1      	b.n	13d8 <z_arm_fault+0x98>
		reason = bus_fault(esf, 0, recoverable);
    1454:	f10d 0107 	add.w	r1, sp, #7
    1458:	2000      	movs	r0, #0
    145a:	e7ca      	b.n	13f2 <z_arm_fault+0xb2>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    145c:	4b03      	ldr	r3, [pc, #12]	; (146c <z_arm_fault+0x12c>)
    145e:	e7d0      	b.n	1402 <z_arm_fault+0xc2>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1460:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1464:	f023 0301 	bic.w	r3, r3, #1
    1468:	e7e9      	b.n	143e <z_arm_fault+0xfe>
    146a:	bf00      	nop
    146c:	e000ed00 	.word	0xe000ed00

00001470 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1470:	4a02      	ldr	r2, [pc, #8]	; (147c <z_arm_fault_init+0xc>)
    1472:	6953      	ldr	r3, [r2, #20]
    1474:	f043 0310 	orr.w	r3, r3, #16
    1478:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    147a:	4770      	bx	lr
    147c:	e000ed00 	.word	0xe000ed00

00001480 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1480:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1484:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1488:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    148a:	4672      	mov	r2, lr
	bl z_arm_fault
    148c:	f7ff ff58 	bl	1340 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1490:	bd01      	pop	{r0, pc}
    1492:	bf00      	nop

00001494 <z_arm_interrupt_init>:
    1494:	4804      	ldr	r0, [pc, #16]	; (14a8 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1496:	2300      	movs	r3, #0
    1498:	2120      	movs	r1, #32
    149a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    149c:	3301      	adds	r3, #1
    149e:	2b1e      	cmp	r3, #30
    14a0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    14a4:	d1f9      	bne.n	149a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    14a6:	4770      	bx	lr
    14a8:	e000e100 	.word	0xe000e100

000014ac <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    14ac:	2000      	movs	r0, #0
    msr CONTROL, r0
    14ae:	f380 8814 	msr	CONTROL, r0
    isb
    14b2:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    14b6:	f7ff fc85 	bl	dc4 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    14ba:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    14bc:	490d      	ldr	r1, [pc, #52]	; (14f4 <__start+0x48>)
    str r0, [r1]
    14be:	6008      	str	r0, [r1, #0]
    dsb
    14c0:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    14c4:	480c      	ldr	r0, [pc, #48]	; (14f8 <__start+0x4c>)
    msr msp, r0
    14c6:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    14ca:	f000 f82b 	bl	1524 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    14ce:	2020      	movs	r0, #32
    msr BASEPRI, r0
    14d0:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    14d4:	4809      	ldr	r0, [pc, #36]	; (14fc <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    14d6:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    14da:	1840      	adds	r0, r0, r1
    msr PSP, r0
    14dc:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    14e0:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    14e4:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    14e6:	4308      	orrs	r0, r1
    msr CONTROL, r0
    14e8:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    14ec:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    14f0:	f7ff fdf8 	bl	10e4 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    14f4:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    14f8:	20001180 	.word	0x20001180
    ldr r0, =z_interrupt_stacks
    14fc:	20000400 	.word	0x20000400

00001500 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    1500:	4907      	ldr	r1, [pc, #28]	; (1520 <z_arm_clear_arm_mpu_config+0x20>)
    1502:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    1506:	2300      	movs	r3, #0
	int num_regions =
    1508:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    150c:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    150e:	4293      	cmp	r3, r2
    1510:	db00      	blt.n	1514 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    1512:	4770      	bx	lr
  MPU->RNR = rnr;
    1514:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    1518:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    151c:	3301      	adds	r3, #1
    151e:	e7f6      	b.n	150e <z_arm_clear_arm_mpu_config+0xe>
    1520:	e000ed00 	.word	0xe000ed00

00001524 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    1524:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    1526:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    1528:	2300      	movs	r3, #0
    152a:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    152e:	f7ff ffe7 	bl	1500 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    1532:	4b14      	ldr	r3, [pc, #80]	; (1584 <z_arm_init_arch_hw_at_boot+0x60>)
    1534:	f04f 32ff 	mov.w	r2, #4294967295
    1538:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    153c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    1540:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    1544:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    1548:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    154c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    1550:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    1554:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1558:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    155c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    1560:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    1564:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    1568:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    156c:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    1570:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    1574:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    1578:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    157a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    157e:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    1582:	bd08      	pop	{r3, pc}
    1584:	e000e100 	.word	0xe000e100

00001588 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    1588:	4b08      	ldr	r3, [pc, #32]	; (15ac <z_impl_k_thread_abort+0x24>)
    158a:	689b      	ldr	r3, [r3, #8]
    158c:	4283      	cmp	r3, r0
    158e:	d10b      	bne.n	15a8 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1590:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1594:	b143      	cbz	r3, 15a8 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1596:	4b06      	ldr	r3, [pc, #24]	; (15b0 <z_impl_k_thread_abort+0x28>)
    1598:	685a      	ldr	r2, [r3, #4]
    159a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    159e:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    15a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    15a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    15a6:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    15a8:	f002 bdcc 	b.w	4144 <z_thread_abort>
    15ac:	200003b4 	.word	0x200003b4
    15b0:	e000ed00 	.word	0xe000ed00

000015b4 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    15b4:	4b02      	ldr	r3, [pc, #8]	; (15c0 <z_arm_configure_static_mpu_regions+0xc>)
    15b6:	4a03      	ldr	r2, [pc, #12]	; (15c4 <z_arm_configure_static_mpu_regions+0x10>)
    15b8:	4803      	ldr	r0, [pc, #12]	; (15c8 <z_arm_configure_static_mpu_regions+0x14>)
    15ba:	2101      	movs	r1, #1
    15bc:	f000 b870 	b.w	16a0 <arm_core_mpu_configure_static_mpu_regions>
    15c0:	20006000 	.word	0x20006000
    15c4:	20000000 	.word	0x20000000
    15c8:	00005458 	.word	0x00005458

000015cc <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    15cc:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    15ce:	4b05      	ldr	r3, [pc, #20]	; (15e4 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    15d0:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
    15d2:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    15d4:	4a04      	ldr	r2, [pc, #16]	; (15e8 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    15d6:	2140      	movs	r1, #64	; 0x40
    15d8:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    15dc:	4618      	mov	r0, r3
    15de:	2101      	movs	r1, #1
    15e0:	f000 b868 	b.w	16b4 <arm_core_mpu_configure_dynamic_mpu_regions>
    15e4:	200002d4 	.word	0x200002d4
    15e8:	150b0000 	.word	0x150b0000

000015ec <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    15ec:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    15ee:	4e20      	ldr	r6, [pc, #128]	; (1670 <mpu_configure_regions+0x84>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    15f0:	2500      	movs	r5, #0
    15f2:	428d      	cmp	r5, r1
    15f4:	da39      	bge.n	166a <mpu_configure_regions+0x7e>
		if (regions[i].size == 0U) {
    15f6:	6844      	ldr	r4, [r0, #4]
    15f8:	b374      	cbz	r4, 1658 <mpu_configure_regions+0x6c>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    15fa:	b153      	cbz	r3, 1612 <mpu_configure_regions+0x26>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    15fc:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    1600:	ea14 0f0c 	tst.w	r4, ip
    1604:	d12f      	bne.n	1666 <mpu_configure_regions+0x7a>
		&&
    1606:	2c1f      	cmp	r4, #31
    1608:	d92d      	bls.n	1666 <mpu_configure_regions+0x7a>
		((part->start & (part->size - 1U)) == 0U);
    160a:	6807      	ldr	r7, [r0, #0]
		&&
    160c:	ea1c 0f07 	tst.w	ip, r7
    1610:	d129      	bne.n	1666 <mpu_configure_regions+0x7a>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    1612:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    1614:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    1616:	f8d0 c008 	ldr.w	ip, [r0, #8]
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    161a:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
    161e:	d91e      	bls.n	165e <mpu_configure_regions+0x72>
	if (size > (1UL << 31)) {
    1620:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    1624:	d81d      	bhi.n	1662 <mpu_configure_regions+0x76>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    1626:	3c01      	subs	r4, #1
    1628:	fab4 f484 	clz	r4, r4
    162c:	f1c4 041f 	rsb	r4, r4, #31
    1630:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    1632:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    1636:	ea4c 0c04 	orr.w	ip, ip, r4
    163a:	d814      	bhi.n	1666 <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    163c:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
    1640:	4314      	orrs	r4, r2
    1642:	f044 0410 	orr.w	r4, r4, #16
    1646:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    164a:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    164e:	f04c 0401 	orr.w	r4, ip, #1
    1652:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		if (reg_index == -EINVAL) {
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    1656:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
    1658:	3501      	adds	r5, #1
    165a:	300c      	adds	r0, #12
    165c:	e7c9      	b.n	15f2 <mpu_configure_regions+0x6>
		return REGION_32B;
    165e:	2408      	movs	r4, #8
    1660:	e7e7      	b.n	1632 <mpu_configure_regions+0x46>
		return REGION_4G;
    1662:	243e      	movs	r4, #62	; 0x3e
    1664:	e7e5      	b.n	1632 <mpu_configure_regions+0x46>
			return -EINVAL;
    1666:	f06f 0215 	mvn.w	r2, #21
	}

	return reg_index;
}
    166a:	4610      	mov	r0, r2
    166c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    166e:	bf00      	nop
    1670:	e000ed00 	.word	0xe000ed00

00001674 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1674:	4b04      	ldr	r3, [pc, #16]	; (1688 <arm_core_mpu_enable+0x14>)
    1676:	2205      	movs	r2, #5
    1678:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    167c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1680:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1684:	4770      	bx	lr
    1686:	bf00      	nop
    1688:	e000ed00 	.word	0xe000ed00

0000168c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    168c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1690:	4b02      	ldr	r3, [pc, #8]	; (169c <arm_core_mpu_disable+0x10>)
    1692:	2200      	movs	r2, #0
    1694:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    1698:	4770      	bx	lr
    169a:	bf00      	nop
    169c:	e000ed00 	.word	0xe000ed00

000016a0 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    16a0:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    16a2:	4c03      	ldr	r4, [pc, #12]	; (16b0 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    16a4:	2301      	movs	r3, #1
    16a6:	7822      	ldrb	r2, [r4, #0]
    16a8:	f7ff ffa0 	bl	15ec <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    16ac:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    16ae:	bd10      	pop	{r4, pc}
    16b0:	200003f6 	.word	0x200003f6

000016b4 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
    16b4:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    16b6:	4a09      	ldr	r2, [pc, #36]	; (16dc <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    16b8:	2300      	movs	r3, #0
    16ba:	7812      	ldrb	r2, [r2, #0]
    16bc:	f7ff ff96 	bl	15ec <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    16c0:	f110 0f16 	cmn.w	r0, #22
    16c4:	d002      	beq.n	16cc <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
  MPU->RNR = rnr;
    16c6:	4a06      	ldr	r2, [pc, #24]	; (16e0 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    16c8:	2807      	cmp	r0, #7
    16ca:	dd00      	ble.n	16ce <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    16cc:	bd08      	pop	{r3, pc}
    16ce:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    16d2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    16d6:	3001      	adds	r0, #1
    16d8:	e7f6      	b.n	16c8 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
    16da:	bf00      	nop
    16dc:	200003f6 	.word	0x200003f6
    16e0:	e000ed00 	.word	0xe000ed00

000016e4 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    16e4:	4914      	ldr	r1, [pc, #80]	; (1738 <z_arm_mpu_init+0x54>)
    16e6:	6808      	ldr	r0, [r1, #0]
    16e8:	2808      	cmp	r0, #8
{
    16ea:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    16ec:	d821      	bhi.n	1732 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    16ee:	f7ff ffcd 	bl	168c <arm_core_mpu_disable>
    16f2:	4c12      	ldr	r4, [pc, #72]	; (173c <z_arm_mpu_init+0x58>)
    16f4:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    16f6:	2200      	movs	r2, #0
    16f8:	4290      	cmp	r0, r2
    16fa:	f101 010c 	add.w	r1, r1, #12
    16fe:	d105      	bne.n	170c <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    1700:	4b0f      	ldr	r3, [pc, #60]	; (1740 <z_arm_mpu_init+0x5c>)
    1702:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    1704:	f7ff ffb6 	bl	1674 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    1708:	2000      	movs	r0, #0
}
    170a:	bd10      	pop	{r4, pc}
    170c:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1710:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    1714:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    1718:	4313      	orrs	r3, r2
    171a:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    171e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1722:	f851 3c04 	ldr.w	r3, [r1, #-4]
    1726:	f043 0301 	orr.w	r3, r3, #1
    172a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    172e:	3201      	adds	r2, #1
    1730:	e7e2      	b.n	16f8 <z_arm_mpu_init+0x14>
		return -1;
    1732:	f04f 30ff 	mov.w	r0, #4294967295
    1736:	e7e8      	b.n	170a <z_arm_mpu_init+0x26>
    1738:	00005464 	.word	0x00005464
    173c:	e000ed00 	.word	0xe000ed00
    1740:	200003f6 	.word	0x200003f6

00001744 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    1744:	4b01      	ldr	r3, [pc, #4]	; (174c <__stdout_hook_install+0x8>)
    1746:	6018      	str	r0, [r3, #0]
}
    1748:	4770      	bx	lr
    174a:	bf00      	nop
    174c:	20000008 	.word	0x20000008

00001750 <sys_arch_reboot>:
    }
    else
    {
        p_gpregret = &((volatile uint32_t *)&p_reg->GPREGRET)[0];
    }
    *p_gpregret = val;
    1750:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1754:	b2c0      	uxtb	r0, r0
    1756:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    175a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    175e:	4905      	ldr	r1, [pc, #20]	; (1774 <sys_arch_reboot+0x24>)
    1760:	4b05      	ldr	r3, [pc, #20]	; (1778 <sys_arch_reboot+0x28>)
    1762:	68ca      	ldr	r2, [r1, #12]
    1764:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1768:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    176a:	60cb      	str	r3, [r1, #12]
    176c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    1770:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    1772:	e7fd      	b.n	1770 <sys_arch_reboot+0x20>
    1774:	e000ed00 	.word	0xe000ed00
    1778:	05fa0004 	.word	0x05fa0004

0000177c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    177c:	b120      	cbz	r0, 1788 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    177e:	4b03      	ldr	r3, [pc, #12]	; (178c <arch_busy_wait+0x10>)
    1780:	0180      	lsls	r0, r0, #6
    1782:	f043 0301 	orr.w	r3, r3, #1
    1786:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    1788:	4770      	bx	lr
    178a:	bf00      	nop
    178c:	00005450 	.word	0x00005450

00001790 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    1790:	4b08      	ldr	r3, [pc, #32]	; (17b4 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1792:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1794:	1ac3      	subs	r3, r0, r3
{
    1796:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1798:	4907      	ldr	r1, [pc, #28]	; (17b8 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    179a:	109b      	asrs	r3, r3, #2
{
    179c:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    179e:	4359      	muls	r1, r3
    17a0:	4806      	ldr	r0, [pc, #24]	; (17bc <onoff_stop+0x2c>)
    17a2:	2240      	movs	r2, #64	; 0x40
    17a4:	f003 f963 	bl	4a6e <stop>
	notify(mgr, res);
    17a8:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    17aa:	4601      	mov	r1, r0
	notify(mgr, res);
    17ac:	4620      	mov	r0, r4
}
    17ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    17b2:	4718      	bx	r3
    17b4:	200002f4 	.word	0x200002f4
    17b8:	b6db6db7 	.word	0xb6db6db7
    17bc:	000052dc 	.word	0x000052dc

000017c0 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    17c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    17c2:	4c0c      	ldr	r4, [pc, #48]	; (17f4 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    17c4:	4a0c      	ldr	r2, [pc, #48]	; (17f8 <onoff_start+0x38>)
    17c6:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    17c8:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    17ca:	9300      	str	r3, [sp, #0]
{
    17cc:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    17ce:	460b      	mov	r3, r1
    17d0:	490a      	ldr	r1, [pc, #40]	; (17fc <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    17d2:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    17d4:	4361      	muls	r1, r4
{
    17d6:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    17d8:	4809      	ldr	r0, [pc, #36]	; (1800 <onoff_start+0x40>)
    17da:	f003 f975 	bl	4ac8 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    17de:	1e01      	subs	r1, r0, #0
    17e0:	da05      	bge.n	17ee <onoff_start+0x2e>
		notify(mgr, err);
    17e2:	4630      	mov	r0, r6
    17e4:	462b      	mov	r3, r5
	}
}
    17e6:	b002      	add	sp, #8
    17e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    17ec:	4718      	bx	r3
}
    17ee:	b002      	add	sp, #8
    17f0:	bd70      	pop	{r4, r5, r6, pc}
    17f2:	bf00      	nop
    17f4:	200002f4 	.word	0x200002f4
    17f8:	00004b35 	.word	0x00004b35
    17fc:	b6db6db7 	.word	0xb6db6db7
    1800:	000052dc 	.word	0x000052dc

00001804 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1804:	2200      	movs	r2, #0
{
    1806:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1808:	2101      	movs	r1, #1
{
    180a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    180c:	4610      	mov	r0, r2
    180e:	f7ff fc4d 	bl	10ac <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    1812:	4811      	ldr	r0, [pc, #68]	; (1858 <clk_init+0x54>)
    1814:	f001 fa06 	bl	2c24 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    1818:	4b10      	ldr	r3, [pc, #64]	; (185c <clk_init+0x58>)
    181a:	4298      	cmp	r0, r3
    181c:	d118      	bne.n	1850 <clk_init+0x4c>
	hfclkaudio_init();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_DRIVER_CALIBRATION)) {
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
    181e:	6920      	ldr	r0, [r4, #16]
    1820:	f000 f9b2 	bl	1b88 <z_nrf_clock_calibration_init>
	}

	nrfx_clock_enable();
    1824:	f003 faff 	bl	4e26 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    1828:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    182a:	490d      	ldr	r1, [pc, #52]	; (1860 <clk_init+0x5c>)
    182c:	4630      	mov	r0, r6
    182e:	f002 ff99 	bl	4764 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    1832:	2800      	cmp	r0, #0
    1834:	db0b      	blt.n	184e <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1836:	2501      	movs	r5, #1
    1838:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
    183a:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    183c:	4908      	ldr	r1, [pc, #32]	; (1860 <clk_init+0x5c>)
    183e:	f104 001c 	add.w	r0, r4, #28
    1842:	f002 ff8f 	bl	4764 <onoff_manager_init>
		if (err < 0) {
    1846:	2800      	cmp	r0, #0
    1848:	db01      	blt.n	184e <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    184a:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    184c:	2000      	movs	r0, #0
}
    184e:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    1850:	f06f 0004 	mvn.w	r0, #4
    1854:	e7fb      	b.n	184e <clk_init+0x4a>
    1856:	bf00      	nop
    1858:	00001899 	.word	0x00001899
    185c:	0bad0000 	.word	0x0bad0000
    1860:	00005484 	.word	0x00005484

00001864 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    1864:	b570      	push	{r4, r5, r6, lr}
    1866:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    1868:	230c      	movs	r3, #12
    186a:	4809      	ldr	r0, [pc, #36]	; (1890 <clkstarted_handle.constprop.0+0x2c>)
    186c:	434b      	muls	r3, r1
    186e:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    1870:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    1874:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    1876:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    1878:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    187a:	4418      	add	r0, r3
    187c:	f003 f8e4 	bl	4a48 <set_on_state>
	if (callback) {
    1880:	b12d      	cbz	r5, 188e <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    1882:	4632      	mov	r2, r6
    1884:	462b      	mov	r3, r5
    1886:	4803      	ldr	r0, [pc, #12]	; (1894 <clkstarted_handle.constprop.0+0x30>)
}
    1888:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    188c:	4718      	bx	r3
}
    188e:	bd70      	pop	{r4, r5, r6, pc}
    1890:	200002f4 	.word	0x200002f4
    1894:	000052dc 	.word	0x000052dc

00001898 <clock_event_handler>:
	switch (event) {
    1898:	2801      	cmp	r0, #1
{
    189a:	b510      	push	{r4, lr}
    189c:	4604      	mov	r4, r0
	switch (event) {
    189e:	d00a      	beq.n	18b6 <clock_event_handler+0x1e>
    18a0:	2803      	cmp	r0, #3
    18a2:	d00c      	beq.n	18be <clock_event_handler+0x26>
    18a4:	b978      	cbnz	r0, 18c6 <clock_event_handler+0x2e>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    18a6:	4b08      	ldr	r3, [pc, #32]	; (18c8 <clock_event_handler+0x30>)
    18a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    18aa:	075b      	lsls	r3, r3, #29
    18ac:	d10b      	bne.n	18c6 <clock_event_handler+0x2e>
}
    18ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    18b2:	f7ff bfd7 	b.w	1864 <clkstarted_handle.constprop.0>
			z_nrf_clock_calibration_lfclk_started();
    18b6:	f000 f975 	bl	1ba4 <z_nrf_clock_calibration_lfclk_started>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    18ba:	4620      	mov	r0, r4
    18bc:	e7f7      	b.n	18ae <clock_event_handler+0x16>
}
    18be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			z_nrf_clock_calibration_done_handler();
    18c2:	f000 b97d 	b.w	1bc0 <z_nrf_clock_calibration_done_handler>
}
    18c6:	bd10      	pop	{r4, pc}
    18c8:	200002f4 	.word	0x200002f4

000018cc <generic_hfclk_start>:
{
    18cc:	b508      	push	{r3, lr}
	__asm__ volatile(
    18ce:	f04f 0320 	mov.w	r3, #32
    18d2:	f3ef 8111 	mrs	r1, BASEPRI
    18d6:	f383 8812 	msr	BASEPRI_MAX, r3
    18da:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    18de:	4a12      	ldr	r2, [pc, #72]	; (1928 <generic_hfclk_start+0x5c>)
    18e0:	6813      	ldr	r3, [r2, #0]
    18e2:	f043 0002 	orr.w	r0, r3, #2
    18e6:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    18e8:	07da      	lsls	r2, r3, #31
    18ea:	d408      	bmi.n	18fe <generic_hfclk_start+0x32>
	__asm__ volatile(
    18ec:	f381 8811 	msr	BASEPRI, r1
    18f0:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    18f4:	2001      	movs	r0, #1
}
    18f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    18fa:	f003 baa1 	b.w	4e40 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    18fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1902:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    1906:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    190a:	07d3      	lsls	r3, r2, #31
    190c:	d5ee      	bpl.n	18ec <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    190e:	4807      	ldr	r0, [pc, #28]	; (192c <generic_hfclk_start+0x60>)
    1910:	f003 f89a 	bl	4a48 <set_on_state>
    1914:	f381 8811 	msr	BASEPRI, r1
    1918:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    191c:	2000      	movs	r0, #0
}
    191e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    1922:	f7ff bf9f 	b.w	1864 <clkstarted_handle.constprop.0>
    1926:	bf00      	nop
    1928:	20000344 	.word	0x20000344
    192c:	20000334 	.word	0x20000334

00001930 <api_blocking_start>:
{
    1930:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1932:	2200      	movs	r2, #0
    1934:	2301      	movs	r3, #1
    1936:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    193a:	4a09      	ldr	r2, [pc, #36]	; (1960 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    193c:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1940:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1942:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1946:	f003 f8ee 	bl	4b26 <api_start>
	if (err < 0) {
    194a:	2800      	cmp	r0, #0
    194c:	db05      	blt.n	195a <api_blocking_start+0x2a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    194e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1952:	2300      	movs	r3, #0
    1954:	4668      	mov	r0, sp
    1956:	f001 ffb1 	bl	38bc <z_impl_k_sem_take>
}
    195a:	b005      	add	sp, #20
    195c:	f85d fb04 	ldr.w	pc, [sp], #4
    1960:	00004b4d 	.word	0x00004b4d

00001964 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1964:	4b09      	ldr	r3, [pc, #36]	; (198c <generic_hfclk_stop+0x28>)
    1966:	f3bf 8f5b 	dmb	ish
    196a:	e853 2f00 	ldrex	r2, [r3]
    196e:	f022 0102 	bic.w	r1, r2, #2
    1972:	e843 1000 	strex	r0, r1, [r3]
    1976:	2800      	cmp	r0, #0
    1978:	d1f7      	bne.n	196a <generic_hfclk_stop+0x6>
    197a:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    197e:	07d3      	lsls	r3, r2, #31
    1980:	d402      	bmi.n	1988 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    1982:	2001      	movs	r0, #1
    1984:	f003 ba94 	b.w	4eb0 <nrfx_clock_stop>
}
    1988:	4770      	bx	lr
    198a:	bf00      	nop
    198c:	20000344 	.word	0x20000344

00001990 <z_nrf_clock_control_get_onoff>:
}
    1990:	4a02      	ldr	r2, [pc, #8]	; (199c <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    1992:	b2c3      	uxtb	r3, r0
}
    1994:	201c      	movs	r0, #28
    1996:	fb03 2000 	mla	r0, r3, r0, r2
    199a:	4770      	bx	lr
    199c:	200002f4 	.word	0x200002f4

000019a0 <z_nrf_clock_control_lf_on>:
{
    19a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    19a2:	4928      	ldr	r1, [pc, #160]	; (1a44 <z_nrf_clock_control_lf_on+0xa4>)
    19a4:	f3bf 8f5b 	dmb	ish
    19a8:	4606      	mov	r6, r0
    19aa:	2201      	movs	r2, #1
    19ac:	e851 3f00 	ldrex	r3, [r1]
    19b0:	e841 2000 	strex	r0, r2, [r1]
    19b4:	2800      	cmp	r0, #0
    19b6:	d1f9      	bne.n	19ac <z_nrf_clock_control_lf_on+0xc>
    19b8:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    19bc:	b933      	cbnz	r3, 19cc <z_nrf_clock_control_lf_on+0x2c>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    19be:	4922      	ldr	r1, [pc, #136]	; (1a48 <z_nrf_clock_control_lf_on+0xa8>)
		err = onoff_request(mgr, &cli);
    19c0:	4822      	ldr	r0, [pc, #136]	; (1a4c <z_nrf_clock_control_lf_on+0xac>)
    19c2:	604b      	str	r3, [r1, #4]
    19c4:	60cb      	str	r3, [r1, #12]
    19c6:	608a      	str	r2, [r1, #8]
    19c8:	f002 fedf 	bl	478a <onoff_request>
	switch (start_mode) {
    19cc:	1e73      	subs	r3, r6, #1
    19ce:	2b01      	cmp	r3, #1
    19d0:	d81d      	bhi.n	1a0e <z_nrf_clock_control_lf_on+0x6e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    19d2:	f003 faa8 	bl	4f26 <k_is_in_isr>
    19d6:	4604      	mov	r4, r0
    19d8:	b9d0      	cbnz	r0, 1a10 <z_nrf_clock_control_lf_on+0x70>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    19da:	4b1d      	ldr	r3, [pc, #116]	; (1a50 <z_nrf_clock_control_lf_on+0xb0>)
    19dc:	781b      	ldrb	r3, [r3, #0]
    19de:	b1bb      	cbz	r3, 1a10 <z_nrf_clock_control_lf_on+0x70>
    p_reg->INTENCLR = mask;
    19e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    19e4:	2202      	movs	r2, #2
    19e6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    19ea:	4605      	mov	r5, r0
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    19ec:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    19f0:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    19f4:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
    19f8:	03d2      	lsls	r2, r2, #15
    19fa:	d513      	bpl.n	1a24 <z_nrf_clock_control_lf_on+0x84>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    19fc:	079b      	lsls	r3, r3, #30
    19fe:	d001      	beq.n	1a04 <z_nrf_clock_control_lf_on+0x64>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    1a00:	2e01      	cmp	r6, #1
    1a02:	d10f      	bne.n	1a24 <z_nrf_clock_control_lf_on+0x84>
	if (isr_mode) {
    1a04:	b1c4      	cbz	r4, 1a38 <z_nrf_clock_control_lf_on+0x98>
    1a06:	f385 8811 	msr	BASEPRI, r5
    1a0a:	f3bf 8f6f 	isb	sy
}
    1a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile(
    1a10:	f04f 0320 	mov.w	r3, #32
    1a14:	f3ef 8511 	mrs	r5, BASEPRI
    1a18:	f383 8812 	msr	BASEPRI_MAX, r3
    1a1c:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1a20:	2401      	movs	r4, #1
    1a22:	e7e3      	b.n	19ec <z_nrf_clock_control_lf_on+0x4c>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    1a24:	b11c      	cbz	r4, 1a2e <z_nrf_clock_control_lf_on+0x8e>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    1a26:	4628      	mov	r0, r5
    1a28:	f7ff fb1a 	bl	1060 <arch_cpu_atomic_idle>
}
    1a2c:	e7e0      	b.n	19f0 <z_nrf_clock_control_lf_on+0x50>
	return z_impl_k_sleep(timeout);
    1a2e:	2100      	movs	r1, #0
    1a30:	2021      	movs	r0, #33	; 0x21
    1a32:	f002 fb67 	bl	4104 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    1a36:	e7db      	b.n	19f0 <z_nrf_clock_control_lf_on+0x50>
    p_reg->INTENSET = mask;
    1a38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1a3c:	2202      	movs	r2, #2
    1a3e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    1a42:	e7e4      	b.n	1a0e <z_nrf_clock_control_lf_on+0x6e>
    1a44:	200002f0 	.word	0x200002f0
    1a48:	200002e0 	.word	0x200002e0
    1a4c:	20000310 	.word	0x20000310
    1a50:	200003fa 	.word	0x200003fa

00001a54 <start_cal_process>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    1a54:	4b0d      	ldr	r3, [pc, #52]	; (1a8c <start_cal_process+0x38>)
    1a56:	f3bf 8f5b 	dmb	ish
    1a5a:	2201      	movs	r2, #1
    1a5c:	e853 1f00 	ldrex	r1, [r3]
    1a60:	2900      	cmp	r1, #0
    1a62:	d103      	bne.n	1a6c <start_cal_process+0x18>
    1a64:	e843 2000 	strex	r0, r2, [r3]
    1a68:	2800      	cmp	r0, #0
    1a6a:	d1f7      	bne.n	1a5c <start_cal_process+0x8>
    1a6c:	f3bf 8f5b 	dmb	ish
	cal_process_in_progress = 0;
}

static void start_cal_process(void)
{
	if (atomic_cas(&cal_process_in_progress, 0, 1) == false) {
    1a70:	d10a      	bne.n	1a88 <start_cal_process+0x34>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
    1a72:	4907      	ldr	r1, [pc, #28]	; (1a90 <start_cal_process+0x3c>)
    1a74:	2300      	movs	r3, #0
    1a76:	60cb      	str	r3, [r1, #12]
    1a78:	4b06      	ldr	r3, [pc, #24]	; (1a94 <start_cal_process+0x40>)
    1a7a:	604b      	str	r3, [r1, #4]
    1a7c:	2303      	movs	r3, #3
    1a7e:	608b      	str	r3, [r1, #8]
	err = onoff_request(mgr, cli);
    1a80:	4b05      	ldr	r3, [pc, #20]	; (1a98 <start_cal_process+0x44>)
    1a82:	6818      	ldr	r0, [r3, #0]
    1a84:	f002 be81 	b.w	478a <onoff_request>
		 * will be released at the end of calibration process and
		 * stopped in consequence.
		 */
		lf_request();
	}
}
    1a88:	4770      	bx	lr
    1a8a:	bf00      	nop
    1a8c:	20000364 	.word	0x20000364
    1a90:	2000034c 	.word	0x2000034c
    1a94:	00001b5d 	.word	0x00001b5d
    1a98:	20000348 	.word	0x20000348

00001a9c <start_cycle>:
{
    1a9c:	b507      	push	{r0, r1, r2, lr}
	z_impl_k_timer_start(timer, duration, period);
    1a9e:	2200      	movs	r2, #0
    1aa0:	2300      	movs	r3, #0
    1aa2:	e9cd 2300 	strd	r2, r3, [sp]
    1aa6:	4808      	ldr	r0, [pc, #32]	; (1ac8 <start_cycle+0x2c>)
    1aa8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1aac:	2300      	movs	r3, #0
    1aae:	f002 fd7f 	bl	45b0 <z_impl_k_timer_start>
	clk_release(&mgrs[CLOCK_CONTROL_NRF_TYPE_HFCLK]);
    1ab2:	4b06      	ldr	r3, [pc, #24]	; (1acc <start_cycle+0x30>)
	err = onoff_release(mgr);
    1ab4:	6818      	ldr	r0, [r3, #0]
    1ab6:	f002 fec0 	bl	483a <onoff_release>
	cal_process_in_progress = 0;
    1aba:	4b05      	ldr	r3, [pc, #20]	; (1ad0 <start_cycle+0x34>)
    1abc:	2200      	movs	r2, #0
    1abe:	601a      	str	r2, [r3, #0]
}
    1ac0:	b003      	add	sp, #12
    1ac2:	f85d fb04 	ldr.w	pc, [sp], #4
    1ac6:	bf00      	nop
    1ac8:	200000b0 	.word	0x200000b0
    1acc:	20000348 	.word	0x20000348
    1ad0:	20000364 	.word	0x20000364

00001ad4 <measure_temperature>:
/* Function determines if calibration should be performed based on temperature
 * measurement. Function is called from system work queue context. It is
 * reading temperature from TEMP sensor and compares with last measurement.
 */
static void measure_temperature(struct k_work *work)
{
    1ad4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
static inline int z_impl_sensor_sample_fetch(const struct device *dev)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
    1ad6:	4e1c      	ldr	r6, [pc, #112]	; (1b48 <measure_temperature+0x74>)
    1ad8:	4c1c      	ldr	r4, [pc, #112]	; (1b4c <measure_temperature+0x78>)
    1ada:	68b7      	ldr	r7, [r6, #8]
    1adc:	4d1c      	ldr	r5, [pc, #112]	; (1b50 <measure_temperature+0x7c>)
    1ade:	68fb      	ldr	r3, [r7, #12]
    1ae0:	2139      	movs	r1, #57	; 0x39
    1ae2:	4630      	mov	r0, r6
    1ae4:	4798      	blx	r3
	if (rc == 0) {
    1ae6:	b140      	cbz	r0, 1afa <measure_temperature+0x26>

	rc = get_temperature(&temperature);

	if (rc != 0) {
		/* Temperature read failed, force calibration. */
		calib_skip_cnt = 0;
    1ae8:	2300      	movs	r3, #0
    1aea:	7023      	strb	r3, [r4, #0]
		diff = abs(temperature - prev_temperature);
	}

	if ((calib_skip_cnt == 0) ||
		(diff >= CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_TEMP_DIFF)) {
		prev_temperature = temperature;
    1aec:	802b      	strh	r3, [r5, #0]
	nrfx_clock_calibration_start();
    1aee:	f001 f8ab 	bl	2c48 <nrfx_clock_calibration_start>
	calib_skip_cnt = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP;
    1af2:	2301      	movs	r3, #1
    1af4:	7023      	strb	r3, [r4, #0]
		start_cycle();
	}

	LOG_DBG("Calibration %s. Temperature diff: %d (in 0.25'C units).",
			started ? "started" : "skipped", diff);
}
    1af6:	b003      	add	sp, #12
    1af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
					    struct sensor_value *val)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->channel_get(dev, chan, val);
    1afa:	210c      	movs	r1, #12
    1afc:	693b      	ldr	r3, [r7, #16]
    1afe:	466a      	mov	r2, sp
    1b00:	4630      	mov	r0, r6
    1b02:	4798      	blx	r3
	if (rc == 0) {
    1b04:	2800      	cmp	r0, #0
    1b06:	d1ef      	bne.n	1ae8 <measure_temperature+0x14>
	return (int16_t)(4 * val->val1 + val->val2 / 250000);
    1b08:	4a12      	ldr	r2, [pc, #72]	; (1b54 <measure_temperature+0x80>)
    1b0a:	9b01      	ldr	r3, [sp, #4]
    1b0c:	fb93 f3f2 	sdiv	r3, r3, r2
    1b10:	9a00      	ldr	r2, [sp, #0]
	if ((calib_skip_cnt == 0) ||
    1b12:	7821      	ldrb	r1, [r4, #0]
	return (int16_t)(4 * val->val1 + val->val2 / 250000);
    1b14:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1b18:	b21b      	sxth	r3, r3
		diff = abs(temperature - prev_temperature);
    1b1a:	f9b5 2000 	ldrsh.w	r2, [r5]
	if ((calib_skip_cnt == 0) ||
    1b1e:	2900      	cmp	r1, #0
    1b20:	d0e4      	beq.n	1aec <measure_temperature+0x18>
		diff = abs(temperature - prev_temperature);
    1b22:	1a9a      	subs	r2, r3, r2
void srand(unsigned int seed);
#endif /* CONFIG_MINIMAL_LIBC_RAND */

static inline int abs(int __n)
{
	return (__n < 0) ? -__n : __n;
    1b24:	2a00      	cmp	r2, #0
    1b26:	bfb8      	it	lt
    1b28:	4252      	neglt	r2, r2
	if ((calib_skip_cnt == 0) ||
    1b2a:	b212      	sxth	r2, r2
    1b2c:	2a01      	cmp	r2, #1
    1b2e:	dcdd      	bgt.n	1aec <measure_temperature+0x18>
		total_skips_cnt++;
    1b30:	4a09      	ldr	r2, [pc, #36]	; (1b58 <measure_temperature+0x84>)
    1b32:	6813      	ldr	r3, [r2, #0]
		calib_skip_cnt--;
    1b34:	3901      	subs	r1, #1
		total_skips_cnt++;
    1b36:	3301      	adds	r3, #1
		calib_skip_cnt--;
    1b38:	7021      	strb	r1, [r4, #0]
		total_skips_cnt++;
    1b3a:	6013      	str	r3, [r2, #0]
}
    1b3c:	b003      	add	sp, #12
    1b3e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		start_cycle();
    1b42:	f7ff bfab 	b.w	1a9c <start_cycle>
    1b46:	bf00      	nop
    1b48:	00005324 	.word	0x00005324
    1b4c:	200003f7 	.word	0x200003f7
    1b50:	200003f4 	.word	0x200003f4
    1b54:	0003d090 	.word	0x0003d090
    1b58:	2000035c 	.word	0x2000035c

00001b5c <cal_hf_callback>:
{
    1b5c:	b508      	push	{r3, lr}
    1b5e:	4807      	ldr	r0, [pc, #28]	; (1b7c <cal_hf_callback+0x20>)
    1b60:	f003 f9b7 	bl	4ed2 <z_device_is_ready>
	if (!device_is_ready(temp_sensor)) {
    1b64:	b928      	cbnz	r0, 1b72 <cal_hf_callback+0x16>
	nrfx_clock_calibration_start();
    1b66:	f001 f86f 	bl	2c48 <nrfx_clock_calibration_start>
	calib_skip_cnt = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP;
    1b6a:	4b05      	ldr	r3, [pc, #20]	; (1b80 <cal_hf_callback+0x24>)
    1b6c:	2201      	movs	r2, #1
    1b6e:	701a      	strb	r2, [r3, #0]
}
    1b70:	bd08      	pop	{r3, pc}
    1b72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_work_submit(&temp_measure_work);
    1b76:	4803      	ldr	r0, [pc, #12]	; (1b84 <cal_hf_callback+0x28>)
    1b78:	f001 bfbe 	b.w	3af8 <k_work_submit>
    1b7c:	00005324 	.word	0x00005324
    1b80:	200003f7 	.word	0x200003f7
    1b84:	2000000c 	.word	0x2000000c

00001b88 <z_nrf_clock_calibration_init>:
#endif /* USE_TEMP_SENSOR */

void z_nrf_clock_calibration_init(struct onoff_manager *onoff_mgrs)
{
	mgrs = onoff_mgrs;
    1b88:	4b03      	ldr	r3, [pc, #12]	; (1b98 <z_nrf_clock_calibration_init+0x10>)
	total_cnt = 0;
    1b8a:	4a04      	ldr	r2, [pc, #16]	; (1b9c <z_nrf_clock_calibration_init+0x14>)
	mgrs = onoff_mgrs;
    1b8c:	6018      	str	r0, [r3, #0]
	total_cnt = 0;
    1b8e:	2300      	movs	r3, #0
    1b90:	6013      	str	r3, [r2, #0]
	total_skips_cnt = 0;
    1b92:	4a03      	ldr	r2, [pc, #12]	; (1ba0 <z_nrf_clock_calibration_init+0x18>)
    1b94:	6013      	str	r3, [r2, #0]
}
    1b96:	4770      	bx	lr
    1b98:	20000348 	.word	0x20000348
    1b9c:	20000360 	.word	0x20000360
    1ba0:	2000035c 	.word	0x2000035c

00001ba4 <z_nrf_clock_calibration_lfclk_started>:

static void start_unconditional_cal_process(void)
{
	calib_skip_cnt = 0;
    1ba4:	4b02      	ldr	r3, [pc, #8]	; (1bb0 <z_nrf_clock_calibration_lfclk_started+0xc>)
    1ba6:	2200      	movs	r2, #0
    1ba8:	701a      	strb	r2, [r3, #0]
	start_cal_process();
    1baa:	f7ff bf53 	b.w	1a54 <start_cal_process>
    1bae:	bf00      	nop
    1bb0:	200003f7 	.word	0x200003f7

00001bb4 <z_nrf_clock_calibration_lfclk_stopped>:
	z_impl_k_timer_stop(timer);
    1bb4:	4801      	ldr	r0, [pc, #4]	; (1bbc <z_nrf_clock_calibration_lfclk_stopped+0x8>)
    1bb6:	f003 bb4e 	b.w	5256 <z_impl_k_timer_stop>
    1bba:	bf00      	nop
    1bbc:	200000b0 	.word	0x200000b0

00001bc0 <z_nrf_clock_calibration_done_handler>:
	LOG_DBG("Calibration stopped");
}

void z_nrf_clock_calibration_done_handler(void)
{
	total_cnt++;
    1bc0:	4a02      	ldr	r2, [pc, #8]	; (1bcc <z_nrf_clock_calibration_done_handler+0xc>)
    1bc2:	6813      	ldr	r3, [r2, #0]
    1bc4:	3301      	adds	r3, #1
    1bc6:	6013      	str	r3, [r2, #0]
	LOG_DBG("Calibration done.");

	start_cycle();
    1bc8:	f7ff bf68 	b.w	1a9c <start_cycle>
    1bcc:	20000360 	.word	0x20000360

00001bd0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    1bd0:	b508      	push	{r3, lr}
    1bd2:	4807      	ldr	r0, [pc, #28]	; (1bf0 <uart_console_init+0x20>)
    1bd4:	f003 f97d 	bl	4ed2 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
    1bd8:	b138      	cbz	r0, 1bea <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
    1bda:	4806      	ldr	r0, [pc, #24]	; (1bf4 <uart_console_init+0x24>)
    1bdc:	f7ff fdb2 	bl	1744 <__stdout_hook_install>
	__printk_hook_install(console_out);
    1be0:	4804      	ldr	r0, [pc, #16]	; (1bf4 <uart_console_init+0x24>)
    1be2:	f7fe fc1b 	bl	41c <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    1be6:	2000      	movs	r0, #0
}
    1be8:	bd08      	pop	{r3, pc}
		return -ENODEV;
    1bea:	f06f 0012 	mvn.w	r0, #18
    1bee:	e7fb      	b.n	1be8 <uart_console_init+0x18>
    1bf0:	0000530c 	.word	0x0000530c
    1bf4:	00001bf9 	.word	0x00001bf9

00001bf8 <console_out>:
	if ('\n' == c) {
    1bf8:	280a      	cmp	r0, #10
{
    1bfa:	b538      	push	{r3, r4, r5, lr}
    1bfc:	4d07      	ldr	r5, [pc, #28]	; (1c1c <console_out+0x24>)
    1bfe:	4604      	mov	r4, r0
	if ('\n' == c) {
    1c00:	d104      	bne.n	1c0c <console_out+0x14>
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    1c02:	68ab      	ldr	r3, [r5, #8]
    1c04:	210d      	movs	r1, #13
    1c06:	685b      	ldr	r3, [r3, #4]
    1c08:	4628      	mov	r0, r5
    1c0a:	4798      	blx	r3
    1c0c:	68ab      	ldr	r3, [r5, #8]
    1c0e:	4803      	ldr	r0, [pc, #12]	; (1c1c <console_out+0x24>)
    1c10:	685b      	ldr	r3, [r3, #4]
    1c12:	b2e1      	uxtb	r1, r4
    1c14:	4798      	blx	r3
}
    1c16:	4620      	mov	r0, r4
    1c18:	bd38      	pop	{r3, r4, r5, pc}
    1c1a:	bf00      	nop
    1c1c:	0000530c 	.word	0x0000530c

00001c20 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    1c20:	b530      	push	{r4, r5, lr}
	return port->config;
    1c22:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    1c24:	7b05      	ldrb	r5, [r0, #12]
    1c26:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    1c2a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    1c2e:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    1c30:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    1c34:	d105      	bne.n	1c42 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    1c36:	4620      	mov	r0, r4
    1c38:	f001 faae 	bl	3198 <nrfx_gpiote_trigger_disable>

		return 0;
    1c3c:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    1c3e:	b005      	add	sp, #20
    1c40:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    1c42:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    1c44:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    1c48:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    1c4c:	d114      	bne.n	1c78 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    1c4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    1c52:	bf0c      	ite	eq
    1c54:	2304      	moveq	r3, #4
    1c56:	2305      	movne	r3, #5
    1c58:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    1c5c:	2300      	movs	r3, #0
    1c5e:	4619      	mov	r1, r3
    1c60:	aa02      	add	r2, sp, #8
    1c62:	4620      	mov	r0, r4
    1c64:	f001 f8ce 	bl	2e04 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    1c68:	4b1d      	ldr	r3, [pc, #116]	; (1ce0 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    1c6a:	4298      	cmp	r0, r3
    1c6c:	d135      	bne.n	1cda <gpio_nrfx_pin_interrupt_configure+0xba>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    1c6e:	2101      	movs	r1, #1
    1c70:	4620      	mov	r0, r4
    1c72:	f001 fa4d 	bl	3110 <nrfx_gpiote_trigger_enable>
	return 0;
    1c76:	e7e1      	b.n	1c3c <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    1c78:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    1c7c:	d022      	beq.n	1cc4 <gpio_nrfx_pin_interrupt_configure+0xa4>
    1c7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    1c82:	bf14      	ite	ne
    1c84:	2301      	movne	r3, #1
    1c86:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    1c88:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    1c8c:	6883      	ldr	r3, [r0, #8]
    1c8e:	40cb      	lsrs	r3, r1
    1c90:	07d9      	lsls	r1, r3, #31
    1c92:	d4e3      	bmi.n	1c5c <gpio_nrfx_pin_interrupt_configure+0x3c>
    1c94:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    1c98:	d1e0      	bne.n	1c5c <gpio_nrfx_pin_interrupt_configure+0x3c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    1c9a:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    1c9e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    1ca2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    1ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    1caa:	07db      	lsls	r3, r3, #31
    1cac:	d4d6      	bmi.n	1c5c <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    1cae:	f10d 0507 	add.w	r5, sp, #7
    1cb2:	4629      	mov	r1, r5
    1cb4:	4620      	mov	r0, r4
    1cb6:	f001 f9d7 	bl	3068 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    1cba:	4b0a      	ldr	r3, [pc, #40]	; (1ce4 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    1cbc:	4298      	cmp	r0, r3
    1cbe:	d003      	beq.n	1cc8 <gpio_nrfx_pin_interrupt_configure+0xa8>
		trigger_config.p_in_channel = &ch;
    1cc0:	9503      	str	r5, [sp, #12]
    1cc2:	e7cb      	b.n	1c5c <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    1cc4:	2303      	movs	r3, #3
    1cc6:	e7df      	b.n	1c88 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    1cc8:	4628      	mov	r0, r5
    1cca:	f001 fa1b 	bl	3104 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    1cce:	4b04      	ldr	r3, [pc, #16]	; (1ce0 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    1cd0:	4298      	cmp	r0, r3
    1cd2:	d0f5      	beq.n	1cc0 <gpio_nrfx_pin_interrupt_configure+0xa0>
				return -ENOMEM;
    1cd4:	f06f 000b 	mvn.w	r0, #11
    1cd8:	e7b1      	b.n	1c3e <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    1cda:	f06f 0015 	mvn.w	r0, #21
    1cde:	e7ae      	b.n	1c3e <gpio_nrfx_pin_interrupt_configure+0x1e>
    1ce0:	0bad0000 	.word	0x0bad0000
    1ce4:	0bad0004 	.word	0x0bad0004

00001ce8 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    1ce8:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    1cea:	f001 f9fb 	bl	30e4 <nrfx_gpiote_is_init>
    1cee:	4604      	mov	r4, r0
    1cf0:	b968      	cbnz	r0, 1d0e <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    1cf2:	f001 f9cf 	bl	3094 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    1cf6:	4b08      	ldr	r3, [pc, #32]	; (1d18 <gpio_nrfx_init+0x30>)
    1cf8:	4298      	cmp	r0, r3
    1cfa:	d10a      	bne.n	1d12 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    1cfc:	4807      	ldr	r0, [pc, #28]	; (1d1c <gpio_nrfx_init+0x34>)
    1cfe:	4621      	mov	r1, r4
    1d00:	f001 f9ac 	bl	305c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    1d04:	4622      	mov	r2, r4
    1d06:	2105      	movs	r1, #5
    1d08:	2006      	movs	r0, #6
    1d0a:	f7ff f9cf 	bl	10ac <z_arm_irq_priority_set>
		return 0;
    1d0e:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    1d10:	bd10      	pop	{r4, pc}
		return -EIO;
    1d12:	f06f 0004 	mvn.w	r0, #4
    1d16:	e7fb      	b.n	1d10 <gpio_nrfx_init+0x28>
    1d18:	0bad0000 	.word	0x0bad0000
    1d1c:	00001d21 	.word	0x00001d21

00001d20 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    1d20:	0943      	lsrs	r3, r0, #5
{
    1d22:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    1d24:	d107      	bne.n	1d36 <nrfx_gpio_handler+0x16>
	return list->head;
    1d26:	4b0b      	ldr	r3, [pc, #44]	; (1d54 <nrfx_gpio_handler+0x34>)
    1d28:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    1d2a:	b121      	cbz	r1, 1d36 <nrfx_gpio_handler+0x16>
	gpio_fire_callbacks(list, port, BIT(pin));
    1d2c:	2501      	movs	r5, #1
	return node->next;
    1d2e:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    1d30:	4e09      	ldr	r6, [pc, #36]	; (1d58 <nrfx_gpio_handler+0x38>)
    1d32:	4085      	lsls	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    1d34:	b901      	cbnz	r1, 1d38 <nrfx_gpio_handler+0x18>
}
    1d36:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
    1d38:	688a      	ldr	r2, [r1, #8]
    1d3a:	402a      	ands	r2, r5
    1d3c:	d002      	beq.n	1d44 <nrfx_gpio_handler+0x24>
			cb->handler(port, cb, cb->pin_mask & pins);
    1d3e:	684b      	ldr	r3, [r1, #4]
    1d40:	4630      	mov	r0, r6
    1d42:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    1d44:	b11c      	cbz	r4, 1d4e <nrfx_gpio_handler+0x2e>
    1d46:	6823      	ldr	r3, [r4, #0]
    1d48:	4621      	mov	r1, r4
    1d4a:	461c      	mov	r4, r3
    1d4c:	e7f2      	b.n	1d34 <nrfx_gpio_handler+0x14>
    1d4e:	4623      	mov	r3, r4
    1d50:	e7fa      	b.n	1d48 <nrfx_gpio_handler+0x28>
    1d52:	bf00      	nop
    1d54:	20000368 	.word	0x20000368
    1d58:	000052f4 	.word	0x000052f4

00001d5c <gpio_nrfx_pin_configure>:
{
    1d5c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    1d60:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    1d62:	7b3b      	ldrb	r3, [r7, #12]
    1d64:	f001 051f 	and.w	r5, r1, #31
    1d68:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    1d6c:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    1d6e:	4628      	mov	r0, r5
    1d70:	f10d 0103 	add.w	r1, sp, #3
{
    1d74:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    1d76:	f001 f977 	bl	3068 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    1d7a:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    1d7e:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    1d80:	d10b      	bne.n	1d9a <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    1d82:	4628      	mov	r0, r5
    1d84:	f001 fa30 	bl	31e8 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    1d88:	4b3d      	ldr	r3, [pc, #244]	; (1e80 <gpio_nrfx_pin_configure+0x124>)
    1d8a:	4598      	cmp	r8, r3
    1d8c:	d103      	bne.n	1d96 <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    1d8e:	f89d 0003 	ldrb.w	r0, [sp, #3]
    1d92:	f001 f9b1 	bl	30f8 <nrfx_gpiote_channel_free>
		return 0;
    1d96:	2000      	movs	r0, #0
    1d98:	e00c      	b.n	1db4 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    1d9a:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    1d9c:	4619      	mov	r1, r3
    1d9e:	aa02      	add	r2, sp, #8
    1da0:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
    1da2:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    1da6:	f001 f82d 	bl	2e04 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    1daa:	4b35      	ldr	r3, [pc, #212]	; (1e80 <gpio_nrfx_pin_configure+0x124>)
    1dac:	4298      	cmp	r0, r3
    1dae:	d004      	beq.n	1dba <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    1db0:	f06f 0015 	mvn.w	r0, #21
}
    1db4:	b004      	add	sp, #16
    1db6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    1dba:	4580      	cmp	r8, r0
    1dbc:	d103      	bne.n	1dc6 <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    1dbe:	f89d 0003 	ldrb.w	r0, [sp, #3]
    1dc2:	f001 f999 	bl	30f8 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    1dc6:	03a3      	lsls	r3, r4, #14
    1dc8:	d54b      	bpl.n	1e62 <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    1dca:	f240 3306 	movw	r3, #774	; 0x306
    1dce:	4023      	ands	r3, r4
    1dd0:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    1dd4:	d019      	beq.n	1e0a <gpio_nrfx_pin_configure+0xae>
    1dd6:	d80c      	bhi.n	1df2 <gpio_nrfx_pin_configure+0x96>
    1dd8:	2b06      	cmp	r3, #6
    1dda:	d017      	beq.n	1e0c <gpio_nrfx_pin_configure+0xb0>
    1ddc:	d804      	bhi.n	1de8 <gpio_nrfx_pin_configure+0x8c>
    1dde:	b1ab      	cbz	r3, 1e0c <gpio_nrfx_pin_configure+0xb0>
    1de0:	2b02      	cmp	r3, #2
    1de2:	d1e5      	bne.n	1db0 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    1de4:	2304      	movs	r3, #4
    1de6:	e011      	b.n	1e0c <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    1de8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    1dec:	d1e0      	bne.n	1db0 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    1dee:	2301      	movs	r3, #1
    1df0:	e00c      	b.n	1e0c <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    1df2:	f240 2202 	movw	r2, #514	; 0x202
    1df6:	4293      	cmp	r3, r2
    1df8:	d027      	beq.n	1e4a <gpio_nrfx_pin_configure+0xee>
    1dfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    1dfe:	d026      	beq.n	1e4e <gpio_nrfx_pin_configure+0xf2>
    1e00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    1e04:	d1d4      	bne.n	1db0 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    1e06:	2302      	movs	r3, #2
    1e08:	e000      	b.n	1e0c <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    1e0a:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    1e0c:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    1e10:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    1e14:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    1e18:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    1e1a:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
    1e1e:	bf54      	ite	pl
    1e20:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    1e24:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    1e26:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    1e28:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    1e2c:	d511      	bpl.n	1e52 <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    1e2e:	687a      	ldr	r2, [r7, #4]
    1e30:	2301      	movs	r3, #1
    1e32:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    1e34:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    1e38:	2200      	movs	r2, #0
    1e3a:	a901      	add	r1, sp, #4
    1e3c:	4628      	mov	r0, r5
    1e3e:	f001 f88f 	bl	2f60 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    1e42:	4b0f      	ldr	r3, [pc, #60]	; (1e80 <gpio_nrfx_pin_configure+0x124>)
    1e44:	4298      	cmp	r0, r3
    1e46:	d0a6      	beq.n	1d96 <gpio_nrfx_pin_configure+0x3a>
    1e48:	e7b2      	b.n	1db0 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    1e4a:	2305      	movs	r3, #5
    1e4c:	e7de      	b.n	1e0c <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    1e4e:	2303      	movs	r3, #3
    1e50:	e7dc      	b.n	1e0c <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    1e52:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    1e54:	bf41      	itttt	mi
    1e56:	2301      	movmi	r3, #1
    1e58:	687a      	ldrmi	r2, [r7, #4]
    1e5a:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    1e5c:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    1e60:	e7ea      	b.n	1e38 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
    1e62:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    1e64:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
    1e68:	bf54      	ite	pl
    1e6a:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    1e6e:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    1e70:	461a      	mov	r2, r3
    1e72:	a901      	add	r1, sp, #4
    1e74:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    1e76:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    1e7a:	f000 ffc3 	bl	2e04 <nrfx_gpiote_input_configure>
    1e7e:	e7e0      	b.n	1e42 <gpio_nrfx_pin_configure+0xe6>
    1e80:	0bad0000 	.word	0x0bad0000

00001e84 <hfclk_on_callback>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_temp_task_trigger(NRF_TEMP_Type * p_reg, nrf_temp_task_t task)
{
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
    1e84:	4b01      	ldr	r3, [pc, #4]	; (1e8c <hfclk_on_callback+0x8>)
    1e86:	2201      	movs	r2, #1
    1e88:	601a      	str	r2, [r3, #0]
			      struct onoff_client *cli,
			      uint32_t state,
			      int res)
{
	nrf_temp_task_trigger(NRF_TEMP, NRF_TEMP_TASK_START);
}
    1e8a:	4770      	bx	lr
    1e8c:	4000c000 	.word	0x4000c000

00001e90 <temp_nrf5_channel_get>:
{
	struct temp_nrf5_data *data = dev->data;
	int32_t uval;


	if (chan != SENSOR_CHAN_DIE_TEMP) {
    1e90:	290c      	cmp	r1, #12
	struct temp_nrf5_data *data = dev->data;
    1e92:	6903      	ldr	r3, [r0, #16]
	if (chan != SENSOR_CHAN_DIE_TEMP) {
    1e94:	d10b      	bne.n	1eae <temp_nrf5_channel_get+0x1e>
		return -ENOTSUP;
	}

	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
    1e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1e98:	4906      	ldr	r1, [pc, #24]	; (1eb4 <temp_nrf5_channel_get+0x24>)
	val->val1 = uval / 1000000;
    1e9a:	4807      	ldr	r0, [pc, #28]	; (1eb8 <temp_nrf5_channel_get+0x28>)
	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
    1e9c:	434b      	muls	r3, r1
	val->val1 = uval / 1000000;
    1e9e:	fb93 f1f0 	sdiv	r1, r3, r0
	val->val2 = uval % 1000000;
    1ea2:	fb00 3311 	mls	r3, r0, r1, r3
	val->val1 = uval / 1000000;
    1ea6:	6011      	str	r1, [r2, #0]
	val->val2 = uval % 1000000;
    1ea8:	6053      	str	r3, [r2, #4]

	LOG_DBG("Temperature:%d,%d", val->val1, val->val2);

	return 0;
    1eaa:	2000      	movs	r0, #0
    1eac:	4770      	bx	lr
		return -ENOTSUP;
    1eae:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    1eb2:	4770      	bx	lr
    1eb4:	0003d090 	.word	0x0003d090
    1eb8:	000f4240 	.word	0x000f4240

00001ebc <temp_nrf5_isr>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_temp_event_clear(NRF_TEMP_Type * p_reg, nrf_temp_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1ebc:	4b04      	ldr	r3, [pc, #16]	; (1ed0 <temp_nrf5_isr+0x14>)

static void temp_nrf5_isr(void *arg)
{
	const struct device *dev = (const struct device *)arg;
	struct temp_nrf5_data *data = dev->data;
    1ebe:	6900      	ldr	r0, [r0, #16]
    1ec0:	2200      	movs	r2, #0
    1ec2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    1ec6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    1eca:	f001 bcd7 	b.w	387c <z_impl_k_sem_give>
    1ece:	bf00      	nop
    1ed0:	4000c000 	.word	0x4000c000

00001ed4 <temp_nrf5_sample_fetch>:
{
    1ed4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct temp_nrf5_data *data = dev->data;
    1ed6:	6905      	ldr	r5, [r0, #16]
	if (data->clk_mgr == NULL) {
    1ed8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1eda:	b363      	cbz	r3, 1f36 <temp_nrf5_sample_fetch+0x62>
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
    1edc:	2939      	cmp	r1, #57	; 0x39
    1ede:	d001      	beq.n	1ee4 <temp_nrf5_sample_fetch+0x10>
    1ee0:	290c      	cmp	r1, #12
    1ee2:	d12b      	bne.n	1f3c <temp_nrf5_sample_fetch+0x68>
	k_mutex_lock(&data->mutex, K_FOREVER);
    1ee4:	f105 0610 	add.w	r6, r5, #16
	return z_impl_k_mutex_lock(mutex, timeout);
    1ee8:	f04f 32ff 	mov.w	r2, #4294967295
    1eec:	f04f 33ff 	mov.w	r3, #4294967295
    1ef0:	4630      	mov	r0, r6
    1ef2:	f001 fc0d 	bl	3710 <z_impl_k_mutex_lock>
    1ef6:	4b13      	ldr	r3, [pc, #76]	; (1f44 <temp_nrf5_sample_fetch+0x70>)
    1ef8:	9301      	str	r3, [sp, #4]
	r = onoff_request(data->clk_mgr, &cli);
    1efa:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    1efc:	2303      	movs	r3, #3
    1efe:	2400      	movs	r4, #0
    1f00:	4669      	mov	r1, sp
    1f02:	9403      	str	r4, [sp, #12]
    1f04:	9302      	str	r3, [sp, #8]
    1f06:	f002 fc40 	bl	478a <onoff_request>
	return z_impl_k_sem_take(sem, timeout);
    1f0a:	f04f 32ff 	mov.w	r2, #4294967295
    1f0e:	f04f 33ff 	mov.w	r3, #4294967295
    1f12:	4628      	mov	r0, r5
    1f14:	f001 fcd2 	bl	38bc <z_impl_k_sem_take>
	r = onoff_release(data->clk_mgr);
    1f18:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    1f1a:	f002 fc8e 	bl	483a <onoff_release>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
}

NRF_STATIC_INLINE int32_t nrf_temp_result_get(NRF_TEMP_Type const * p_reg)
{
    int32_t raw_measurement = p_reg->TEMP;
    1f1e:	4b0a      	ldr	r3, [pc, #40]	; (1f48 <temp_nrf5_sample_fetch+0x74>)
    1f20:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
	data->sample = nrf_temp_result_get(NRF_TEMP);
    1f24:	626a      	str	r2, [r5, #36]	; 0x24
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
    1f26:	2201      	movs	r2, #1
    1f28:	605a      	str	r2, [r3, #4]
	return z_impl_k_mutex_unlock(mutex);
    1f2a:	4630      	mov	r0, r6
    1f2c:	f001 fc6a 	bl	3804 <z_impl_k_mutex_unlock>
	return 0;
    1f30:	4620      	mov	r0, r4
}
    1f32:	b004      	add	sp, #16
    1f34:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
    1f36:	f06f 000a 	mvn.w	r0, #10
    1f3a:	e7fa      	b.n	1f32 <temp_nrf5_sample_fetch+0x5e>
		return -ENOTSUP;
    1f3c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    1f40:	e7f7      	b.n	1f32 <temp_nrf5_sample_fetch+0x5e>
    1f42:	bf00      	nop
    1f44:	00001e85 	.word	0x00001e85
    1f48:	4000c000 	.word	0x4000c000

00001f4c <temp_nrf5_init>:
	.sample_fetch = temp_nrf5_sample_fetch,
	.channel_get = temp_nrf5_channel_get,
};

static int temp_nrf5_init(const struct device *dev)
{
    1f4c:	b510      	push	{r4, lr}
	struct temp_nrf5_data *data = dev->data;
    1f4e:	6904      	ldr	r4, [r0, #16]

	/* A null clk_mgr indicates sensor has not been initialized */
	data->clk_mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
    1f50:	2000      	movs	r0, #0
    1f52:	f7ff fd1d 	bl	1990 <z_nrf_clock_control_get_onoff>
	data->clk_mgr =
    1f56:	62a0      	str	r0, [r4, #40]	; 0x28
	return z_impl_k_sem_init(sem, initial_count, limit);
    1f58:	f04f 32ff 	mov.w	r2, #4294967295
    1f5c:	2100      	movs	r1, #0
    1f5e:	4620      	mov	r0, r4
    1f60:	f003 f802 	bl	4f68 <z_impl_k_sem_init>
	return z_impl_k_mutex_init(mutex);
    1f64:	f104 0010 	add.w	r0, r4, #16
    1f68:	f002 fff7 	bl	4f5a <z_impl_k_mutex_init>
	__ASSERT_NO_MSG(data->clk_mgr);

	k_sem_init(&data->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	k_mutex_init(&data->mutex);

	IRQ_CONNECT(
    1f6c:	2200      	movs	r2, #0
    1f6e:	2101      	movs	r1, #1
    1f70:	200c      	movs	r0, #12
    1f72:	f7ff f89b 	bl	10ac <z_arm_irq_priority_set>
		DT_INST_IRQN(0),
		DT_INST_IRQ(0, priority),
		temp_nrf5_isr,
		DEVICE_DT_INST_GET(0),
		0);
	irq_enable(DT_INST_IRQN(0));
    1f76:	200c      	movs	r0, #12
    1f78:	f7ff f87c 	bl	1074 <arch_irq_enable>
    p_reg->INTENSET = mask;
    1f7c:	4b02      	ldr	r3, [pc, #8]	; (1f88 <temp_nrf5_init+0x3c>)
    1f7e:	2201      	movs	r2, #1
    1f80:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	nrf_temp_int_enable(NRF_TEMP, NRF_TEMP_INT_DATARDY_MASK);

	return 0;
}
    1f84:	2000      	movs	r0, #0
    1f86:	bd10      	pop	{r4, pc}
    1f88:	4000c000 	.word	0x4000c000

00001f8c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    1f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    1f8e:	794b      	ldrb	r3, [r1, #5]
    1f90:	2b01      	cmp	r3, #1
    1f92:	d026      	beq.n	1fe2 <uarte_nrfx_configure+0x56>
    1f94:	2b03      	cmp	r3, #3
    1f96:	d121      	bne.n	1fdc <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    1f98:	2510      	movs	r5, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    1f9a:	798b      	ldrb	r3, [r1, #6]
    1f9c:	2b03      	cmp	r3, #3
    1f9e:	d11d      	bne.n	1fdc <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    1fa0:	79ce      	ldrb	r6, [r1, #7]
    1fa2:	b10e      	cbz	r6, 1fa8 <uarte_nrfx_configure+0x1c>
    1fa4:	2e01      	cmp	r6, #1
    1fa6:	d119      	bne.n	1fdc <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    1fa8:	790a      	ldrb	r2, [r1, #4]
    1faa:	b112      	cbz	r2, 1fb2 <uarte_nrfx_configure+0x26>
    1fac:	2a02      	cmp	r2, #2
    1fae:	d115      	bne.n	1fdc <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    1fb0:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    1fb2:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    1fb4:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
    1fb6:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    1fba:	6827      	ldr	r7, [r4, #0]
	switch (baudrate) {
    1fbc:	d067      	beq.n	208e <uarte_nrfx_configure+0x102>
    1fbe:	d82d      	bhi.n	201c <uarte_nrfx_configure+0x90>
    1fc0:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    1fc4:	d066      	beq.n	2094 <uarte_nrfx_configure+0x108>
    1fc6:	d816      	bhi.n	1ff6 <uarte_nrfx_configure+0x6a>
    1fc8:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    1fcc:	d064      	beq.n	2098 <uarte_nrfx_configure+0x10c>
    1fce:	d80a      	bhi.n	1fe6 <uarte_nrfx_configure+0x5a>
    1fd0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    1fd4:	d063      	beq.n	209e <uarte_nrfx_configure+0x112>
    1fd6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    1fda:	d063      	beq.n	20a4 <uarte_nrfx_configure+0x118>
		return -ENOTSUP;
    1fdc:	f06f 0085 	mvn.w	r0, #133	; 0x85
    1fe0:	e054      	b.n	208c <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
    1fe2:	2500      	movs	r5, #0
    1fe4:	e7d9      	b.n	1f9a <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    1fe6:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    1fea:	d05e      	beq.n	20aa <uarte_nrfx_configure+0x11e>
    1fec:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    1ff0:	d1f4      	bne.n	1fdc <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    1ff2:	4b38      	ldr	r3, [pc, #224]	; (20d4 <uarte_nrfx_configure+0x148>)
    1ff4:	e03c      	b.n	2070 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    1ff6:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    1ffa:	d059      	beq.n	20b0 <uarte_nrfx_configure+0x124>
    1ffc:	d807      	bhi.n	200e <uarte_nrfx_configure+0x82>
    1ffe:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    2002:	d057      	beq.n	20b4 <uarte_nrfx_configure+0x128>
    2004:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    2008:	d1e8      	bne.n	1fdc <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    200a:	4b33      	ldr	r3, [pc, #204]	; (20d8 <uarte_nrfx_configure+0x14c>)
    200c:	e030      	b.n	2070 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    200e:	f647 2412 	movw	r4, #31250	; 0x7a12
    2012:	42a3      	cmp	r3, r4
    2014:	d1e2      	bne.n	1fdc <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2016:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    201a:	e029      	b.n	2070 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    201c:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    2020:	d04a      	beq.n	20b8 <uarte_nrfx_configure+0x12c>
    2022:	d813      	bhi.n	204c <uarte_nrfx_configure+0xc0>
    2024:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    2028:	d049      	beq.n	20be <uarte_nrfx_configure+0x132>
    202a:	d809      	bhi.n	2040 <uarte_nrfx_configure+0xb4>
    202c:	f64d 24c0 	movw	r4, #56000	; 0xdac0
    2030:	42a3      	cmp	r3, r4
    2032:	d046      	beq.n	20c2 <uarte_nrfx_configure+0x136>
    2034:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    2038:	d1d0      	bne.n	1fdc <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    203a:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    203e:	e017      	b.n	2070 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2040:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    2044:	d1ca      	bne.n	1fdc <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    2046:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    204a:	e011      	b.n	2070 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    204c:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    2050:	d03a      	beq.n	20c8 <uarte_nrfx_configure+0x13c>
    2052:	d808      	bhi.n	2066 <uarte_nrfx_configure+0xda>
    2054:	4c21      	ldr	r4, [pc, #132]	; (20dc <uarte_nrfx_configure+0x150>)
    2056:	42a3      	cmp	r3, r4
    2058:	d039      	beq.n	20ce <uarte_nrfx_configure+0x142>
    205a:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    205e:	d1bd      	bne.n	1fdc <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    2060:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    2064:	e004      	b.n	2070 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2066:	4c1e      	ldr	r4, [pc, #120]	; (20e0 <uarte_nrfx_configure+0x154>)
    2068:	42a3      	cmp	r3, r4
    206a:	d1b7      	bne.n	1fdc <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    206c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    2070:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    2072:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	return config->uarte_regs;
    2076:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->hwfc;
    2078:	4335      	orrs	r5, r6
    207a:	681b      	ldr	r3, [r3, #0]
    207c:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    207e:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    2082:	c903      	ldmia	r1, {r0, r1}
    2084:	1d23      	adds	r3, r4, #4
    2086:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    208a:	2000      	movs	r0, #0
}
    208c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    208e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    2092:	e7ed      	b.n	2070 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    2094:	4b13      	ldr	r3, [pc, #76]	; (20e4 <uarte_nrfx_configure+0x158>)
    2096:	e7eb      	b.n	2070 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    2098:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    209c:	e7e8      	b.n	2070 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    209e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    20a2:	e7e5      	b.n	2070 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    20a4:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    20a8:	e7e2      	b.n	2070 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    20aa:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    20ae:	e7df      	b.n	2070 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    20b0:	4b0d      	ldr	r3, [pc, #52]	; (20e8 <uarte_nrfx_configure+0x15c>)
    20b2:	e7dd      	b.n	2070 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    20b4:	4b0d      	ldr	r3, [pc, #52]	; (20ec <uarte_nrfx_configure+0x160>)
    20b6:	e7db      	b.n	2070 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    20b8:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    20bc:	e7d8      	b.n	2070 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    20be:	4b0c      	ldr	r3, [pc, #48]	; (20f0 <uarte_nrfx_configure+0x164>)
    20c0:	e7d6      	b.n	2070 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    20c2:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    20c6:	e7d3      	b.n	2070 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    20c8:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    20cc:	e7d0      	b.n	2070 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    20ce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    20d2:	e7cd      	b.n	2070 <uarte_nrfx_configure+0xe4>
    20d4:	0013b000 	.word	0x0013b000
    20d8:	004ea000 	.word	0x004ea000
    20dc:	0003d090 	.word	0x0003d090
    20e0:	000f4240 	.word	0x000f4240
    20e4:	00275000 	.word	0x00275000
    20e8:	0075c000 	.word	0x0075c000
    20ec:	003af000 	.word	0x003af000
    20f0:	013a9000 	.word	0x013a9000

000020f4 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    20f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    20f8:	4680      	mov	r8, r0
    20fa:	2200      	movs	r2, #0
    20fc:	2101      	movs	r1, #1
    20fe:	2002      	movs	r0, #2
    2100:	f7fe ffd4 	bl	10ac <z_arm_irq_priority_set>
    2104:	2002      	movs	r0, #2
    2106:	f7fe ffb5 	bl	1074 <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
    210a:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
    210e:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
    2112:	683c      	ldr	r4, [r7, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    2114:	2100      	movs	r1, #0
    2116:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
    211a:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    211e:	f8d7 900c 	ldr.w	r9, [r7, #12]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    2122:	aa01      	add	r2, sp, #4
    2124:	4648      	mov	r0, r9
    2126:	f002 fde0 	bl	4cea <pinctrl_lookup_state>
	if (ret < 0) {
    212a:	1e05      	subs	r5, r0, #0
    212c:	db54      	blt.n	21d8 <uarte_0_init+0xe4>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    212e:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    2130:	f8d9 2000 	ldr.w	r2, [r9]
    2134:	7919      	ldrb	r1, [r3, #4]
    2136:	6818      	ldr	r0, [r3, #0]
    2138:	f002 fded 	bl	4d16 <pinctrl_configure_pins>
	if (err < 0) {
    213c:	1e05      	subs	r5, r0, #0
    213e:	db4b      	blt.n	21d8 <uarte_0_init+0xe4>
	err = uarte_nrfx_configure(dev, &data->uart_config);
    2140:	1d31      	adds	r1, r6, #4
    2142:	4640      	mov	r0, r8
    2144:	f7ff ff22 	bl	1f8c <uarte_nrfx_configure>
	if (err) {
    2148:	4605      	mov	r5, r0
    214a:	2800      	cmp	r0, #0
    214c:	d144      	bne.n	21d8 <uarte_0_init+0xe4>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    214e:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    2150:	0799      	lsls	r1, r3, #30
    2152:	d51a      	bpl.n	218a <uarte_0_init+0x96>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    2154:	f106 0018 	add.w	r0, r6, #24
    2158:	f001 f912 	bl	3380 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    215c:	4b22      	ldr	r3, [pc, #136]	; (21e8 <uarte_0_init+0xf4>)
    215e:	4298      	cmp	r0, r3
    2160:	d13e      	bne.n	21e0 <uarte_0_init+0xec>
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    2162:	7e33      	ldrb	r3, [r6, #24]
    2164:	00db      	lsls	r3, r3, #3
    2166:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    216a:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    216e:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    2172:	f504 7190 	add.w	r1, r4, #288	; 0x120
    2176:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    217a:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    217e:	7e32      	ldrb	r2, [r6, #24]
    2180:	2301      	movs	r3, #1
    2182:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
    2184:	4a19      	ldr	r2, [pc, #100]	; (21ec <uarte_0_init+0xf8>)
    2186:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    218a:	2308      	movs	r3, #8
    218c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    2190:	7a3b      	ldrb	r3, [r7, #8]
    2192:	b953      	cbnz	r3, 21aa <uarte_0_init+0xb6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2194:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    2198:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    219c:	6973      	ldr	r3, [r6, #20]
    219e:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    21a2:	2301      	movs	r3, #1
    21a4:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    21a8:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    21aa:	687b      	ldr	r3, [r7, #4]
    21ac:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    21ae:	bf5c      	itt	pl
    21b0:	f44f 7380 	movpl.w	r3, #256	; 0x100
    21b4:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    21b8:	687b      	ldr	r3, [r7, #4]
    21ba:	06db      	lsls	r3, r3, #27
    21bc:	bf44      	itt	mi
    21be:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    21c2:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    21c6:	6933      	ldr	r3, [r6, #16]
    21c8:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    21cc:	2300      	movs	r3, #0
    21ce:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    21d2:	2301      	movs	r3, #1
    21d4:	60a3      	str	r3, [r4, #8]
    21d6:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    21d8:	4628      	mov	r0, r5
    21da:	b003      	add	sp, #12
    21dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    21e0:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
    21e4:	e7f8      	b.n	21d8 <uarte_0_init+0xe4>
    21e6:	bf00      	nop
    21e8:	0bad0000 	.word	0x0bad0000
    21ec:	4001f000 	.word	0x4001f000

000021f0 <uarte_nrfx_poll_out>:
{
    21f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21f2:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
    21f4:	6907      	ldr	r7, [r0, #16]
{
    21f6:	460d      	mov	r5, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    21f8:	f002 fe95 	bl	4f26 <k_is_in_isr>
    21fc:	b9b0      	cbnz	r0, 222c <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
    21fe:	4b2e      	ldr	r3, [pc, #184]	; (22b8 <uarte_nrfx_poll_out+0xc8>)
    2200:	781b      	ldrb	r3, [r3, #0]
    2202:	b19b      	cbz	r3, 222c <uarte_nrfx_poll_out+0x3c>
{
    2204:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    2206:	6860      	ldr	r0, [r4, #4]
    2208:	f002 fd25 	bl	4c56 <is_tx_ready.isra.0>
    220c:	bb00      	cbnz	r0, 2250 <uarte_nrfx_poll_out+0x60>
    220e:	2001      	movs	r0, #1
    2210:	f002 fe07 	bl	4e22 <nrfx_busy_wait>
    2214:	3e01      	subs	r6, #1
    2216:	d1f6      	bne.n	2206 <uarte_nrfx_poll_out+0x16>
	return z_impl_k_sleep(timeout);
    2218:	2100      	movs	r1, #0
    221a:	2021      	movs	r0, #33	; 0x21
    221c:	f001 ff72 	bl	4104 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2220:	e7f0      	b.n	2204 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    2222:	f386 8811 	msr	BASEPRI, r6
    2226:	f3bf 8f6f 	isb	sy
}
    222a:	e7f5      	b.n	2218 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
    222c:	f04f 0320 	mov.w	r3, #32
    2230:	f3ef 8611 	mrs	r6, BASEPRI
    2234:	f383 8812 	msr	BASEPRI_MAX, r3
    2238:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    223c:	6860      	ldr	r0, [r4, #4]
    223e:	4631      	mov	r1, r6
    2240:	f002 fd09 	bl	4c56 <is_tx_ready.isra.0>
    2244:	b990      	cbnz	r0, 226c <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
    2246:	f386 8811 	msr	BASEPRI, r6
    224a:	f3bf 8f6f 	isb	sy
}
    224e:	e7ed      	b.n	222c <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
    2250:	f04f 0320 	mov.w	r3, #32
    2254:	f3ef 8611 	mrs	r6, BASEPRI
    2258:	f383 8812 	msr	BASEPRI_MAX, r3
    225c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    2260:	6860      	ldr	r0, [r4, #4]
    2262:	4631      	mov	r1, r6
    2264:	f002 fcf7 	bl	4c56 <is_tx_ready.isra.0>
    2268:	2800      	cmp	r0, #0
    226a:	d0da      	beq.n	2222 <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
    226c:	693b      	ldr	r3, [r7, #16]
    226e:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
    2270:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2272:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
    2274:	6813      	ldr	r3, [r2, #0]
    2276:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    227a:	2001      	movs	r0, #1
    227c:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2280:	2000      	movs	r0, #0
    2282:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    2286:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
    228a:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    228e:	6852      	ldr	r2, [r2, #4]
    2290:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
    2294:	06d2      	lsls	r2, r2, #27
    2296:	d508      	bpl.n	22aa <uarte_nrfx_poll_out+0xba>
	return config->uarte_regs;
    2298:	6862      	ldr	r2, [r4, #4]
    229a:	6812      	ldr	r2, [r2, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    229c:	2008      	movs	r0, #8
    229e:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
    22a2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    22a6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    22aa:	2201      	movs	r2, #1
    22ac:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    22ae:	f381 8811 	msr	BASEPRI, r1
    22b2:	f3bf 8f6f 	isb	sy
}
    22b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    22b8:	200003fa 	.word	0x200003fa

000022bc <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    22bc:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    22be:	2301      	movs	r3, #1
    22c0:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    22c2:	4a0e      	ldr	r2, [pc, #56]	; (22fc <compare_int_lock+0x40>)
    22c4:	f3bf 8f5b 	dmb	ish
    22c8:	43dc      	mvns	r4, r3
    22ca:	e852 1f00 	ldrex	r1, [r2]
    22ce:	ea01 0504 	and.w	r5, r1, r4
    22d2:	e842 5600 	strex	r6, r5, [r2]
    22d6:	2e00      	cmp	r6, #0
    22d8:	d1f7      	bne.n	22ca <compare_int_lock+0xe>
    22da:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    22de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    22e2:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    22e4:	4806      	ldr	r0, [pc, #24]	; (2300 <compare_int_lock+0x44>)
    22e6:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    22ea:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    22ee:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    22f2:	420b      	tst	r3, r1
}
    22f4:	bf14      	ite	ne
    22f6:	2001      	movne	r0, #1
    22f8:	2000      	moveq	r0, #0
    22fa:	bd70      	pop	{r4, r5, r6, pc}
    22fc:	200003a4 	.word	0x200003a4
    2300:	40011000 	.word	0x40011000

00002304 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    2304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    2306:	491b      	ldr	r1, [pc, #108]	; (2374 <sys_clock_timeout_handler+0x70>)
{
    2308:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    230a:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    230e:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    2310:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    2314:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    2318:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    231a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    231e:	d30f      	bcc.n	2340 <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    2320:	f002 f868 	bl	43f4 <sys_clock_announce>
    return p_reg->CC[ch];
    2324:	00a3      	lsls	r3, r4, #2
    2326:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    232a:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    232e:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    2332:	4295      	cmp	r5, r2
    2334:	d11d      	bne.n	2372 <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
    2336:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    233a:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
    233e:	e012      	b.n	2366 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    2340:	4b0d      	ldr	r3, [pc, #52]	; (2378 <sys_clock_timeout_handler+0x74>)
    2342:	681b      	ldr	r3, [r3, #0]
    2344:	0a1a      	lsrs	r2, r3, #8
    2346:	061b      	lsls	r3, r3, #24
    2348:	195e      	adds	r6, r3, r5
    234a:	4b0c      	ldr	r3, [pc, #48]	; (237c <sys_clock_timeout_handler+0x78>)
    234c:	f142 0700 	adc.w	r7, r2, #0
    2350:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    2354:	f002 f84e 	bl	43f4 <sys_clock_announce>
    return p_reg->CC[ch];
    2358:	4a09      	ldr	r2, [pc, #36]	; (2380 <sys_clock_timeout_handler+0x7c>)
    235a:	f504 73a8 	add.w	r3, r4, #336	; 0x150
    235e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
    2362:	429d      	cmp	r5, r3
    2364:	d105      	bne.n	2372 <sys_clock_timeout_handler+0x6e>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    2366:	4a06      	ldr	r2, [pc, #24]	; (2380 <sys_clock_timeout_handler+0x7c>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2368:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    236c:	40a3      	lsls	r3, r4
    236e:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    2372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2374:	200000f8 	.word	0x200000f8
    2378:	200003a8 	.word	0x200003a8
    237c:	20000100 	.word	0x20000100
    2380:	40011000 	.word	0x40011000

00002384 <compare_int_unlock>:
	if (key) {
    2384:	b311      	cbz	r1, 23cc <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2386:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    238a:	2301      	movs	r3, #1
    238c:	4a10      	ldr	r2, [pc, #64]	; (23d0 <compare_int_unlock+0x4c>)
    238e:	4083      	lsls	r3, r0
    2390:	e852 cf00 	ldrex	ip, [r2]
    2394:	ea4c 0c03 	orr.w	ip, ip, r3
    2398:	e842 c100 	strex	r1, ip, [r2]
    239c:	2900      	cmp	r1, #0
    239e:	d1f7      	bne.n	2390 <compare_int_unlock+0xc>
    23a0:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    23a4:	4a0b      	ldr	r2, [pc, #44]	; (23d4 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    23a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    23aa:	4083      	lsls	r3, r0
    23ac:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    23b0:	4b09      	ldr	r3, [pc, #36]	; (23d8 <compare_int_unlock+0x54>)
    23b2:	f3bf 8f5b 	dmb	ish
    23b6:	681b      	ldr	r3, [r3, #0]
    23b8:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    23bc:	40c3      	lsrs	r3, r0
    23be:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    23c0:	bf42      	ittt	mi
    23c2:	4b06      	ldrmi	r3, [pc, #24]	; (23dc <compare_int_unlock+0x58>)
    23c4:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    23c8:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    23cc:	4770      	bx	lr
    23ce:	bf00      	nop
    23d0:	200003a4 	.word	0x200003a4
    23d4:	40011000 	.word	0x40011000
    23d8:	200003a0 	.word	0x200003a0
    23dc:	e000e100 	.word	0xe000e100

000023e0 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    23e0:	4b0d      	ldr	r3, [pc, #52]	; (2418 <z_nrf_rtc_timer_read+0x38>)
    23e2:	6818      	ldr	r0, [r3, #0]
    23e4:	0a01      	lsrs	r1, r0, #8
    23e6:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    23e8:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    23ec:	4b0b      	ldr	r3, [pc, #44]	; (241c <z_nrf_rtc_timer_read+0x3c>)
    23ee:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    23f2:	1818      	adds	r0, r3, r0
    23f4:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    23f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    23fc:	d20a      	bcs.n	2414 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    23fe:	4b08      	ldr	r3, [pc, #32]	; (2420 <z_nrf_rtc_timer_read+0x40>)
    2400:	e9d3 2300 	ldrd	r2, r3, [r3]
    2404:	4290      	cmp	r0, r2
    2406:	eb71 0303 	sbcs.w	r3, r1, r3
    240a:	d203      	bcs.n	2414 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    240c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    2410:	f141 0100 	adc.w	r1, r1, #0
}
    2414:	4770      	bx	lr
    2416:	bf00      	nop
    2418:	200003a8 	.word	0x200003a8
    241c:	40011000 	.word	0x40011000
    2420:	20000100 	.word	0x20000100

00002424 <compare_set>:
{
    2424:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2428:	4614      	mov	r4, r2
    242a:	461d      	mov	r5, r3
    242c:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
    242e:	f7ff ff45 	bl	22bc <compare_int_lock>
    2432:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    2434:	f7ff ffd4 	bl	23e0 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    2438:	42a0      	cmp	r0, r4
    243a:	eb71 0305 	sbcs.w	r3, r1, r5
    243e:	d27a      	bcs.n	2536 <compare_set+0x112>
		if (target_time - curr_time > COUNTER_SPAN) {
    2440:	4b46      	ldr	r3, [pc, #280]	; (255c <compare_set+0x138>)
    2442:	1a20      	subs	r0, r4, r0
    2444:	eb65 0101 	sbc.w	r1, r5, r1
    2448:	4298      	cmp	r0, r3
    244a:	f171 0100 	sbcs.w	r1, r1, #0
    244e:	f080 8081 	bcs.w	2554 <compare_set+0x130>
		if (target_time != cc_data[chan].target_time) {
    2452:	4b43      	ldr	r3, [pc, #268]	; (2560 <compare_set+0x13c>)
    2454:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    2458:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    245c:	429d      	cmp	r5, r3
    245e:	bf08      	it	eq
    2460:	4294      	cmpeq	r4, r2
    2462:	d053      	beq.n	250c <compare_set+0xe8>
    2464:	ea4f 0a87 	mov.w	sl, r7, lsl #2
    2468:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    246c:	f107 0950 	add.w	r9, r7, #80	; 0x50
    2470:	f50a 3a88 	add.w	sl, sl, #69632	; 0x11000
    2474:	ea4f 0989 	mov.w	r9, r9, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2478:	fa1f f989 	uxth.w	r9, r9
	return absolute_time & COUNTER_MAX;
    247c:	f024 487f 	bic.w	r8, r4, #4278190080	; 0xff000000
    2480:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2484:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    return p_reg->CC[ch];
    2488:	f8da 0540 	ldr.w	r0, [sl, #1344]	; 0x540
     return p_reg->COUNTER;
    248c:	4a35      	ldr	r2, [pc, #212]	; (2564 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    248e:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    2492:	40bb      	lsls	r3, r7
	uint32_t cc_val = abs_val & COUNTER_MAX;
    2494:	4646      	mov	r6, r8
     return p_reg->COUNTER;
    2496:	f8d2 b504 	ldr.w	fp, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    249a:	eba0 000b 	sub.w	r0, r0, fp
    249e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    24a2:	f02b 417f 	bic.w	r1, fp, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    24a6:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    24a8:	f8ca 1540 	str.w	r1, [sl, #1344]	; 0x540
    24ac:	d105      	bne.n	24ba <compare_set+0x96>
    24ae:	9301      	str	r3, [sp, #4]
	z_impl_k_busy_wait(usec_to_wait);
    24b0:	2013      	movs	r0, #19
    24b2:	f002 fecc 	bl	524e <z_impl_k_busy_wait>
    24b6:	4a2b      	ldr	r2, [pc, #172]	; (2564 <compare_set+0x140>)
    24b8:	9b01      	ldr	r3, [sp, #4]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    24ba:	f10b 0c02 	add.w	ip, fp, #2
	return (a - b) & COUNTER_MAX;
    24be:	eba6 000c 	sub.w	r0, r6, ip
    24c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    24c6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    24ca:	bf88      	it	hi
    24cc:	4666      	movhi	r6, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    24ce:	2000      	movs	r0, #0
    24d0:	f8c9 0000 	str.w	r0, [r9]
    24d4:	f8d9 0000 	ldr.w	r0, [r9]
    p_reg->EVTENSET = mask;
    24d8:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    24dc:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    24e0:	f8ca 0540 	str.w	r0, [sl, #1344]	; 0x540
     return p_reg->COUNTER;
    24e4:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	} while ((now2 != now) &&
    24e8:	4583      	cmp	fp, r0
    24ea:	d006      	beq.n	24fa <compare_set+0xd6>
	return (a - b) & COUNTER_MAX;
    24ec:	1a30      	subs	r0, r6, r0
    24ee:	3802      	subs	r0, #2
    24f0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    24f4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    24f8:	d81b      	bhi.n	2532 <compare_set+0x10e>
	return (a - b) & COUNTER_MAX;
    24fa:	eba6 0608 	sub.w	r6, r6, r8
    24fe:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    2502:	1936      	adds	r6, r6, r4
    2504:	f145 0300 	adc.w	r3, r5, #0
    2508:	4634      	mov	r4, r6
    250a:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
    250c:	4914      	ldr	r1, [pc, #80]	; (2560 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    250e:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    2510:	013b      	lsls	r3, r7, #4
    2512:	eb01 1207 	add.w	r2, r1, r7, lsl #4
	cc_data[chan].callback = handler;
    2516:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    2518:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    251a:	6053      	str	r3, [r2, #4]
	cc_data[chan].target_time = target_time;
    251c:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
    2520:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    2522:	4638      	mov	r0, r7
    2524:	9900      	ldr	r1, [sp, #0]
    2526:	f7ff ff2d 	bl	2384 <compare_int_unlock>
}
    252a:	4620      	mov	r0, r4
    252c:	b003      	add	sp, #12
    252e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2532:	4630      	mov	r0, r6
    2534:	e7af      	b.n	2496 <compare_set+0x72>
		atomic_or(&force_isr_mask, BIT(chan));
    2536:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2538:	4a0b      	ldr	r2, [pc, #44]	; (2568 <compare_set+0x144>)
    253a:	f3bf 8f5b 	dmb	ish
    253e:	40bb      	lsls	r3, r7
    2540:	e852 0f00 	ldrex	r0, [r2]
    2544:	4318      	orrs	r0, r3
    2546:	e842 0100 	strex	r1, r0, [r2]
    254a:	2900      	cmp	r1, #0
    254c:	d1f8      	bne.n	2540 <compare_set+0x11c>
    254e:	f3bf 8f5b 	dmb	ish
    2552:	e7db      	b.n	250c <compare_set+0xe8>
			return -EINVAL;
    2554:	f06f 0415 	mvn.w	r4, #21
    2558:	e7e3      	b.n	2522 <compare_set+0xfe>
    255a:	bf00      	nop
    255c:	01000001 	.word	0x01000001
    2560:	200000e8 	.word	0x200000e8
    2564:	40011000 	.word	0x40011000
    2568:	200003a0 	.word	0x200003a0

0000256c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    256c:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    256e:	4b19      	ldr	r3, [pc, #100]	; (25d4 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    2570:	4d19      	ldr	r5, [pc, #100]	; (25d8 <sys_clock_driver_init+0x6c>)
    2572:	2400      	movs	r4, #0
    2574:	f04f 30ff 	mov.w	r0, #4294967295
    2578:	f04f 31ff 	mov.w	r1, #4294967295
    257c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    2580:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    2584:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2588:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    258c:	4b13      	ldr	r3, [pc, #76]	; (25dc <sys_clock_driver_init+0x70>)
    258e:	2602      	movs	r6, #2
    2590:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    2594:	2101      	movs	r1, #1
    2596:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    259a:	2011      	movs	r0, #17
    259c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    25a0:	4622      	mov	r2, r4
    25a2:	f7fe fd83 	bl	10ac <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    25a6:	2011      	movs	r0, #17
    25a8:	f7fe fd64 	bl	1074 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    25ac:	4a0c      	ldr	r2, [pc, #48]	; (25e0 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    25ae:	2301      	movs	r3, #1
    25b0:	60ab      	str	r3, [r5, #8]
    25b2:	602b      	str	r3, [r5, #0]
    25b4:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    25b6:	4b0b      	ldr	r3, [pc, #44]	; (25e4 <sys_clock_driver_init+0x78>)
    25b8:	4a0b      	ldr	r2, [pc, #44]	; (25e8 <sys_clock_driver_init+0x7c>)
    25ba:	9300      	str	r3, [sp, #0]
    25bc:	9401      	str	r4, [sp, #4]
    25be:	2300      	movs	r3, #0
    25c0:	4620      	mov	r0, r4
    25c2:	f7ff ff2f 	bl	2424 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    25c6:	4630      	mov	r0, r6
    25c8:	f7ff f9ea 	bl	19a0 <z_nrf_clock_control_lf_on>

	return 0;
}
    25cc:	4620      	mov	r0, r4
    25ce:	b002      	add	sp, #8
    25d0:	bd70      	pop	{r4, r5, r6, pc}
    25d2:	bf00      	nop
    25d4:	200000e8 	.word	0x200000e8
    25d8:	40011000 	.word	0x40011000
    25dc:	e000e100 	.word	0xe000e100
    25e0:	200003a4 	.word	0x200003a4
    25e4:	00002305 	.word	0x00002305
    25e8:	007fffff 	.word	0x007fffff

000025ec <rtc_nrf_isr>:
{
    25ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    25f0:	4c33      	ldr	r4, [pc, #204]	; (26c0 <rtc_nrf_isr+0xd4>)
    25f2:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    25f6:	079a      	lsls	r2, r3, #30
    25f8:	d50b      	bpl.n	2612 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    25fa:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    25fe:	b143      	cbz	r3, 2612 <rtc_nrf_isr+0x26>
		overflow_cnt++;
    2600:	4a30      	ldr	r2, [pc, #192]	; (26c4 <rtc_nrf_isr+0xd8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2602:	2300      	movs	r3, #0
    2604:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    2608:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    260c:	6813      	ldr	r3, [r2, #0]
    260e:	3301      	adds	r3, #1
    2610:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    2612:	f04f 0320 	mov.w	r3, #32
    2616:	f3ef 8211 	mrs	r2, BASEPRI
    261a:	f383 8812 	msr	BASEPRI_MAX, r3
    261e:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    2622:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    2626:	03db      	lsls	r3, r3, #15
    2628:	d529      	bpl.n	267e <rtc_nrf_isr+0x92>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    262a:	f3bf 8f5b 	dmb	ish
    262e:	4b26      	ldr	r3, [pc, #152]	; (26c8 <rtc_nrf_isr+0xdc>)
    2630:	e853 1f00 	ldrex	r1, [r3]
    2634:	f021 0001 	bic.w	r0, r1, #1
    2638:	e843 0500 	strex	r5, r0, [r3]
    263c:	2d00      	cmp	r5, #0
    263e:	d1f7      	bne.n	2630 <rtc_nrf_isr+0x44>
    2640:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    2644:	b911      	cbnz	r1, 264c <rtc_nrf_isr+0x60>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2646:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    264a:	b1c3      	cbz	r3, 267e <rtc_nrf_isr+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    264c:	2500      	movs	r5, #0
    264e:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    2652:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
	__asm__ volatile(
    2656:	f382 8811 	msr	BASEPRI, r2
    265a:	f3bf 8f6f 	isb	sy
		curr_time = z_nrf_rtc_timer_read();
    265e:	f7ff febf 	bl	23e0 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    2662:	f04f 0320 	mov.w	r3, #32
    2666:	f3ef 8211 	mrs	r2, BASEPRI
    266a:	f383 8812 	msr	BASEPRI_MAX, r3
    266e:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    2672:	4b16      	ldr	r3, [pc, #88]	; (26cc <rtc_nrf_isr+0xe0>)
    2674:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    2678:	42b0      	cmp	r0, r6
    267a:	41b9      	sbcs	r1, r7
    267c:	d206      	bcs.n	268c <rtc_nrf_isr+0xa0>
	__asm__ volatile(
    267e:	f382 8811 	msr	BASEPRI, r2
    2682:	f3bf 8f6f 	isb	sy
}
    2686:	b003      	add	sp, #12
    2688:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    268c:	f04f 38ff 	mov.w	r8, #4294967295
    2690:	f04f 39ff 	mov.w	r9, #4294967295
			user_context = cc_data[chan].user_context;
    2694:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    2698:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    269c:	601d      	str	r5, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    269e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    26a2:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    26a6:	f382 8811 	msr	BASEPRI, r2
    26aa:	f3bf 8f6f 	isb	sy
		if (handler) {
    26ae:	2900      	cmp	r1, #0
    26b0:	d0e9      	beq.n	2686 <rtc_nrf_isr+0x9a>
			handler(chan, expire_time, user_context);
    26b2:	9000      	str	r0, [sp, #0]
    26b4:	4632      	mov	r2, r6
    26b6:	463b      	mov	r3, r7
    26b8:	4628      	mov	r0, r5
    26ba:	4788      	blx	r1
}
    26bc:	e7e3      	b.n	2686 <rtc_nrf_isr+0x9a>
    26be:	bf00      	nop
    26c0:	40011000 	.word	0x40011000
    26c4:	200003a8 	.word	0x200003a8
    26c8:	200003a0 	.word	0x200003a0
    26cc:	200000e8 	.word	0x200000e8

000026d0 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    26d0:	1c43      	adds	r3, r0, #1
{
    26d2:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    26d4:	d021      	beq.n	271a <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    26d6:	2801      	cmp	r0, #1
    26d8:	dd21      	ble.n	271e <sys_clock_set_timeout+0x4e>
    26da:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    26de:	da20      	bge.n	2722 <sys_clock_set_timeout+0x52>
    26e0:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    26e2:	f7ff fe7d 	bl	23e0 <z_nrf_rtc_timer_read>
    26e6:	4b10      	ldr	r3, [pc, #64]	; (2728 <sys_clock_set_timeout+0x58>)
    26e8:	e9d3 1300 	ldrd	r1, r3, [r3]
    26ec:	1a42      	subs	r2, r0, r1
		ticks = 0;
    26ee:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
	if (cyc > MAX_CYCLES) {
    26f2:	480e      	ldr	r0, [pc, #56]	; (272c <sys_clock_set_timeout+0x5c>)
		ticks = 0;
    26f4:	bf28      	it	cs
    26f6:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    26f8:	3201      	adds	r2, #1
    26fa:	4422      	add	r2, r4
	if (cyc > MAX_CYCLES) {
    26fc:	4282      	cmp	r2, r0
    26fe:	bf28      	it	cs
    2700:	4602      	movcs	r2, r0
	uint64_t target_time = cyc + last_count;
    2702:	1852      	adds	r2, r2, r1
    2704:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    2708:	4909      	ldr	r1, [pc, #36]	; (2730 <sys_clock_set_timeout+0x60>)
    270a:	9001      	str	r0, [sp, #4]
    270c:	9100      	str	r1, [sp, #0]
    270e:	f143 0300 	adc.w	r3, r3, #0
    2712:	f7ff fe87 	bl	2424 <compare_set>
}
    2716:	b002      	add	sp, #8
    2718:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    271a:	4804      	ldr	r0, [pc, #16]	; (272c <sys_clock_set_timeout+0x5c>)
    271c:	e7e0      	b.n	26e0 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    271e:	2400      	movs	r4, #0
    2720:	e7df      	b.n	26e2 <sys_clock_set_timeout+0x12>
    2722:	4c02      	ldr	r4, [pc, #8]	; (272c <sys_clock_set_timeout+0x5c>)
    2724:	e7dd      	b.n	26e2 <sys_clock_set_timeout+0x12>
    2726:	bf00      	nop
    2728:	200000f8 	.word	0x200000f8
    272c:	007fffff 	.word	0x007fffff
    2730:	00002305 	.word	0x00002305

00002734 <sys_clock_elapsed>:
{
    2734:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    2736:	f7ff fe53 	bl	23e0 <z_nrf_rtc_timer_read>
    273a:	4b02      	ldr	r3, [pc, #8]	; (2744 <sys_clock_elapsed+0x10>)
    273c:	681b      	ldr	r3, [r3, #0]
}
    273e:	1ac0      	subs	r0, r0, r3
    2740:	bd08      	pop	{r3, pc}
    2742:	bf00      	nop
    2744:	200000f8 	.word	0x200000f8

00002748 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
    2748:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    274c:	4905      	ldr	r1, [pc, #20]	; (2764 <__NVIC_SystemReset+0x1c>)
    274e:	4b06      	ldr	r3, [pc, #24]	; (2768 <__NVIC_SystemReset+0x20>)
    2750:	68ca      	ldr	r2, [r1, #12]
    2752:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2756:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2758:	60cb      	str	r3, [r1, #12]
    275a:	f3bf 8f4f 	dsb	sy
    __NOP();
    275e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2760:	e7fd      	b.n	275e <__NVIC_SystemReset+0x16>
    2762:	bf00      	nop
    2764:	e000ed00 	.word	0xe000ed00
    2768:	05fa0004 	.word	0x05fa0004

0000276c <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    276c:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    2770:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    2774:	2a06      	cmp	r2, #6
    2776:	d109      	bne.n	278c <nrf52_errata_16+0x20>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    2778:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    277c:	f3c3 1303 	ubfx	r3, r3, #4, #4
    2780:	3b03      	subs	r3, #3
    2782:	2b04      	cmp	r3, #4
    2784:	d802      	bhi.n	278c <nrf52_errata_16+0x20>
    2786:	4a02      	ldr	r2, [pc, #8]	; (2790 <nrf52_errata_16+0x24>)
    2788:	5cd0      	ldrb	r0, [r2, r3]
    278a:	4770      	bx	lr
                switch(var2)
                {
                    case 0x03ul:
                        return true;
                    case 0x04ul:
                        return false;
    278c:	2000      	movs	r0, #0
                }
            }
        #endif
        return false;
    #endif
}
    278e:	4770      	bx	lr
    2790:	000055c8 	.word	0x000055c8

00002794 <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2794:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    2798:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    279c:	2a06      	cmp	r2, #6
    279e:	d105      	bne.n	27ac <nrf52_configuration_249+0x18>
            {
                switch(var2)
    27a0:	3b03      	subs	r3, #3
    27a2:	2b04      	cmp	r3, #4
    27a4:	d80a      	bhi.n	27bc <nrf52_configuration_249+0x28>
    27a6:	4a06      	ldr	r2, [pc, #24]	; (27c0 <nrf52_configuration_249+0x2c>)
    27a8:	5cd0      	ldrb	r0, [r2, r3]
    27aa:	4770      	bx	lr
                        return true;
                }
            }
        #endif
        #if defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)
            if (var1 == 0x0A)
    27ac:	2a0a      	cmp	r2, #10
    27ae:	d103      	bne.n	27b8 <nrf52_configuration_249+0x24>
            {
                switch(var2)
    27b0:	2b02      	cmp	r3, #2
    27b2:	d803      	bhi.n	27bc <nrf52_configuration_249+0x28>
    27b4:	4a03      	ldr	r2, [pc, #12]	; (27c4 <nrf52_configuration_249+0x30>)
    27b6:	e7f7      	b.n	27a8 <nrf52_configuration_249+0x14>
                        return false;
    27b8:	2000      	movs	r0, #0
    27ba:	4770      	bx	lr
            if (var1 == 0x0A)
    27bc:	2001      	movs	r0, #1
                }
            }
        #endif
        return false;
    #endif
}
    27be:	4770      	bx	lr
    27c0:	000055b9 	.word	0x000055b9
    27c4:	000055b6 	.word	0x000055b6

000027c8 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    27c8:	4a02      	ldr	r2, [pc, #8]	; (27d4 <nvmc_wait+0xc>)
    27ca:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    27ce:	2b00      	cmp	r3, #0
    27d0:	d0fb      	beq.n	27ca <nvmc_wait+0x2>
}
    27d2:	4770      	bx	lr
    27d4:	4001e000 	.word	0x4001e000

000027d8 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    27d8:	b510      	push	{r4, lr}
            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    27da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    27de:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    27e2:	1c5a      	adds	r2, r3, #1
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    27e4:	bf04      	itt	eq
    27e6:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
    27ea:	f893 3fe0 	ldrbeq.w	r3, [r3, #4064]	; 0xfe0
            if (var1 == 0x06)
    27ee:	2b06      	cmp	r3, #6
    27f0:	d108      	bne.n	2804 <SystemInit+0x2c>

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    27f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    27f6:	4aad      	ldr	r2, [pc, #692]	; (2aac <SystemInit+0x2d4>)
    27f8:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
    27fc:	f3c3 2304 	ubfx	r3, r3, #8, #5
    2800:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
    2804:	f7ff ffb2 	bl	276c <nrf52_errata_16>
    2808:	b110      	cbz	r0, 2810 <SystemInit+0x38>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    280a:	4ba9      	ldr	r3, [pc, #676]	; (2ab0 <SystemInit+0x2d8>)
    280c:	4aa9      	ldr	r2, [pc, #676]	; (2ab4 <SystemInit+0x2dc>)
    280e:	675a      	str	r2, [r3, #116]	; 0x74
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
    2810:	f002 faf3 	bl	4dfa <nrf52_errata_136>
    2814:	b148      	cbz	r0, 282a <SystemInit+0x52>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    2816:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    281a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    281e:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
    2822:	f3c3 3342 	ubfx	r3, r3, #13, #3
    2826:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
    282a:	f7ff ff9f 	bl	276c <nrf52_errata_16>
    282e:	b130      	cbz	r0, 283e <SystemInit+0x66>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    2830:	4aa1      	ldr	r2, [pc, #644]	; (2ab8 <SystemInit+0x2e0>)
    2832:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    2836:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    283a:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    283e:	f002 fadc 	bl	4dfa <nrf52_errata_136>
    2842:	b140      	cbz	r0, 2856 <SystemInit+0x7e>
            NRF_CLOCK->EVENTS_DONE = 0;
    2844:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2848:	2200      	movs	r2, #0
    284a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    284e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    2852:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
    2856:	f7ff ff89 	bl	276c <nrf52_errata_16>
    285a:	b120      	cbz	r0, 2866 <SystemInit+0x8e>
            *(volatile uint32_t *)0x400005A0 = 0x3;
    285c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2860:	2203      	movs	r2, #3
    2862:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
    2866:	f7ff ff81 	bl	276c <nrf52_errata_16>
    286a:	b160      	cbz	r0, 2886 <SystemInit+0xae>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
    286c:	4b93      	ldr	r3, [pc, #588]	; (2abc <SystemInit+0x2e4>)
    286e:	2205      	movs	r2, #5
    2870:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
            *(volatile uint32_t *)0x40005688 = 0x00000001;
    2874:	2201      	movs	r2, #1
    2876:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            *(volatile uint32_t *)0x40005618 = 0x00000000;
    287a:	2200      	movs	r2, #0
    287c:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
    2880:	223f      	movs	r2, #63	; 0x3f
    2882:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    2886:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    288a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    288e:	1c54      	adds	r4, r2, #1
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    2890:	bf09      	itett	eq
    2892:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
                var2 = *(uint32_t *)0x10000134ul;
    2896:	f8d3 3134 	ldrne.w	r3, [r3, #308]	; 0x134
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    289a:	f893 2fe0 	ldrbeq.w	r2, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    289e:	f8d3 3fe8 	ldreq.w	r3, [r3, #4072]	; 0xfe8
    28a2:	bf08      	it	eq
    28a4:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            if (var1 == 0x06)
    28a8:	2a06      	cmp	r2, #6
    28aa:	d14e      	bne.n	294a <SystemInit+0x172>
                switch(var2)
    28ac:	3b03      	subs	r3, #3
    28ae:	2b04      	cmp	r3, #4
    28b0:	d803      	bhi.n	28ba <SystemInit+0xe2>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    28b2:	4a83      	ldr	r2, [pc, #524]	; (2ac0 <SystemInit+0x2e8>)
    28b4:	5cd3      	ldrb	r3, [r2, r3]
    28b6:	2b00      	cmp	r3, #0
    28b8:	d049      	beq.n	294e <SystemInit+0x176>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    28ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    28be:	4b81      	ldr	r3, [pc, #516]	; (2ac4 <SystemInit+0x2ec>)
    28c0:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    28c4:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    28c8:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    28cc:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    28d0:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    28d4:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    28d8:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    28dc:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    28e0:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    28e4:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    28e8:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    28ec:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    28f0:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    28f4:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    28f8:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    28fc:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    2900:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    2904:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    2908:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    290c:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    2910:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    2914:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    2918:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    291c:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    2920:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    2924:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    2928:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    292c:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    2930:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    2934:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    2938:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    293c:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    2940:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    2944:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    2948:	e001      	b.n	294e <SystemInit+0x176>
            if (var1 == 0x0A)
    294a:	2a0a      	cmp	r2, #10
    294c:	d0b5      	beq.n	28ba <SystemInit+0xe2>
            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    294e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2952:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    2956:	1c58      	adds	r0, r3, #1
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    2958:	bf04      	itt	eq
    295a:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
    295e:	f893 3fe0 	ldrbeq.w	r3, [r3, #4064]	; 0xfe0
            if (var1 == 0x06)
    2962:	2b06      	cmp	r3, #6
    2964:	d109      	bne.n	297a <SystemInit+0x1a2>

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
    2966:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    296a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    296e:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    2972:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    2976:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    297a:	f002 fa3e 	bl	4dfa <nrf52_errata_136>
    297e:	b148      	cbz	r0, 2994 <SystemInit+0x1bc>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    2980:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2984:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    2988:	07d1      	lsls	r1, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    298a:	bf44      	itt	mi
    298c:	f06f 0201 	mvnmi.w	r2, #1
    2990:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2994:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x06)
    2998:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    299c:	2a06      	cmp	r2, #6
    299e:	d10e      	bne.n	29be <SystemInit+0x1e6>
                switch(var2)
    29a0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    29a4:	3b03      	subs	r3, #3
    29a6:	2b04      	cmp	r3, #4
    29a8:	d802      	bhi.n	29b0 <SystemInit+0x1d8>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
    29aa:	4a47      	ldr	r2, [pc, #284]	; (2ac8 <SystemInit+0x2f0>)
    29ac:	5cd3      	ldrb	r3, [r2, r3]
    29ae:	b1d3      	cbz	r3, 29e6 <SystemInit+0x20e>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    29b0:	4a46      	ldr	r2, [pc, #280]	; (2acc <SystemInit+0x2f4>)
    29b2:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
    29b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    29ba:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    29be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x0A)
    29c2:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    29c6:	2a0a      	cmp	r2, #10
    29c8:	d10d      	bne.n	29e6 <SystemInit+0x20e>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    29ca:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    29ce:	2b02      	cmp	r3, #2
    29d0:	d809      	bhi.n	29e6 <SystemInit+0x20e>
    #endif

    #if NRF52_ERRATA_217_ENABLE_WORKAROUND
        /* Workaround for Errata 217 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_217()){
    29d2:	07da      	lsls	r2, r3, #31
            *(volatile uint32_t *)0x40000EE4ul |= 0x0000000Ful;
    29d4:	bf41      	itttt	mi
    29d6:	f04f 4280 	movmi.w	r2, #1073741824	; 0x40000000
    29da:	f8d2 3ee4 	ldrmi.w	r3, [r2, #3812]	; 0xee4
    29de:	f043 030f 	orrmi.w	r3, r3, #15
    29e2:	f8c2 3ee4 	strmi.w	r3, [r2, #3812]	; 0xee4
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    29e6:	f7ff fed5 	bl	2794 <nrf52_configuration_249>
    29ea:	b338      	cbz	r0, 2a3c <SystemInit+0x264>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    29ec:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
    29f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    29f4:	f8d1 2208 	ldr.w	r2, [r1, #520]	; 0x208
    29f8:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
    #endif

    nrf52_handle_approtect();

    #if NRF52_CONFIGURATION_249_ENABLE && (defined(NRF52805_XXAA) || defined(NRF52810_XXAA) || defined(NRF52811_XXAA))
        if (nrf52_configuration_249() && (NRF_UICR->NRFMDK[0] == 0xFFFFFFFF || NRF_UICR->NRFMDK[1] == 0xFFFFFFFF))
    29fc:	f7ff feca 	bl	2794 <nrf52_configuration_249>
    2a00:	b1e0      	cbz	r0, 2a3c <SystemInit+0x264>
    2a02:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
    2a06:	3301      	adds	r3, #1
    2a08:	d003      	beq.n	2a12 <SystemInit+0x23a>
    2a0a:	f8d1 3104 	ldr.w	r3, [r1, #260]	; 0x104
    2a0e:	3301      	adds	r3, #1
    2a10:	d114      	bne.n	2a3c <SystemInit+0x264>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2a12:	482f      	ldr	r0, [pc, #188]	; (2ad0 <SystemInit+0x2f8>)
    2a14:	2301      	movs	r3, #1
        {
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->NRFMDK[0] = 0;
    2a16:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2a1a:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
            NRF_UICR->NRFMDK[0] = 0;
    2a1e:	2100      	movs	r1, #0
    nvmc_wait();
    2a20:	f7ff fed2 	bl	27c8 <nvmc_wait>
            NRF_UICR->NRFMDK[0] = 0;
    2a24:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
            nvmc_wait();
    2a28:	f7ff fece 	bl	27c8 <nvmc_wait>
            NRF_UICR->NRFMDK[1] = 0;
    2a2c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
            nvmc_wait();
    2a30:	f7ff feca 	bl	27c8 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2a34:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    nvmc_wait();
    2a38:	f7ff fec6 	bl	27c8 <nvmc_wait>

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    2a3c:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
    2a40:	f8d1 3200 	ldr.w	r3, [r1, #512]	; 0x200
    2a44:	2b00      	cmp	r3, #0
    2a46:	db03      	blt.n	2a50 <SystemInit+0x278>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    2a48:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    2a4c:	2b00      	cmp	r3, #0
    2a4e:	da17      	bge.n	2a80 <SystemInit+0x2a8>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2a50:	491f      	ldr	r1, [pc, #124]	; (2ad0 <SystemInit+0x2f8>)
    2a52:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    2a54:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2a58:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    2a5c:	2415      	movs	r4, #21
    nvmc_wait();
    2a5e:	f7ff feb3 	bl	27c8 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    2a62:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    2a66:	f7ff feaf 	bl	27c8 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    2a6a:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    2a6e:	f7ff feab 	bl	27c8 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2a72:	2300      	movs	r3, #0
    2a74:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    2a78:	f7ff fea6 	bl	27c8 <nvmc_wait>
        if ((*((uint32_t *)0x1000120C) & (1 << 0)) != 0){
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            *((uint32_t *)0x1000120C) = 0;
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
    2a7c:	f7ff fe64 	bl	2748 <__NVIC_SystemReset>
        if ((*((uint32_t *)0x1000120C) & (1 << 0)) != 0){
    2a80:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
    2a84:	07db      	lsls	r3, r3, #31
    2a86:	d50d      	bpl.n	2aa4 <SystemInit+0x2cc>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2a88:	4811      	ldr	r0, [pc, #68]	; (2ad0 <SystemInit+0x2f8>)
    2a8a:	2301      	movs	r3, #1
    2a8c:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
            *((uint32_t *)0x1000120C) = 0;
    2a90:	2400      	movs	r4, #0
    nvmc_wait();
    2a92:	f7ff fe99 	bl	27c8 <nvmc_wait>
            *((uint32_t *)0x1000120C) = 0;
    2a96:	f8c1 420c 	str.w	r4, [r1, #524]	; 0x20c
            nvmc_wait();
    2a9a:	f7ff fe95 	bl	27c8 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2a9e:	f8c0 4504 	str.w	r4, [r0, #1284]	; 0x504
    2aa2:	e7e9      	b.n	2a78 <SystemInit+0x2a0>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    2aa4:	4b0b      	ldr	r3, [pc, #44]	; (2ad4 <SystemInit+0x2fc>)
    2aa6:	4a0c      	ldr	r2, [pc, #48]	; (2ad8 <SystemInit+0x300>)
    2aa8:	601a      	str	r2, [r3, #0]
        }
    #endif

    SystemCoreClockUpdate();
}
    2aaa:	bd10      	pop	{r4, pc}
    2aac:	40013000 	.word	0x40013000
    2ab0:	4007c000 	.word	0x4007c000
    2ab4:	baadf00d 	.word	0xbaadf00d
    2ab8:	e000ed00 	.word	0xe000ed00
    2abc:	40005000 	.word	0x40005000
    2ac0:	000055c3 	.word	0x000055c3
    2ac4:	4000c000 	.word	0x4000c000
    2ac8:	000055be 	.word	0x000055be
    2acc:	40001000 	.word	0x40001000
    2ad0:	4001e000 	.word	0x4001e000
    2ad4:	20000038 	.word	0x20000038
    2ad8:	03d09000 	.word	0x03d09000

00002adc <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    2adc:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    2ade:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    2ae0:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2ae2:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
    2ae6:	fab2 f382 	clz	r3, r2
    2aea:	f1c3 031f 	rsb	r3, r3, #31
    2aee:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    2af0:	fa05 f403 	lsl.w	r4, r5, r3
    2af4:	ea22 0404 	bic.w	r4, r2, r4
    2af8:	e850 6f00 	ldrex	r6, [r0]
    2afc:	4296      	cmp	r6, r2
    2afe:	d104      	bne.n	2b0a <nrfx_flag32_alloc+0x2e>
    2b00:	e840 4c00 	strex	ip, r4, [r0]
    2b04:	f1bc 0f00 	cmp.w	ip, #0
    2b08:	d1f6      	bne.n	2af8 <nrfx_flag32_alloc+0x1c>
    2b0a:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2b0e:	d1e7      	bne.n	2ae0 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    2b10:	4801      	ldr	r0, [pc, #4]	; (2b18 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    2b12:	700b      	strb	r3, [r1, #0]
}
    2b14:	bd70      	pop	{r4, r5, r6, pc}
    2b16:	bf00      	nop
    2b18:	0bad0000 	.word	0x0bad0000

00002b1c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    2b1c:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    2b1e:	6803      	ldr	r3, [r0, #0]
    2b20:	40cb      	lsrs	r3, r1
    2b22:	07db      	lsls	r3, r3, #31
    2b24:	d414      	bmi.n	2b50 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    2b26:	2301      	movs	r3, #1
    2b28:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    2b2a:	6802      	ldr	r2, [r0, #0]
    2b2c:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    2b30:	ea43 0102 	orr.w	r1, r3, r2
    2b34:	e850 4f00 	ldrex	r4, [r0]
    2b38:	4294      	cmp	r4, r2
    2b3a:	d104      	bne.n	2b46 <nrfx_flag32_free+0x2a>
    2b3c:	e840 1c00 	strex	ip, r1, [r0]
    2b40:	f1bc 0f00 	cmp.w	ip, #0
    2b44:	d1f6      	bne.n	2b34 <nrfx_flag32_free+0x18>
    2b46:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2b4a:	d1ee      	bne.n	2b2a <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    2b4c:	4801      	ldr	r0, [pc, #4]	; (2b54 <nrfx_flag32_free+0x38>)
}
    2b4e:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    2b50:	4801      	ldr	r0, [pc, #4]	; (2b58 <nrfx_flag32_free+0x3c>)
    2b52:	e7fc      	b.n	2b4e <nrfx_flag32_free+0x32>
    2b54:	0bad0000 	.word	0x0bad0000
    2b58:	0bad0004 	.word	0x0bad0004

00002b5c <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    2b5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    2b5e:	4604      	mov	r4, r0
    2b60:	b118      	cbz	r0, 2b6a <clock_stop+0xe>
    2b62:	2801      	cmp	r0, #1
    2b64:	d022      	beq.n	2bac <clock_stop+0x50>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    2b66:	b003      	add	sp, #12
    2b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
    2b6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2b6e:	2202      	movs	r2, #2
    2b70:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2b74:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    2b78:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2b7c:	2201      	movs	r2, #1
    2b7e:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    2b80:	4607      	mov	r7, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    2b82:	2301      	movs	r3, #1
    2b84:	f88d 3007 	strb.w	r3, [sp, #7]
    2b88:	f242 7510 	movw	r5, #10000	; 0x2710
    2b8c:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    2b90:	b1cc      	cbz	r4, 2bc6 <clock_stop+0x6a>
    2b92:	2c01      	cmp	r4, #1
    2b94:	d1e7      	bne.n	2b66 <clock_stop+0xa>
            if (p_clk_src != NULL)
    2b96:	b3c7      	cbz	r7, 2c0a <clock_stop+0xae>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2b98:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    2b9c:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    2ba0:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2ba2:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    2ba6:	03da      	lsls	r2, r3, #15
    2ba8:	d521      	bpl.n	2bee <clock_stop+0x92>
    2baa:	e016      	b.n	2bda <clock_stop+0x7e>
    p_reg->INTENCLR = mask;
    2bac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2bb0:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    2bb2:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2bb6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    2bba:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2bbe:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    2bc0:	f10d 0707 	add.w	r7, sp, #7
    2bc4:	e7dd      	b.n	2b82 <clock_stop+0x26>
            if (p_clk_src != NULL)
    2bc6:	b1b7      	cbz	r7, 2bf6 <clock_stop+0x9a>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2bc8:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    2bcc:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    2bd0:	603b      	str	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2bd2:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    2bd6:	03d8      	lsls	r0, r3, #15
    2bd8:	d5c5      	bpl.n	2b66 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    2bda:	f89d 0007 	ldrb.w	r0, [sp, #7]
    2bde:	2801      	cmp	r0, #1
    2be0:	d103      	bne.n	2bea <clock_stop+0x8e>
    2be2:	f002 f91e 	bl	4e22 <nrfx_busy_wait>
    2be6:	3d01      	subs	r5, #1
    2be8:	d1d2      	bne.n	2b90 <clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    2bea:	2c01      	cmp	r4, #1
    2bec:	d1bb      	bne.n	2b66 <clock_stop+0xa>
            m_clock_cb.hfclk_started = false;
    2bee:	4b0c      	ldr	r3, [pc, #48]	; (2c20 <clock_stop+0xc4>)
    2bf0:	2200      	movs	r2, #0
    2bf2:	715a      	strb	r2, [r3, #5]
    2bf4:	e7b7      	b.n	2b66 <clock_stop+0xa>
    2bf6:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    2bfa:	03d9      	lsls	r1, r3, #15
    2bfc:	d5b3      	bpl.n	2b66 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    2bfe:	2001      	movs	r0, #1
    2c00:	f002 f90f 	bl	4e22 <nrfx_busy_wait>
    2c04:	3d01      	subs	r5, #1
    2c06:	d1f6      	bne.n	2bf6 <clock_stop+0x9a>
    2c08:	e7ad      	b.n	2b66 <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2c0a:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    2c0e:	03db      	lsls	r3, r3, #15
    2c10:	d5ed      	bpl.n	2bee <clock_stop+0x92>
    2c12:	2001      	movs	r0, #1
    2c14:	f002 f905 	bl	4e22 <nrfx_busy_wait>
    2c18:	3d01      	subs	r5, #1
    2c1a:	d1f6      	bne.n	2c0a <clock_stop+0xae>
    2c1c:	e7e7      	b.n	2bee <clock_stop+0x92>
    2c1e:	bf00      	nop
    2c20:	200003ac 	.word	0x200003ac

00002c24 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    2c24:	4b05      	ldr	r3, [pc, #20]	; (2c3c <nrfx_clock_init+0x18>)
    2c26:	791a      	ldrb	r2, [r3, #4]
    2c28:	b92a      	cbnz	r2, 2c36 <nrfx_clock_init+0x12>
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    }
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
    2c2a:	719a      	strb	r2, [r3, #6]
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    2c2c:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    2c2e:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    2c30:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    2c32:	4803      	ldr	r0, [pc, #12]	; (2c40 <nrfx_clock_init+0x1c>)
    2c34:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    2c36:	4803      	ldr	r0, [pc, #12]	; (2c44 <nrfx_clock_init+0x20>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    2c38:	4770      	bx	lr
    2c3a:	bf00      	nop
    2c3c:	200003ac 	.word	0x200003ac
    2c40:	0bad0000 	.word	0x0bad0000
    2c44:	0bad000c 	.word	0x0bad000c

00002c48 <nrfx_clock_calibration_start>:
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2c48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2c4c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2c50:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    2c54:	03c8      	lsls	r0, r1, #15
    2c56:	d519      	bpl.n	2c8c <nrfx_clock_calibration_start+0x44>
    if (!nrfx_clock_is_running(NRF_CLOCK_DOMAIN_HFCLK, &clk_src))
    {
        return NRFX_ERROR_INVALID_STATE;
    }

    if (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)
    2c58:	07d1      	lsls	r1, r2, #31
    2c5a:	d517      	bpl.n	2c8c <nrfx_clock_calibration_start+0x44>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2c5c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    2c60:	03d2      	lsls	r2, r2, #15
    2c62:	d513      	bpl.n	2c8c <nrfx_clock_calibration_start+0x44>
    if (!nrfx_clock_is_running(NRF_CLOCK_DOMAIN_LFCLK, NULL))
    {
        return NRFX_ERROR_INVALID_STATE;
    }

    if (m_clock_cb.cal_state == CAL_STATE_IDLE)
    2c64:	490b      	ldr	r1, [pc, #44]	; (2c94 <nrfx_clock_calibration_start+0x4c>)
    2c66:	798a      	ldrb	r2, [r1, #6]
    2c68:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    2c6c:	b982      	cbnz	r2, 2c90 <nrfx_clock_calibration_start+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2c6e:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
    2c72:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    nrfx_err_t err_code = NRFX_SUCCESS;
    2c76:	4808      	ldr	r0, [pc, #32]	; (2c98 <nrfx_clock_calibration_start+0x50>)
    p_reg->INTENSET = mask;
    2c78:	2208      	movs	r2, #8
    2c7a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_DONE);
        nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_DONE_MASK);
        m_clock_cb.cal_state = CAL_STATE_CAL;
    2c7e:	2201      	movs	r2, #1
    2c80:	718a      	strb	r2, [r1, #6]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_192)
        *(volatile uint32_t *)0x40000C34 = 0x00000002;
    2c82:	2102      	movs	r1, #2
    2c84:	f8c3 1c34 	str.w	r1, [r3, #3124]	; 0xc34
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2c88:	611a      	str	r2, [r3, #16]
}
    2c8a:	4770      	bx	lr
        return NRFX_ERROR_INVALID_STATE;
    2c8c:	4803      	ldr	r0, [pc, #12]	; (2c9c <nrfx_clock_calibration_start+0x54>)
    2c8e:	4770      	bx	lr
#endif
        nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_CAL);
    }
    else
    {
        err_code = NRFX_ERROR_BUSY;
    2c90:	4803      	ldr	r0, [pc, #12]	; (2ca0 <nrfx_clock_calibration_start+0x58>)

    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    2c92:	4770      	bx	lr
    2c94:	200003ac 	.word	0x200003ac
    2c98:	0bad0000 	.word	0x0bad0000
    2c9c:	0bad0005 	.word	0x0bad0005
    2ca0:	0bad000b 	.word	0x0bad000b

00002ca4 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    2ca4:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2ca6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2caa:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    2cae:	b16a      	cbz	r2, 2ccc <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2cb0:	2200      	movs	r2, #0
    2cb2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    2cb6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    2cba:	2201      	movs	r2, #1
    2cbc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    2cc0:	4b18      	ldr	r3, [pc, #96]	; (2d24 <nrfx_power_clock_irq_handler+0x80>)
    2cc2:	7958      	ldrb	r0, [r3, #5]
    2cc4:	b910      	cbnz	r0, 2ccc <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    2cc6:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    2cc8:	681b      	ldr	r3, [r3, #0]
    2cca:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2ccc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2cd0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    2cd4:	b15a      	cbz	r2, 2cee <nrfx_power_clock_irq_handler+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2cd6:	2200      	movs	r2, #0
    2cd8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    2cdc:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENCLR = mask;
    2ce0:	2202      	movs	r2, #2
    2ce2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    2ce6:	4b0f      	ldr	r3, [pc, #60]	; (2d24 <nrfx_power_clock_irq_handler+0x80>)
    2ce8:	2001      	movs	r0, #1
    2cea:	681b      	ldr	r3, [r3, #0]
    2cec:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2cee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2cf2:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CTTO);
    }
#endif // NRF_CLOCK_HAS_CALIBRATION_TIMER && NRFX_CHECK(NRFX_CLOCK_CONFIG_CT_ENABLED)

    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_DONE) &&
    2cf6:	b1a2      	cbz	r2, 2d22 <nrfx_power_clock_irq_handler+0x7e>
    return p_reg->INTENSET & mask;
    2cf8:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    2cfc:	0712      	lsls	r2, r2, #28
    2cfe:	d510      	bpl.n	2d22 <nrfx_power_clock_irq_handler+0x7e>
        nrf_clock_int_enable_check(NRF_CLOCK, NRF_CLOCK_INT_DONE_MASK))
    {
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_192)
        *(volatile uint32_t *)0x40000C34 = 0x00000000;
    2d00:	2200      	movs	r2, #0
    2d02:	f8c3 2c34 	str.w	r2, [r3, #3124]	; 0xc34
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2d06:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    2d0a:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
    p_reg->INTENCLR = mask;
    2d0e:	2108      	movs	r1, #8
    2d10:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
#endif
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_DONE);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_DONE");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_DONE_MASK);
        m_clock_cb.cal_state = CAL_STATE_IDLE;
    2d14:	4b03      	ldr	r3, [pc, #12]	; (2d24 <nrfx_power_clock_irq_handler+0x80>)
    2d16:	719a      	strb	r2, [r3, #6]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    2d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    2d1c:	681b      	ldr	r3, [r3, #0]
    2d1e:	2003      	movs	r0, #3
    2d20:	4718      	bx	r3
}
    2d22:	bd10      	pop	{r4, pc}
    2d24:	200003ac 	.word	0x200003ac

00002d28 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    2d28:	4b03      	ldr	r3, [pc, #12]	; (2d38 <pin_in_use_by_te+0x10>)
    2d2a:	3008      	adds	r0, #8
    2d2c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    2d30:	f3c0 1040 	ubfx	r0, r0, #5, #1
    2d34:	4770      	bx	lr
    2d36:	bf00      	nop
    2d38:	2000003c 	.word	0x2000003c

00002d3c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    2d3c:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2d3e:	f100 0308 	add.w	r3, r0, #8
    2d42:	4c0c      	ldr	r4, [pc, #48]	; (2d74 <call_handler+0x38>)
    2d44:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    2d48:	05da      	lsls	r2, r3, #23
{
    2d4a:	4605      	mov	r5, r0
    2d4c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2d4e:	d507      	bpl.n	2d60 <call_handler+0x24>
    2d50:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    2d54:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    2d58:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    2d5c:	6852      	ldr	r2, [r2, #4]
    2d5e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    2d60:	68a3      	ldr	r3, [r4, #8]
    2d62:	b12b      	cbz	r3, 2d70 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    2d64:	68e2      	ldr	r2, [r4, #12]
    2d66:	4631      	mov	r1, r6
    2d68:	4628      	mov	r0, r5
    }
}
    2d6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    2d6e:	4718      	bx	r3
}
    2d70:	bd70      	pop	{r4, r5, r6, pc}
    2d72:	bf00      	nop
    2d74:	2000003c 	.word	0x2000003c

00002d78 <release_handler>:
{
    2d78:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2d7a:	4a12      	ldr	r2, [pc, #72]	; (2dc4 <release_handler+0x4c>)
    2d7c:	3008      	adds	r0, #8
    2d7e:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    2d82:	05d9      	lsls	r1, r3, #23
    2d84:	d51b      	bpl.n	2dbe <release_handler+0x46>
    2d86:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    2d8a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    2d8e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    2d92:	f102 040e 	add.w	r4, r2, #14
    2d96:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    2d98:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    2d9c:	f413 7f80 	tst.w	r3, #256	; 0x100
    2da0:	d003      	beq.n	2daa <release_handler+0x32>
    2da2:	f3c3 2343 	ubfx	r3, r3, #9, #4
    2da6:	4299      	cmp	r1, r3
    2da8:	d009      	beq.n	2dbe <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    2daa:	3001      	adds	r0, #1
    2dac:	2820      	cmp	r0, #32
    2dae:	d1f3      	bne.n	2d98 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    2db0:	2300      	movs	r3, #0
    2db2:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    2db6:	4804      	ldr	r0, [pc, #16]	; (2dc8 <release_handler+0x50>)
}
    2db8:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    2dba:	f7ff beaf 	b.w	2b1c <nrfx_flag32_free>
}
    2dbe:	bc10      	pop	{r4}
    2dc0:	4770      	bx	lr
    2dc2:	bf00      	nop
    2dc4:	2000003c 	.word	0x2000003c
    2dc8:	20000090 	.word	0x20000090

00002dcc <pin_handler_trigger_uninit>:
{
    2dcc:	b538      	push	{r3, r4, r5, lr}
    2dce:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    2dd0:	f7ff ffaa 	bl	2d28 <pin_in_use_by_te>
    2dd4:	4c09      	ldr	r4, [pc, #36]	; (2dfc <pin_handler_trigger_uninit+0x30>)
    2dd6:	f102 0508 	add.w	r5, r2, #8
    2dda:	b140      	cbz	r0, 2dee <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    2ddc:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    2de0:	4907      	ldr	r1, [pc, #28]	; (2e00 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    2de2:	0b5b      	lsrs	r3, r3, #13
    2de4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    2de8:	2000      	movs	r0, #0
    2dea:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    2dee:	4610      	mov	r0, r2
    2df0:	f7ff ffc2 	bl	2d78 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    2df4:	2300      	movs	r3, #0
    2df6:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    2dfa:	bd38      	pop	{r3, r4, r5, pc}
    2dfc:	2000003c 	.word	0x2000003c
    2e00:	40006000 	.word	0x40006000

00002e04 <nrfx_gpiote_input_configure>:
{
    2e04:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    2e08:	4604      	mov	r4, r0
    2e0a:	461d      	mov	r5, r3
    if (p_input_config)
    2e0c:	b309      	cbz	r1, 2e52 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2e0e:	4f4f      	ldr	r7, [pc, #316]	; (2f4c <nrfx_gpiote_input_configure+0x148>)
    2e10:	f100 0808 	add.w	r8, r0, #8
    2e14:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    2e18:	07b3      	lsls	r3, r6, #30
    2e1a:	d506      	bpl.n	2e2a <nrfx_gpiote_input_configure+0x26>
    2e1c:	f7ff ff84 	bl	2d28 <pin_in_use_by_te>
    2e20:	b118      	cbz	r0, 2e2a <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
    2e22:	484b      	ldr	r0, [pc, #300]	; (2f50 <nrfx_gpiote_input_configure+0x14c>)
}
    2e24:	b002      	add	sp, #8
    2e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *p_pin = pin_number & 0x1F;
    2e2a:	f004 031f 	and.w	r3, r4, #31
    2e2e:	009b      	lsls	r3, r3, #2
    2e30:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    2e34:	7809      	ldrb	r1, [r1, #0]
    uint32_t cnf = reg->PIN_CNF[pin_number];
    2e36:	f8d3 0700 	ldr.w	r0, [r3, #1792]	; 0x700
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    2e3a:	f026 0602 	bic.w	r6, r6, #2
    cnf &= ~to_update;
    2e3e:	f020 000f 	bic.w	r0, r0, #15
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    2e42:	f046 0601 	orr.w	r6, r6, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    2e46:	ea40 0181 	orr.w	r1, r0, r1, lsl #2
    2e4a:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
    2e4e:	f8c3 1700 	str.w	r1, [r3, #1792]	; 0x700
    if (p_trigger_config)
    2e52:	b19a      	cbz	r2, 2e7c <nrfx_gpiote_input_configure+0x78>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2e54:	4b3d      	ldr	r3, [pc, #244]	; (2f4c <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    2e56:	7817      	ldrb	r7, [r2, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    2e58:	6850      	ldr	r0, [r2, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2e5a:	f104 0608 	add.w	r6, r4, #8
    2e5e:	f833 1016 	ldrh.w	r1, [r3, r6, lsl #1]
        if (pin_is_output(pin))
    2e62:	f011 0f02 	tst.w	r1, #2
    2e66:	d00d      	beq.n	2e84 <nrfx_gpiote_input_configure+0x80>
            if (use_evt)
    2e68:	2800      	cmp	r0, #0
    2e6a:	d1da      	bne.n	2e22 <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    2e6c:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
    2e70:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    2e74:	ea42 0287 	orr.w	r2, r2, r7, lsl #2
    2e78:	f823 2016 	strh.w	r2, [r3, r6, lsl #1]
    if (p_handler_config)
    2e7c:	2d00      	cmp	r5, #0
    2e7e:	d13b      	bne.n	2ef8 <nrfx_gpiote_input_configure+0xf4>
        err = NRFX_SUCCESS;
    2e80:	4834      	ldr	r0, [pc, #208]	; (2f54 <nrfx_gpiote_input_configure+0x150>)
    2e82:	e7cf      	b.n	2e24 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    2e84:	f021 0120 	bic.w	r1, r1, #32
    2e88:	04c9      	lsls	r1, r1, #19
    2e8a:	0cc9      	lsrs	r1, r1, #19
    2e8c:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
            if (use_evt)
    2e90:	2800      	cmp	r0, #0
    2e92:	d0eb      	beq.n	2e6c <nrfx_gpiote_input_configure+0x68>
                if (!edge)
    2e94:	2f03      	cmp	r7, #3
    2e96:	d8c4      	bhi.n	2e22 <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    2e98:	6852      	ldr	r2, [r2, #4]
    2e9a:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    2e9e:	b92f      	cbnz	r7, 2eac <nrfx_gpiote_input_configure+0xa8>
    2ea0:	4a2d      	ldr	r2, [pc, #180]	; (2f58 <nrfx_gpiote_input_configure+0x154>)
    2ea2:	f50c 7ca2 	add.w	ip, ip, #324	; 0x144
    2ea6:	f842 702c 	str.w	r7, [r2, ip, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    2eaa:	e7df      	b.n	2e6c <nrfx_gpiote_input_configure+0x68>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    2eac:	ea4f 028c 	mov.w	r2, ip, lsl #2
    2eb0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2eb4:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    2eb8:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    2ebc:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    2ec0:	f020 0003 	bic.w	r0, r0, #3
    2ec4:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    2ec8:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    2ecc:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
    2ed0:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    2ed4:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2ed8:	0220      	lsls	r0, r4, #8
    2eda:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    2ede:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
    2ee2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    2ee6:	ea40 000e 	orr.w	r0, r0, lr
    2eea:	f041 0120 	orr.w	r1, r1, #32
    2eee:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
    2ef2:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    2ef6:	e7b9      	b.n	2e6c <nrfx_gpiote_input_configure+0x68>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    2ef8:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    2efc:	4620      	mov	r0, r4
    2efe:	f7ff ff3b 	bl	2d78 <release_handler>
    if (!handler)
    2f02:	2e00      	cmp	r6, #0
    2f04:	d0bc      	beq.n	2e80 <nrfx_gpiote_input_configure+0x7c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    2f06:	4d11      	ldr	r5, [pc, #68]	; (2f4c <nrfx_gpiote_input_configure+0x148>)
    2f08:	e9d5 2300 	ldrd	r2, r3, [r5]
    2f0c:	4296      	cmp	r6, r2
    2f0e:	d101      	bne.n	2f14 <nrfx_gpiote_input_configure+0x110>
    2f10:	429f      	cmp	r7, r3
    2f12:	d019      	beq.n	2f48 <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    2f14:	4811      	ldr	r0, [pc, #68]	; (2f5c <nrfx_gpiote_input_configure+0x158>)
    2f16:	f10d 0107 	add.w	r1, sp, #7
    2f1a:	f7ff fddf 	bl	2adc <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    2f1e:	4b0d      	ldr	r3, [pc, #52]	; (2f54 <nrfx_gpiote_input_configure+0x150>)
    2f20:	4298      	cmp	r0, r3
    2f22:	f47f af7f 	bne.w	2e24 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
    2f26:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].handler = handler;
    2f2a:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    2f2e:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    2f32:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    2f34:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    2f36:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    2f3a:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    2f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2f42:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    2f46:	e79b      	b.n	2e80 <nrfx_gpiote_input_configure+0x7c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    2f48:	2200      	movs	r2, #0
    2f4a:	e7ee      	b.n	2f2a <nrfx_gpiote_input_configure+0x126>
    2f4c:	2000003c 	.word	0x2000003c
    2f50:	0bad0004 	.word	0x0bad0004
    2f54:	0bad0000 	.word	0x0bad0000
    2f58:	40006000 	.word	0x40006000
    2f5c:	20000090 	.word	0x20000090

00002f60 <nrfx_gpiote_output_configure>:
{
    2f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f62:	4604      	mov	r4, r0
    if (p_config)
    2f64:	b389      	cbz	r1, 2fca <nrfx_gpiote_output_configure+0x6a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2f66:	4e3a      	ldr	r6, [pc, #232]	; (3050 <nrfx_gpiote_output_configure+0xf0>)
    2f68:	f100 0708 	add.w	r7, r0, #8
    2f6c:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    2f70:	07ab      	lsls	r3, r5, #30
    2f72:	d404      	bmi.n	2f7e <nrfx_gpiote_output_configure+0x1e>
    2f74:	f7ff fed8 	bl	2d28 <pin_in_use_by_te>
    2f78:	b108      	cbz	r0, 2f7e <nrfx_gpiote_output_configure+0x1e>
{
    2f7a:	4836      	ldr	r0, [pc, #216]	; (3054 <nrfx_gpiote_output_configure+0xf4>)
}
    2f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    2f7e:	f015 0f1c 	tst.w	r5, #28
    2f82:	784b      	ldrb	r3, [r1, #1]
    2f84:	d124      	bne.n	2fd0 <nrfx_gpiote_output_configure+0x70>
    *p_pin = pin_number & 0x1F;
    2f86:	f004 001f 	and.w	r0, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
    2f8a:	f500 7ee0 	add.w	lr, r0, #448	; 0x1c0
    2f8e:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    2f92:	005b      	lsls	r3, r3, #1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    2f94:	f85c c02e 	ldr.w	ip, [ip, lr, lsl #2]
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    2f98:	f891 e002 	ldrb.w	lr, [r1, #2]
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    2f9c:	7809      	ldrb	r1, [r1, #0]
    cnf &= ~to_update;
    2f9e:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
    2fa2:	ea43 038e 	orr.w	r3, r3, lr, lsl #2
    2fa6:	f02c 0c07 	bic.w	ip, ip, #7
    2faa:	ea43 030c 	orr.w	r3, r3, ip
    2fae:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    2fb2:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
    2fb6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    2fba:	f043 0301 	orr.w	r3, r3, #1
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    2fbe:	f045 0503 	orr.w	r5, r5, #3
    reg->PIN_CNF[pin_number] = cnf;
    2fc2:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
    2fc6:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    if (p_task_config)
    2fca:	b922      	cbnz	r2, 2fd6 <nrfx_gpiote_output_configure+0x76>
    return NRFX_SUCCESS;
    2fcc:	4822      	ldr	r0, [pc, #136]	; (3058 <nrfx_gpiote_output_configure+0xf8>)
    2fce:	e7d5      	b.n	2f7c <nrfx_gpiote_output_configure+0x1c>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    2fd0:	2b01      	cmp	r3, #1
    2fd2:	d1d8      	bne.n	2f86 <nrfx_gpiote_output_configure+0x26>
    2fd4:	e7d1      	b.n	2f7a <nrfx_gpiote_output_configure+0x1a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2fd6:	4e1e      	ldr	r6, [pc, #120]	; (3050 <nrfx_gpiote_output_configure+0xf0>)
    2fd8:	f104 0708 	add.w	r7, r4, #8
    2fdc:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    2fe0:	0783      	lsls	r3, r0, #30
    2fe2:	d5ca      	bpl.n	2f7a <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
    2fe4:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
    2fe8:	4661      	mov	r1, ip
    2fea:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    2fec:	f020 0020 	bic.w	r0, r0, #32
    2ff0:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    2ff4:	04c0      	lsls	r0, r0, #19
    2ff6:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    2ffa:	0cc0      	lsrs	r0, r0, #19
    2ffc:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    3000:	2300      	movs	r3, #0
    3002:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    3006:	7855      	ldrb	r5, [r2, #1]
    3008:	2d00      	cmp	r5, #0
    300a:	d0df      	beq.n	2fcc <nrfx_gpiote_output_configure+0x6c>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    300c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    3010:	7892      	ldrb	r2, [r2, #2]
    3012:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
    3016:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    301a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    301e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    3022:	0223      	lsls	r3, r4, #8
    3024:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    3028:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    302a:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    302e:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    3032:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3034:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    3036:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    303a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    303e:	4313      	orrs	r3, r2
    3040:	f040 0020 	orr.w	r0, r0, #32
    3044:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    3048:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    304c:	e7be      	b.n	2fcc <nrfx_gpiote_output_configure+0x6c>
    304e:	bf00      	nop
    3050:	2000003c 	.word	0x2000003c
    3054:	0bad0004 	.word	0x0bad0004
    3058:	0bad0000 	.word	0x0bad0000

0000305c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    305c:	4b01      	ldr	r3, [pc, #4]	; (3064 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    305e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    3062:	4770      	bx	lr
    3064:	2000003c 	.word	0x2000003c

00003068 <nrfx_gpiote_channel_get>:
{
    3068:	b508      	push	{r3, lr}
    306a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    306c:	f7ff fe5c 	bl	2d28 <pin_in_use_by_te>
    3070:	b138      	cbz	r0, 3082 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3072:	4b05      	ldr	r3, [pc, #20]	; (3088 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    3074:	4805      	ldr	r0, [pc, #20]	; (308c <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3076:	3208      	adds	r2, #8
    3078:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    307c:	0b5b      	lsrs	r3, r3, #13
    307e:	700b      	strb	r3, [r1, #0]
}
    3080:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3082:	4803      	ldr	r0, [pc, #12]	; (3090 <nrfx_gpiote_channel_get+0x28>)
    3084:	e7fc      	b.n	3080 <nrfx_gpiote_channel_get+0x18>
    3086:	bf00      	nop
    3088:	2000003c 	.word	0x2000003c
    308c:	0bad0000 	.word	0x0bad0000
    3090:	0bad0004 	.word	0x0bad0004

00003094 <nrfx_gpiote_init>:
{
    3094:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    3096:	4c0f      	ldr	r4, [pc, #60]	; (30d4 <nrfx_gpiote_init+0x40>)
    3098:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
    309c:	b9bd      	cbnz	r5, 30ce <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    309e:	2240      	movs	r2, #64	; 0x40
    30a0:	4629      	mov	r1, r5
    30a2:	f104 0010 	add.w	r0, r4, #16
    30a6:	f001 fc95 	bl	49d4 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    30aa:	2006      	movs	r0, #6
    30ac:	f7fd ffe2 	bl	1074 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    30b0:	4b09      	ldr	r3, [pc, #36]	; (30d8 <nrfx_gpiote_init+0x44>)
    return err_code;
    30b2:	480a      	ldr	r0, [pc, #40]	; (30dc <nrfx_gpiote_init+0x48>)
    30b4:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    30b8:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    30bc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    30c0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    30c4:	2301      	movs	r3, #1
    30c6:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    30ca:	6563      	str	r3, [r4, #84]	; 0x54
}
    30cc:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    30ce:	4804      	ldr	r0, [pc, #16]	; (30e0 <nrfx_gpiote_init+0x4c>)
    30d0:	e7fc      	b.n	30cc <nrfx_gpiote_init+0x38>
    30d2:	bf00      	nop
    30d4:	2000003c 	.word	0x2000003c
    30d8:	40006000 	.word	0x40006000
    30dc:	0bad0000 	.word	0x0bad0000
    30e0:	0bad0005 	.word	0x0bad0005

000030e4 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    30e4:	4b03      	ldr	r3, [pc, #12]	; (30f4 <nrfx_gpiote_is_init+0x10>)
    30e6:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    30ea:	3800      	subs	r0, #0
    30ec:	bf18      	it	ne
    30ee:	2001      	movne	r0, #1
    30f0:	4770      	bx	lr
    30f2:	bf00      	nop
    30f4:	2000003c 	.word	0x2000003c

000030f8 <nrfx_gpiote_channel_free>:
{
    30f8:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    30fa:	4801      	ldr	r0, [pc, #4]	; (3100 <nrfx_gpiote_channel_free+0x8>)
    30fc:	f7ff bd0e 	b.w	2b1c <nrfx_flag32_free>
    3100:	2000008c 	.word	0x2000008c

00003104 <nrfx_gpiote_channel_alloc>:
{
    3104:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    3106:	4801      	ldr	r0, [pc, #4]	; (310c <nrfx_gpiote_channel_alloc+0x8>)
    3108:	f7ff bce8 	b.w	2adc <nrfx_flag32_alloc>
    310c:	2000008c 	.word	0x2000008c

00003110 <nrfx_gpiote_trigger_enable>:
{
    3110:	b510      	push	{r4, lr}
    3112:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3114:	f7ff fe08 	bl	2d28 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3118:	f102 0408 	add.w	r4, r2, #8
    311c:	4b1c      	ldr	r3, [pc, #112]	; (3190 <nrfx_gpiote_trigger_enable+0x80>)
    311e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3122:	b1e0      	cbz	r0, 315e <nrfx_gpiote_trigger_enable+0x4e>
    3124:	f013 0402 	ands.w	r4, r3, #2
    3128:	d119      	bne.n	315e <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    312a:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    312c:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    312e:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    3132:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    3136:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    313a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    313e:	6004      	str	r4, [r0, #0]
    3140:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    3142:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    3146:	f040 0001 	orr.w	r0, r0, #1
    314a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    314e:	b129      	cbz	r1, 315c <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    3150:	2201      	movs	r2, #1
    3152:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    3156:	4a0f      	ldr	r2, [pc, #60]	; (3194 <nrfx_gpiote_trigger_enable+0x84>)
    3158:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    315c:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    315e:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    3162:	2b04      	cmp	r3, #4
    3164:	d010      	beq.n	3188 <nrfx_gpiote_trigger_enable+0x78>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    3166:	2b05      	cmp	r3, #5
    3168:	d010      	beq.n	318c <nrfx_gpiote_trigger_enable+0x7c>
    return p_reg->IN;
    316a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    316e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    *p_pin = pin_number & 0x1F;
    3172:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    3176:	40d9      	lsrs	r1, r3
    3178:	f001 0101 	and.w	r1, r1, #1
    317c:	3102      	adds	r1, #2
}
    317e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    3182:	4610      	mov	r0, r2
    3184:	f001 be96 	b.w	4eb4 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    3188:	2103      	movs	r1, #3
    318a:	e7f8      	b.n	317e <nrfx_gpiote_trigger_enable+0x6e>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    318c:	2102      	movs	r1, #2
    318e:	e7f6      	b.n	317e <nrfx_gpiote_trigger_enable+0x6e>
    3190:	2000003c 	.word	0x2000003c
    3194:	40006000 	.word	0x40006000

00003198 <nrfx_gpiote_trigger_disable>:
{
    3198:	b508      	push	{r3, lr}
    319a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    319c:	f7ff fdc4 	bl	2d28 <pin_in_use_by_te>
    31a0:	b1c0      	cbz	r0, 31d4 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    31a2:	f102 0108 	add.w	r1, r2, #8
    31a6:	4b0e      	ldr	r3, [pc, #56]	; (31e0 <nrfx_gpiote_trigger_disable+0x48>)
    31a8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    31ac:	0799      	lsls	r1, r3, #30
    31ae:	d411      	bmi.n	31d4 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    31b0:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    31b2:	2201      	movs	r2, #1
    31b4:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    31b6:	009b      	lsls	r3, r3, #2
    31b8:	490a      	ldr	r1, [pc, #40]	; (31e4 <nrfx_gpiote_trigger_disable+0x4c>)
    31ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    31be:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    31c2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    31c6:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    31ca:	f022 0203 	bic.w	r2, r2, #3
    31ce:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    31d2:	bd08      	pop	{r3, pc}
    31d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    31d8:	2100      	movs	r1, #0
    31da:	4610      	mov	r0, r2
    31dc:	f001 be6a 	b.w	4eb4 <nrf_gpio_cfg_sense_set>
    31e0:	2000003c 	.word	0x2000003c
    31e4:	40006000 	.word	0x40006000

000031e8 <nrfx_gpiote_pin_uninit>:
{
    31e8:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    31ea:	4b0d      	ldr	r3, [pc, #52]	; (3220 <nrfx_gpiote_pin_uninit+0x38>)
    31ec:	f100 0208 	add.w	r2, r0, #8
{
    31f0:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    31f2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    31f6:	07db      	lsls	r3, r3, #31
    31f8:	d50f      	bpl.n	321a <nrfx_gpiote_pin_uninit+0x32>
    nrfx_gpiote_trigger_disable(pin);
    31fa:	f7ff ffcd 	bl	3198 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    31fe:	4620      	mov	r0, r4
    *p_pin = pin_number & 0x1F;
    3200:	f004 041f 	and.w	r4, r4, #31
    3204:	f7ff fde2 	bl	2dcc <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
    3208:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    320c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    3210:	2202      	movs	r2, #2
    3212:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    3216:	4803      	ldr	r0, [pc, #12]	; (3224 <nrfx_gpiote_pin_uninit+0x3c>)
}
    3218:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    321a:	4803      	ldr	r0, [pc, #12]	; (3228 <nrfx_gpiote_pin_uninit+0x40>)
    321c:	e7fc      	b.n	3218 <nrfx_gpiote_pin_uninit+0x30>
    321e:	bf00      	nop
    3220:	2000003c 	.word	0x2000003c
    3224:	0bad0000 	.word	0x0bad0000
    3228:	0bad0004 	.word	0x0bad0004

0000322c <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    322c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3230:	4b4f      	ldr	r3, [pc, #316]	; (3370 <nrfx_gpiote_irq_handler+0x144>)
    return p_reg->INTENSET & mask;
    3232:	4850      	ldr	r0, [pc, #320]	; (3374 <nrfx_gpiote_irq_handler+0x148>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3234:	4950      	ldr	r1, [pc, #320]	; (3378 <nrfx_gpiote_irq_handler+0x14c>)
    uint32_t status = 0;
    3236:	2500      	movs	r5, #0
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    3238:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    323a:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    323c:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    323e:	b136      	cbz	r6, 324e <nrfx_gpiote_irq_handler+0x22>
    return p_reg->INTENSET & mask;
    3240:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    3244:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3246:	bf1e      	ittt	ne
    3248:	601c      	strne	r4, [r3, #0]
    324a:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    324c:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    324e:	3304      	adds	r3, #4
    3250:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    3252:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3256:	d1f1      	bne.n	323c <nrfx_gpiote_irq_handler+0x10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3258:	4b46      	ldr	r3, [pc, #280]	; (3374 <nrfx_gpiote_irq_handler+0x148>)
    325a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    325e:	b1bb      	cbz	r3, 3290 <nrfx_gpiote_irq_handler+0x64>
        *p_masks = gpio_regs[i]->LATCH;
    3260:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    3264:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    3268:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    326a:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    326e:	af01      	add	r7, sp, #4
    3270:	f04f 0801 	mov.w	r8, #1
            while (latch[i])
    3274:	9c01      	ldr	r4, [sp, #4]
    3276:	b98c      	cbnz	r4, 329c <nrfx_gpiote_irq_handler+0x70>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3278:	4b3e      	ldr	r3, [pc, #248]	; (3374 <nrfx_gpiote_irq_handler+0x148>)
    327a:	f8c3 417c 	str.w	r4, [r3, #380]	; 0x17c
    327e:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    3282:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    3286:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    3288:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        if (latch[port_idx])
    328c:	2b00      	cmp	r3, #0
    328e:	d1ee      	bne.n	326e <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
    3290:	2401      	movs	r4, #1
    while (mask)
    3292:	2d00      	cmp	r5, #0
    3294:	d153      	bne.n	333e <nrfx_gpiote_irq_handler+0x112>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    3296:	b003      	add	sp, #12
    3298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    329c:	fa94 f4a4 	rbit	r4, r4
    32a0:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    32a4:	4a35      	ldr	r2, [pc, #212]	; (337c <nrfx_gpiote_irq_handler+0x150>)
    32a6:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    32aa:	08e0      	lsrs	r0, r4, #3
    32ac:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    32b0:	5c3b      	ldrb	r3, [r7, r0]
    bit = BITMASK_RELBIT_GET(bit);
    32b2:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    32b6:	fa08 f202 	lsl.w	r2, r8, r2
    32ba:	ea23 0302 	bic.w	r3, r3, r2
    32be:	543b      	strb	r3, [r7, r0]
    32c0:	00a3      	lsls	r3, r4, #2
    32c2:	f103 49a0 	add.w	r9, r3, #1342177280	; 0x50000000
    32c6:	f3c1 0a82 	ubfx	sl, r1, #2, #3
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    32ca:	f8d9 2700 	ldr.w	r2, [r9, #1792]	; 0x700
    if (is_level(trigger))
    32ce:	06cb      	lsls	r3, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    32d0:	46d3      	mov	fp, sl
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    32d2:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    32d6:	d518      	bpl.n	330a <nrfx_gpiote_irq_handler+0xde>
        call_handler(pin, trigger);
    32d8:	4659      	mov	r1, fp
    32da:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    32dc:	fa5f fa82 	uxtb.w	sl, r2
    32e0:	f7ff fd2c 	bl	2d3c <call_handler>
    32e4:	f8d9 3700 	ldr.w	r3, [r9, #1792]	; 0x700
        if (nrf_gpio_pin_sense_get(pin) == sense)
    32e8:	f3c3 4301 	ubfx	r3, r3, #16, #2
    32ec:	459a      	cmp	sl, r3
    32ee:	d107      	bne.n	3300 <nrfx_gpiote_irq_handler+0xd4>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    32f0:	2100      	movs	r1, #0
    32f2:	4620      	mov	r0, r4
    32f4:	f001 fdde 	bl	4eb4 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    32f8:	4651      	mov	r1, sl
    32fa:	4620      	mov	r0, r4
    32fc:	f001 fdda 	bl	4eb4 <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
    3300:	fa08 f404 	lsl.w	r4, r8, r4
    3304:	f8c6 4520 	str.w	r4, [r6, #1312]	; 0x520
}
    3308:	e7b4      	b.n	3274 <nrfx_gpiote_irq_handler+0x48>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    330a:	2a02      	cmp	r2, #2
    330c:	d10c      	bne.n	3328 <nrfx_gpiote_irq_handler+0xfc>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    330e:	2103      	movs	r1, #3
    3310:	4620      	mov	r0, r4
    3312:	f001 fdcf 	bl	4eb4 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    3316:	f00a 0305 	and.w	r3, sl, #5
    331a:	2b01      	cmp	r3, #1
    331c:	d1f0      	bne.n	3300 <nrfx_gpiote_irq_handler+0xd4>
            call_handler(pin, trigger);
    331e:	4659      	mov	r1, fp
    3320:	4620      	mov	r0, r4
    3322:	f7ff fd0b 	bl	2d3c <call_handler>
    3326:	e7eb      	b.n	3300 <nrfx_gpiote_irq_handler+0xd4>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    3328:	2102      	movs	r1, #2
    332a:	4620      	mov	r0, r4
    332c:	f001 fdc2 	bl	4eb4 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    3330:	f1ba 0f03 	cmp.w	sl, #3
    3334:	d0f3      	beq.n	331e <nrfx_gpiote_irq_handler+0xf2>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    3336:	2a03      	cmp	r2, #3
    3338:	d1e2      	bne.n	3300 <nrfx_gpiote_irq_handler+0xd4>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    333a:	458a      	cmp	sl, r1
    333c:	e7ee      	b.n	331c <nrfx_gpiote_irq_handler+0xf0>
        uint32_t ch = NRF_CTZ(mask);
    333e:	fa95 f3a5 	rbit	r3, r5
    3342:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    3346:	fa04 f203 	lsl.w	r2, r4, r3
    334a:	009b      	lsls	r3, r3, #2
    334c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3350:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    3354:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    3358:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    335c:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    3360:	f3c0 2004 	ubfx	r0, r0, #8, #5
    3364:	f3c1 4101 	ubfx	r1, r1, #16, #2
    3368:	f7ff fce8 	bl	2d3c <call_handler>
    336c:	e791      	b.n	3292 <nrfx_gpiote_irq_handler+0x66>
    336e:	bf00      	nop
    3370:	40006100 	.word	0x40006100
    3374:	40006000 	.word	0x40006000
    3378:	40006120 	.word	0x40006120
    337c:	2000003c 	.word	0x2000003c

00003380 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    3380:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    3382:	4801      	ldr	r0, [pc, #4]	; (3388 <nrfx_ppi_channel_alloc+0x8>)
    3384:	f7ff bbaa 	b.w	2adc <nrfx_flag32_alloc>
    3388:	20000098 	.word	0x20000098

0000338c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    338c:	4b0f      	ldr	r3, [pc, #60]	; (33cc <z_sys_init_run_level+0x40>)
{
    338e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3390:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    3394:	3001      	adds	r0, #1
    3396:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    339a:	42a6      	cmp	r6, r4
    339c:	d800      	bhi.n	33a0 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    339e:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    33a0:	e9d4 3500 	ldrd	r3, r5, [r4]
    33a4:	4628      	mov	r0, r5
    33a6:	4798      	blx	r3
		if (dev != NULL) {
    33a8:	b16d      	cbz	r5, 33c6 <z_sys_init_run_level+0x3a>
			if (rc != 0) {
    33aa:	b138      	cbz	r0, 33bc <z_sys_init_run_level+0x30>
				if (rc < 0) {
    33ac:	2800      	cmp	r0, #0
    33ae:	bfb8      	it	lt
    33b0:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    33b2:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
    33b4:	28ff      	cmp	r0, #255	; 0xff
    33b6:	bfa8      	it	ge
    33b8:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    33ba:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    33bc:	68ea      	ldr	r2, [r5, #12]
    33be:	7853      	ldrb	r3, [r2, #1]
    33c0:	f043 0301 	orr.w	r3, r3, #1
    33c4:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    33c6:	3408      	adds	r4, #8
    33c8:	e7e7      	b.n	339a <z_sys_init_run_level+0xe>
    33ca:	bf00      	nop
    33cc:	00005550 	.word	0x00005550

000033d0 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    33d0:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    33d2:	4b0a      	ldr	r3, [pc, #40]	; (33fc <bg_thread_main+0x2c>)
    33d4:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    33d6:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    33d8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    33da:	f7ff ffd7 	bl	338c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    33de:	f001 f933 	bl	4648 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    33e2:	2004      	movs	r0, #4
    33e4:	f7ff ffd2 	bl	338c <z_sys_init_run_level>

	z_init_static_threads();
    33e8:	f000 f91a 	bl	3620 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    33ec:	f7fc ffe2 	bl	3b4 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    33f0:	4a03      	ldr	r2, [pc, #12]	; (3400 <bg_thread_main+0x30>)
    33f2:	7b13      	ldrb	r3, [r2, #12]
    33f4:	f023 0301 	bic.w	r3, r3, #1
    33f8:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    33fa:	bd08      	pop	{r3, pc}
    33fc:	200003fa 	.word	0x200003fa
    3400:	20000188 	.word	0x20000188

00003404 <z_bss_zero>:
{
    3404:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    3406:	4803      	ldr	r0, [pc, #12]	; (3414 <z_bss_zero+0x10>)
    3408:	4a03      	ldr	r2, [pc, #12]	; (3418 <z_bss_zero+0x14>)
    340a:	2100      	movs	r1, #0
    340c:	1a12      	subs	r2, r2, r0
    340e:	f001 fd86 	bl	4f1e <z_early_memset>
}
    3412:	bd08      	pop	{r3, pc}
    3414:	200000e8 	.word	0x200000e8
    3418:	200003fc 	.word	0x200003fc

0000341c <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    341c:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    341e:	2300      	movs	r3, #0
{
    3420:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    3422:	2201      	movs	r2, #1
    3424:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    3428:	4e13      	ldr	r6, [pc, #76]	; (3478 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    342a:	4d14      	ldr	r5, [pc, #80]	; (347c <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    342c:	9301      	str	r3, [sp, #4]
    342e:	220f      	movs	r2, #15
    3430:	e9cd 3202 	strd	r3, r2, [sp, #8]
    3434:	4912      	ldr	r1, [pc, #72]	; (3480 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    3436:	2318      	movs	r3, #24
    3438:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    343c:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    3440:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    3442:	f44f 70a0 	mov.w	r0, #320	; 0x140
    3446:	fb00 1104 	mla	r1, r0, r4, r1
    344a:	4b0e      	ldr	r3, [pc, #56]	; (3484 <z_init_cpu+0x68>)
    344c:	9500      	str	r5, [sp, #0]
    344e:	f44f 7280 	mov.w	r2, #256	; 0x100
    3452:	4630      	mov	r0, r6
    3454:	f000 f886 	bl	3564 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3458:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    345a:	4a0b      	ldr	r2, [pc, #44]	; (3488 <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    345c:	60ee      	str	r6, [r5, #12]
    345e:	f023 0304 	bic.w	r3, r3, #4
    3462:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    3464:	f44f 6304 	mov.w	r3, #2112	; 0x840
    3468:	fb04 3303 	mla	r3, r4, r3, r3
    346c:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
    346e:	752c      	strb	r4, [r5, #20]
	_kernel.cpus[id].irq_stack =
    3470:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    3472:	b006      	add	sp, #24
    3474:	bd70      	pop	{r4, r5, r6, pc}
    3476:	bf00      	nop
    3478:	20000108 	.word	0x20000108
    347c:	200003b4 	.word	0x200003b4
    3480:	20000c40 	.word	0x20000c40
    3484:	000036d9 	.word	0x000036d9
    3488:	20000400 	.word	0x20000400

0000348c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    348c:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    348e:	2000      	movs	r0, #0
{
    3490:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    3492:	f7ff ff7b 	bl	338c <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    3496:	4b2c      	ldr	r3, [pc, #176]	; (3548 <z_cstart+0xbc>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    3498:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    349c:	4d2b      	ldr	r5, [pc, #172]	; (354c <z_cstart+0xc0>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    349e:	4e2c      	ldr	r6, [pc, #176]	; (3550 <z_cstart+0xc4>)
    34a0:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    34a2:	4f2c      	ldr	r7, [pc, #176]	; (3554 <z_cstart+0xc8>)
    34a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    34a8:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    34aa:	2400      	movs	r4, #0
    34ac:	23e0      	movs	r3, #224	; 0xe0
    34ae:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    34b2:	77ec      	strb	r4, [r5, #31]
    34b4:	762c      	strb	r4, [r5, #24]
    34b6:	766c      	strb	r4, [r5, #25]
    34b8:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    34ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    34bc:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    34c0:	626b      	str	r3, [r5, #36]	; 0x24
    34c2:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    34c6:	f7fd ffd3 	bl	1470 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    34ca:	f7fd fdb5 	bl	1038 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    34ce:	f04f 33ff 	mov.w	r3, #4294967295
    34d2:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    34d4:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    34d6:	f7fe f905 	bl	16e4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    34da:	f7fe f86b 	bl	15b4 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    34de:	f240 1301 	movw	r3, #257	; 0x101
    34e2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    34e6:	ab06      	add	r3, sp, #24
    34e8:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    34ea:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    34ee:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    34f0:	f001 fcee 	bl	4ed0 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    34f4:	2001      	movs	r0, #1
    34f6:	f7ff ff49 	bl	338c <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    34fa:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    34fc:	4d16      	ldr	r5, [pc, #88]	; (3558 <z_cstart+0xcc>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    34fe:	f7ff ff45 	bl	338c <z_sys_init_run_level>
	z_sched_init();
    3502:	f000 fd71 	bl	3fe8 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3506:	4b15      	ldr	r3, [pc, #84]	; (355c <z_cstart+0xd0>)
	_kernel.ready_q.cache = &z_main_thread;
    3508:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    350a:	9305      	str	r3, [sp, #20]
    350c:	2301      	movs	r3, #1
    350e:	4914      	ldr	r1, [pc, #80]	; (3560 <z_cstart+0xd4>)
    3510:	9400      	str	r4, [sp, #0]
    3512:	e9cd 4303 	strd	r4, r3, [sp, #12]
    3516:	f44f 6280 	mov.w	r2, #1024	; 0x400
    351a:	463b      	mov	r3, r7
    351c:	e9cd 4401 	strd	r4, r4, [sp, #4]
    3520:	4628      	mov	r0, r5
    3522:	f000 f81f 	bl	3564 <z_setup_new_thread>
    3526:	7b6a      	ldrb	r2, [r5, #13]
    3528:	4606      	mov	r6, r0
    352a:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    352e:	4628      	mov	r0, r5
    3530:	736a      	strb	r2, [r5, #13]
    3532:	f001 fdb8 	bl	50a6 <z_ready_thread>
	z_init_cpu(0);
    3536:	4620      	mov	r0, r4
    3538:	f7ff ff70 	bl	341c <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    353c:	463a      	mov	r2, r7
    353e:	4631      	mov	r1, r6
    3540:	4628      	mov	r0, r5
    3542:	f7fd fe6b 	bl	121c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    3546:	bf00      	nop
    3548:	20000c40 	.word	0x20000c40
    354c:	e000ed00 	.word	0xe000ed00
    3550:	200003b4 	.word	0x200003b4
    3554:	000033d1 	.word	0x000033d1
    3558:	20000188 	.word	0x20000188
    355c:	000055cd 	.word	0x000055cd
    3560:	20000d80 	.word	0x20000d80

00003564 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    3564:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    3568:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    356a:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    356c:	2604      	movs	r6, #4
    356e:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    3570:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    3572:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    3574:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    3578:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    357a:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    357c:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3580:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    3582:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    3584:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    3588:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    358a:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    358e:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    3592:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    3594:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    3596:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    3598:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    359c:	9202      	str	r2, [sp, #8]
    359e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    35a0:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    35a2:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    35a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    35a6:	9200      	str	r2, [sp, #0]
    35a8:	4642      	mov	r2, r8
{
    35aa:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    35ac:	f7fd fe04 	bl	11b8 <arch_new_thread>
	if (!_current) {
    35b0:	4b04      	ldr	r3, [pc, #16]	; (35c4 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    35b2:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    35b4:	689b      	ldr	r3, [r3, #8]
    35b6:	b103      	cbz	r3, 35ba <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    35b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    35ba:	6723      	str	r3, [r4, #112]	; 0x70
}
    35bc:	4640      	mov	r0, r8
    35be:	b004      	add	sp, #16
    35c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    35c4:	200003b4 	.word	0x200003b4

000035c8 <z_impl_k_thread_create>:
{
    35c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    35ca:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    35cc:	2500      	movs	r5, #0
    35ce:	9505      	str	r5, [sp, #20]
    35d0:	9d10      	ldr	r5, [sp, #64]	; 0x40
    35d2:	9504      	str	r5, [sp, #16]
    35d4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    35d6:	9503      	str	r5, [sp, #12]
    35d8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    35da:	9502      	str	r5, [sp, #8]
{
    35dc:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    35e0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    35e2:	9501      	str	r5, [sp, #4]
    35e4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    35e6:	9500      	str	r5, [sp, #0]
{
    35e8:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    35ea:	f7ff ffbb 	bl	3564 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    35ee:	f1b6 3fff 	cmp.w	r6, #4294967295
    35f2:	bf08      	it	eq
    35f4:	f1b7 3fff 	cmpeq.w	r7, #4294967295
    35f8:	d005      	beq.n	3606 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    35fa:	ea56 0307 	orrs.w	r3, r6, r7
    35fe:	d105      	bne.n	360c <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    3600:	4620      	mov	r0, r4
    3602:	f000 fc71 	bl	3ee8 <z_sched_start>
}
    3606:	4620      	mov	r0, r4
    3608:	b007      	add	sp, #28
    360a:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    360c:	4903      	ldr	r1, [pc, #12]	; (361c <z_impl_k_thread_create+0x54>)
    360e:	463a      	mov	r2, r7
    3610:	4633      	mov	r3, r6
    3612:	f104 0018 	add.w	r0, r4, #24
    3616:	f000 fe6f 	bl	42f8 <z_add_timeout>
    361a:	e7f4      	b.n	3606 <z_impl_k_thread_create+0x3e>
    361c:	00005013 	.word	0x00005013

00003620 <z_init_static_threads>:
{
    3620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3624:	4c29      	ldr	r4, [pc, #164]	; (36cc <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    3626:	4d2a      	ldr	r5, [pc, #168]	; (36d0 <z_init_static_threads+0xb0>)
{
    3628:	b087      	sub	sp, #28
    362a:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    362c:	42ae      	cmp	r6, r5
    362e:	f104 0430 	add.w	r4, r4, #48	; 0x30
    3632:	d30f      	bcc.n	3654 <z_init_static_threads+0x34>
	k_sched_lock();
    3634:	f000 fca8 	bl	3f88 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    3638:	4c24      	ldr	r4, [pc, #144]	; (36cc <z_init_static_threads+0xac>)
    363a:	f8df 9098 	ldr.w	r9, [pc, #152]	; 36d4 <z_init_static_threads+0xb4>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    363e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    3642:	f240 37e7 	movw	r7, #999	; 0x3e7
    3646:	42ac      	cmp	r4, r5
    3648:	d320      	bcc.n	368c <z_init_static_threads+0x6c>
}
    364a:	b007      	add	sp, #28
    364c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    3650:	f000 bcae 	b.w	3fb0 <k_sched_unlock>
		z_setup_new_thread(
    3654:	f854 3c04 	ldr.w	r3, [r4, #-4]
    3658:	9305      	str	r3, [sp, #20]
    365a:	f854 3c10 	ldr.w	r3, [r4, #-16]
    365e:	9304      	str	r3, [sp, #16]
    3660:	f854 3c14 	ldr.w	r3, [r4, #-20]
    3664:	9303      	str	r3, [sp, #12]
    3666:	f854 3c18 	ldr.w	r3, [r4, #-24]
    366a:	9302      	str	r3, [sp, #8]
    366c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    3670:	9301      	str	r3, [sp, #4]
    3672:	f854 3c20 	ldr.w	r3, [r4, #-32]
    3676:	9300      	str	r3, [sp, #0]
    3678:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    367c:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    3680:	f7ff ff70 	bl	3564 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    3684:	f854 3c30 	ldr.w	r3, [r4, #-48]
    3688:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    368a:	e7ce      	b.n	362a <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    368c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    368e:	1c5a      	adds	r2, r3, #1
    3690:	d00d      	beq.n	36ae <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    3692:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    3696:	2100      	movs	r1, #0
    3698:	4638      	mov	r0, r7
    369a:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    369e:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    36a2:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    36a6:	d104      	bne.n	36b2 <z_init_static_threads+0x92>
	z_sched_start(thread);
    36a8:	4640      	mov	r0, r8
    36aa:	f000 fc1d 	bl	3ee8 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    36ae:	3430      	adds	r4, #48	; 0x30
    36b0:	e7c9      	b.n	3646 <z_init_static_threads+0x26>
    36b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    36b6:	2300      	movs	r3, #0
    36b8:	f7fc fcfe 	bl	b8 <__aeabi_uldivmod>
    36bc:	4602      	mov	r2, r0
    36be:	460b      	mov	r3, r1
    36c0:	f108 0018 	add.w	r0, r8, #24
    36c4:	4649      	mov	r1, r9
    36c6:	f000 fe17 	bl	42f8 <z_add_timeout>
    36ca:	e7f0      	b.n	36ae <z_init_static_threads+0x8e>
    36cc:	0000542c 	.word	0x0000542c
    36d0:	0000542c 	.word	0x0000542c
    36d4:	00005013 	.word	0x00005013

000036d8 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    36d8:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    36da:	4c0b      	ldr	r4, [pc, #44]	; (3708 <idle+0x30>)
	return !z_sys_post_kernel;
    36dc:	4d0b      	ldr	r5, [pc, #44]	; (370c <idle+0x34>)
	__asm__ volatile(
    36de:	f04f 0220 	mov.w	r2, #32
    36e2:	f3ef 8311 	mrs	r3, BASEPRI
    36e6:	f382 8812 	msr	BASEPRI_MAX, r2
    36ea:	f3bf 8f6f 	isb	sy
    36ee:	f001 fd7c 	bl	51ea <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    36f2:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    36f4:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    36f6:	b913      	cbnz	r3, 36fe <idle+0x26>
	arch_cpu_idle();
    36f8:	f7fd fca4 	bl	1044 <arch_cpu_idle>
}
    36fc:	e7ef      	b.n	36de <idle+0x6>
    36fe:	f7fd fbcd 	bl	e9c <pm_system_suspend>
    3702:	2800      	cmp	r0, #0
    3704:	d1eb      	bne.n	36de <idle+0x6>
    3706:	e7f7      	b.n	36f8 <idle+0x20>
    3708:	200003b4 	.word	0x200003b4
    370c:	200003fa 	.word	0x200003fa

00003710 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    3710:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    3714:	4604      	mov	r4, r0
    3716:	4617      	mov	r7, r2
    3718:	461e      	mov	r6, r3
    371a:	f04f 0320 	mov.w	r3, #32
    371e:	f3ef 8811 	mrs	r8, BASEPRI
    3722:	f383 8812 	msr	BASEPRI_MAX, r3
    3726:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    372a:	68c3      	ldr	r3, [r0, #12]
    372c:	4a33      	ldr	r2, [pc, #204]	; (37fc <z_impl_k_mutex_lock+0xec>)
    372e:	b17b      	cbz	r3, 3750 <z_impl_k_mutex_lock+0x40>
    3730:	6880      	ldr	r0, [r0, #8]
    3732:	6891      	ldr	r1, [r2, #8]
    3734:	4288      	cmp	r0, r1
    3736:	d019      	beq.n	376c <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    3738:	ea57 0306 	orrs.w	r3, r7, r6
    373c:	d118      	bne.n	3770 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    373e:	f388 8811 	msr	BASEPRI, r8
    3742:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    3746:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    374a:	b002      	add	sp, #8
    374c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    3750:	6891      	ldr	r1, [r2, #8]
    3752:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    3756:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    3758:	3301      	adds	r3, #1
    375a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    375c:	6893      	ldr	r3, [r2, #8]
    375e:	60a3      	str	r3, [r4, #8]
    3760:	f388 8811 	msr	BASEPRI, r8
    3764:	f3bf 8f6f 	isb	sy
		return 0;
    3768:	2000      	movs	r0, #0
    376a:	e7ee      	b.n	374a <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    376c:	6921      	ldr	r1, [r4, #16]
    376e:	e7f2      	b.n	3756 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    3770:	f991 100e 	ldrsb.w	r1, [r1, #14]
    3774:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    3778:	4299      	cmp	r1, r3
    377a:	bfa8      	it	ge
    377c:	4619      	movge	r1, r3
    377e:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    3782:	4291      	cmp	r1, r2
    3784:	bfb8      	it	lt
    3786:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    3788:	428b      	cmp	r3, r1
    378a:	dd2e      	ble.n	37ea <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    378c:	f001 fbdd 	bl	4f4a <adjust_owner_prio.isra.0>
    3790:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    3792:	e9cd 7600 	strd	r7, r6, [sp]
    3796:	481a      	ldr	r0, [pc, #104]	; (3800 <z_impl_k_mutex_lock+0xf0>)
    3798:	4622      	mov	r2, r4
    379a:	4641      	mov	r1, r8
    379c:	f000 fb2e 	bl	3dfc <z_pend_curr>
	if (got_mutex == 0) {
    37a0:	2800      	cmp	r0, #0
    37a2:	d0e1      	beq.n	3768 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    37a4:	f04f 0320 	mov.w	r3, #32
    37a8:	f3ef 8611 	mrs	r6, BASEPRI
    37ac:	f383 8812 	msr	BASEPRI_MAX, r3
    37b0:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
    37b4:	68a0      	ldr	r0, [r4, #8]
    37b6:	b1d0      	cbz	r0, 37ee <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    37b8:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    37ba:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    37bc:	429c      	cmp	r4, r3
    37be:	d00a      	beq.n	37d6 <z_impl_k_mutex_lock+0xc6>
    37c0:	b14b      	cbz	r3, 37d6 <z_impl_k_mutex_lock+0xc6>
    37c2:	f993 300e 	ldrsb.w	r3, [r3, #14]
    37c6:	4299      	cmp	r1, r3
    37c8:	bfa8      	it	ge
    37ca:	4619      	movge	r1, r3
    37cc:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    37d0:	4299      	cmp	r1, r3
    37d2:	bfb8      	it	lt
    37d4:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    37d6:	f001 fbb8 	bl	4f4a <adjust_owner_prio.isra.0>
    37da:	b140      	cbz	r0, 37ee <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    37dc:	4808      	ldr	r0, [pc, #32]	; (3800 <z_impl_k_mutex_lock+0xf0>)
    37de:	4631      	mov	r1, r6
    37e0:	f000 fb70 	bl	3ec4 <z_reschedule>
	return -EAGAIN;
    37e4:	f06f 000a 	mvn.w	r0, #10
    37e8:	e7af      	b.n	374a <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    37ea:	2500      	movs	r5, #0
    37ec:	e7d1      	b.n	3792 <z_impl_k_mutex_lock+0x82>
	if (resched) {
    37ee:	2d00      	cmp	r5, #0
    37f0:	d1f4      	bne.n	37dc <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    37f2:	f386 8811 	msr	BASEPRI, r6
    37f6:	f3bf 8f6f 	isb	sy
    37fa:	e7f3      	b.n	37e4 <z_impl_k_mutex_lock+0xd4>
    37fc:	200003b4 	.word	0x200003b4
    3800:	200003fb 	.word	0x200003fb

00003804 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    3804:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    3806:	6883      	ldr	r3, [r0, #8]
{
    3808:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    380a:	b36b      	cbz	r3, 3868 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    380c:	4a19      	ldr	r2, [pc, #100]	; (3874 <z_impl_k_mutex_unlock+0x70>)
    380e:	6892      	ldr	r2, [r2, #8]
    3810:	4293      	cmp	r3, r2
    3812:	d12c      	bne.n	386e <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    3814:	68c3      	ldr	r3, [r0, #12]
    3816:	2b01      	cmp	r3, #1
    3818:	d903      	bls.n	3822 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    381a:	3b01      	subs	r3, #1
    381c:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    381e:	2000      	movs	r0, #0
}
    3820:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    3822:	f04f 0320 	mov.w	r3, #32
    3826:	f3ef 8511 	mrs	r5, BASEPRI
    382a:	f383 8812 	msr	BASEPRI_MAX, r3
    382e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    3832:	6901      	ldr	r1, [r0, #16]
    3834:	6880      	ldr	r0, [r0, #8]
    3836:	f001 fb88 	bl	4f4a <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    383a:	4620      	mov	r0, r4
    383c:	f001 fc6a 	bl	5114 <z_unpend_first_thread>
	mutex->owner = new_owner;
    3840:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    3842:	b158      	cbz	r0, 385c <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
    3844:	f990 200e 	ldrsb.w	r2, [r0, #14]
    3848:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    384a:	2200      	movs	r2, #0
    384c:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    384e:	f001 fc2a 	bl	50a6 <z_ready_thread>
		z_reschedule(&lock, key);
    3852:	4809      	ldr	r0, [pc, #36]	; (3878 <z_impl_k_mutex_unlock+0x74>)
    3854:	4629      	mov	r1, r5
    3856:	f000 fb35 	bl	3ec4 <z_reschedule>
    385a:	e7e0      	b.n	381e <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    385c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    385e:	f385 8811 	msr	BASEPRI, r5
    3862:	f3bf 8f6f 	isb	sy
    3866:	e7da      	b.n	381e <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    3868:	f06f 0015 	mvn.w	r0, #21
    386c:	e7d8      	b.n	3820 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    386e:	f04f 30ff 	mov.w	r0, #4294967295
    3872:	e7d5      	b.n	3820 <z_impl_k_mutex_unlock+0x1c>
    3874:	200003b4 	.word	0x200003b4
    3878:	200003fb 	.word	0x200003fb

0000387c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    387c:	b538      	push	{r3, r4, r5, lr}
    387e:	4604      	mov	r4, r0
	__asm__ volatile(
    3880:	f04f 0320 	mov.w	r3, #32
    3884:	f3ef 8511 	mrs	r5, BASEPRI
    3888:	f383 8812 	msr	BASEPRI_MAX, r3
    388c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    3890:	f001 fc40 	bl	5114 <z_unpend_first_thread>

	if (thread != NULL) {
    3894:	b148      	cbz	r0, 38aa <z_impl_k_sem_give+0x2e>
    3896:	2200      	movs	r2, #0
    3898:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    389a:	f001 fc04 	bl	50a6 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    389e:	4629      	mov	r1, r5
    38a0:	4805      	ldr	r0, [pc, #20]	; (38b8 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    38a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    38a6:	f000 bb0d 	b.w	3ec4 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    38aa:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    38ae:	429a      	cmp	r2, r3
    38b0:	bf18      	it	ne
    38b2:	3301      	addne	r3, #1
    38b4:	60a3      	str	r3, [r4, #8]
}
    38b6:	e7f2      	b.n	389e <z_impl_k_sem_give+0x22>
    38b8:	200003fb 	.word	0x200003fb

000038bc <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    38bc:	b513      	push	{r0, r1, r4, lr}
    38be:	f04f 0420 	mov.w	r4, #32
    38c2:	f3ef 8111 	mrs	r1, BASEPRI
    38c6:	f384 8812 	msr	BASEPRI_MAX, r4
    38ca:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    38ce:	6884      	ldr	r4, [r0, #8]
    38d0:	b144      	cbz	r4, 38e4 <z_impl_k_sem_take+0x28>
		sem->count--;
    38d2:	3c01      	subs	r4, #1
    38d4:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    38d6:	f381 8811 	msr	BASEPRI, r1
    38da:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    38de:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    38e0:	b002      	add	sp, #8
    38e2:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    38e4:	ea52 0403 	orrs.w	r4, r2, r3
    38e8:	d106      	bne.n	38f8 <z_impl_k_sem_take+0x3c>
    38ea:	f381 8811 	msr	BASEPRI, r1
    38ee:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    38f2:	f06f 000f 	mvn.w	r0, #15
    38f6:	e7f3      	b.n	38e0 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    38f8:	e9cd 2300 	strd	r2, r3, [sp]
    38fc:	4602      	mov	r2, r0
    38fe:	4802      	ldr	r0, [pc, #8]	; (3908 <z_impl_k_sem_take+0x4c>)
    3900:	f000 fa7c 	bl	3dfc <z_pend_curr>
	return ret;
    3904:	e7ec      	b.n	38e0 <z_impl_k_sem_take+0x24>
    3906:	bf00      	nop
    3908:	200003fb 	.word	0x200003fb

0000390c <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    390c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
    3910:	4e4a      	ldr	r6, [pc, #296]	; (3a3c <work_queue_main+0x130>)
    3912:	b085      	sub	sp, #20
    3914:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    3916:	f04f 38ff 	mov.w	r8, #4294967295
    391a:	f04f 39ff 	mov.w	r9, #4294967295
	__asm__ volatile(
    391e:	f04f 0320 	mov.w	r3, #32
    3922:	f3ef 8711 	mrs	r7, BASEPRI
    3926:	f383 8812 	msr	BASEPRI_MAX, r3
    392a:	f3bf 8f6f 	isb	sy
    392e:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    3932:	b98d      	cbnz	r5, 3958 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
    3934:	2102      	movs	r1, #2
    3936:	f104 0098 	add.w	r0, r4, #152	; 0x98
    393a:	f001 fb21 	bl	4f80 <flag_test_and_clear>
    393e:	2800      	cmp	r0, #0
    3940:	d143      	bne.n	39ca <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    3942:	2300      	movs	r3, #0
    3944:	e9cd 8900 	strd	r8, r9, [sp]
    3948:	9302      	str	r3, [sp, #8]
    394a:	f104 0288 	add.w	r2, r4, #136	; 0x88
    394e:	4639      	mov	r1, r7
    3950:	483b      	ldr	r0, [pc, #236]	; (3a40 <work_queue_main+0x134>)
    3952:	f000 fc57 	bl	4204 <z_sched_wait>
			continue;
    3956:	e7e2      	b.n	391e <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    3958:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
    395c:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    395e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    3962:	4295      	cmp	r5, r2
	list->tail = node;
    3964:	bf08      	it	eq
    3966:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
    396a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    396e:	f043 0302 	orr.w	r3, r3, #2
    3972:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
    3976:	68eb      	ldr	r3, [r5, #12]
    3978:	f023 0304 	bic.w	r3, r3, #4
    397c:	f043 0301 	orr.w	r3, r3, #1
    3980:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    3982:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    3984:	f387 8811 	msr	BASEPRI, r7
    3988:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    398c:	4628      	mov	r0, r5
    398e:	4798      	blx	r3
	__asm__ volatile(
    3990:	f04f 0320 	mov.w	r3, #32
    3994:	f3ef 8b11 	mrs	fp, BASEPRI
    3998:	f383 8812 	msr	BASEPRI_MAX, r3
    399c:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    39a0:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    39a2:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    39a4:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    39a8:	d419      	bmi.n	39de <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
    39aa:	60ea      	str	r2, [r5, #12]
    39ac:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    39b0:	f023 0302 	bic.w	r3, r3, #2
    39b4:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
    39b8:	f38b 8811 	msr	BASEPRI, fp
    39bc:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    39c0:	05db      	lsls	r3, r3, #23
    39c2:	d4ac      	bmi.n	391e <work_queue_main+0x12>
	z_impl_k_yield();
    39c4:	f000 fb1c 	bl	4000 <z_impl_k_yield>
}
    39c8:	e7a9      	b.n	391e <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    39ca:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    39ce:	2200      	movs	r2, #0
    39d0:	2101      	movs	r1, #1
    39d2:	4628      	mov	r0, r5
    39d4:	f001 fbd0 	bl	5178 <z_sched_wake>
    39d8:	2800      	cmp	r0, #0
    39da:	d1f8      	bne.n	39ce <work_queue_main+0xc2>
    39dc:	e7b1      	b.n	3942 <work_queue_main+0x36>
	return list->head;
    39de:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    39e0:	f023 0303 	bic.w	r3, r3, #3
    39e4:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    39e6:	2800      	cmp	r0, #0
    39e8:	d0e0      	beq.n	39ac <work_queue_main+0xa0>
	return node->next;
    39ea:	2700      	movs	r7, #0
    39ec:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
    39f0:	463b      	mov	r3, r7
    39f2:	2800      	cmp	r0, #0
    39f4:	d0da      	beq.n	39ac <work_queue_main+0xa0>
		if (wc->work == work) {
    39f6:	6842      	ldr	r2, [r0, #4]
    39f8:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    39fa:	4601      	mov	r1, r0
		if (wc->work == work) {
    39fc:	d10c      	bne.n	3a18 <work_queue_main+0x10c>
	return node->next;
    39fe:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    3a00:	b99f      	cbnz	r7, 3a2a <work_queue_main+0x11e>
    3a02:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    3a04:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    3a06:	4282      	cmp	r2, r0
    3a08:	d100      	bne.n	3a0c <work_queue_main+0x100>
	list->tail = node;
    3a0a:	6071      	str	r1, [r6, #4]
	parent->next = child;
    3a0c:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    3a10:	f7ff ff34 	bl	387c <z_impl_k_sem_give>
}
    3a14:	4639      	mov	r1, r7
    3a16:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    3a18:	f1ba 0f00 	cmp.w	sl, #0
    3a1c:	d00b      	beq.n	3a36 <work_queue_main+0x12a>
	return node->next;
    3a1e:	f8da 2000 	ldr.w	r2, [sl]
    3a22:	4650      	mov	r0, sl
    3a24:	460f      	mov	r7, r1
    3a26:	4692      	mov	sl, r2
    3a28:	e7e3      	b.n	39f2 <work_queue_main+0xe6>
	parent->next = child;
    3a2a:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    3a2c:	6872      	ldr	r2, [r6, #4]
    3a2e:	4282      	cmp	r2, r0
	list->tail = node;
    3a30:	bf08      	it	eq
    3a32:	6077      	streq	r7, [r6, #4]
}
    3a34:	e7ea      	b.n	3a0c <work_queue_main+0x100>
    3a36:	4652      	mov	r2, sl
    3a38:	e7f3      	b.n	3a22 <work_queue_main+0x116>
    3a3a:	bf00      	nop
    3a3c:	200003dc 	.word	0x200003dc
    3a40:	200003fb 	.word	0x200003fb

00003a44 <submit_to_queue_locked>:
{
    3a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
    3a46:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    3a48:	079a      	lsls	r2, r3, #30
{
    3a4a:	4604      	mov	r4, r0
    3a4c:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    3a4e:	f3c3 0640 	ubfx	r6, r3, #1, #1
    3a52:	d42c      	bmi.n	3aae <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x16>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    3a54:	075b      	lsls	r3, r3, #29
    3a56:	d41a      	bmi.n	3a8e <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
    3a58:	680b      	ldr	r3, [r1, #0]
    3a5a:	b90b      	cbnz	r3, 3a60 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    3a5c:	6883      	ldr	r3, [r0, #8]
    3a5e:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
    3a60:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    3a62:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
    3a64:	bf44      	itt	mi
    3a66:	68a3      	ldrmi	r3, [r4, #8]
    3a68:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
    3a6a:	683d      	ldr	r5, [r7, #0]
			ret = 2;
    3a6c:	bf4c      	ite	mi
    3a6e:	2602      	movmi	r6, #2
		ret = 1;
    3a70:	2601      	movpl	r6, #1
	if (queue == NULL) {
    3a72:	2d00      	cmp	r5, #0
    3a74:	d03a      	beq.n	3aec <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x54>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    3a76:	4b1f      	ldr	r3, [pc, #124]	; (3af4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x5c>)
    3a78:	689b      	ldr	r3, [r3, #8]
    3a7a:	42ab      	cmp	r3, r5
    3a7c:	d00a      	beq.n	3a94 <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
    3a7e:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    3a82:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    3a84:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    3a88:	d414      	bmi.n	3ab4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c>
		ret = -EBUSY;
    3a8a:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
    3a8e:	2300      	movs	r3, #0
    3a90:	603b      	str	r3, [r7, #0]
	return ret;
    3a92:	e025      	b.n	3ae0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x48>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    3a94:	f001 fa47 	bl	4f26 <k_is_in_isr>
    3a98:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    3a9c:	2800      	cmp	r0, #0
    3a9e:	d1f0      	bne.n	3a82 <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    3aa0:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    3aa2:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    3aa6:	d5f0      	bpl.n	3a8a <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
    3aa8:	b152      	cbz	r2, 3ac0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28>
    3aaa:	075b      	lsls	r3, r3, #29
    3aac:	d408      	bmi.n	3ac0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28>
		ret = -EBUSY;
    3aae:	f06f 060f 	mvn.w	r6, #15
    3ab2:	e7ec      	b.n	3a8e <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
    3ab4:	2a00      	cmp	r2, #0
    3ab6:	d1fa      	bne.n	3aae <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x16>
	return (*flagp & BIT(bit)) != 0U;
    3ab8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
    3abc:	2b00      	cmp	r3, #0
    3abe:	d1f6      	bne.n	3aae <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x16>
	parent->next = child;
    3ac0:	2300      	movs	r3, #0
    3ac2:	6023      	str	r3, [r4, #0]
	return list->tail;
    3ac4:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
    3ac8:	b963      	cbnz	r3, 3ae4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4c>
	list->head = node;
    3aca:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
    3ace:	4628      	mov	r0, r5
    3ad0:	f001 fa61 	bl	4f96 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
    3ad4:	68e3      	ldr	r3, [r4, #12]
    3ad6:	f043 0304 	orr.w	r3, r3, #4
    3ada:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    3adc:	683b      	ldr	r3, [r7, #0]
    3ade:	60a3      	str	r3, [r4, #8]
}
    3ae0:	4630      	mov	r0, r6
    3ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    3ae4:	601c      	str	r4, [r3, #0]
	list->tail = node;
    3ae6:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
    3aea:	e7f0      	b.n	3ace <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x36>
		return -EINVAL;
    3aec:	f06f 0615 	mvn.w	r6, #21
    3af0:	e7cd      	b.n	3a8e <submit_to_queue_locked+0x4a>
    3af2:	bf00      	nop
    3af4:	200003b4 	.word	0x200003b4

00003af8 <k_work_submit>:
{
    3af8:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
    3afa:	4801      	ldr	r0, [pc, #4]	; (3b00 <k_work_submit+0x8>)
    3afc:	f001 ba66 	b.w	4fcc <k_work_submit_to_queue>
    3b00:	20000210 	.word	0x20000210

00003b04 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    3b04:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b06:	b089      	sub	sp, #36	; 0x24
    3b08:	4604      	mov	r4, r0
	list->head = NULL;
    3b0a:	2000      	movs	r0, #0
	list->tail = NULL;
    3b0c:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
    3b10:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    3b12:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
    3b16:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
    3b1a:	f104 0090 	add.w	r0, r4, #144	; 0x90
    3b1e:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    3b22:	b31d      	cbz	r5, 3b6c <k_work_queue_start+0x68>
    3b24:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    3b26:	2800      	cmp	r0, #0
    3b28:	f240 1001 	movw	r0, #257	; 0x101
    3b2c:	bf08      	it	eq
    3b2e:	2001      	moveq	r0, #1
	*flagp = flags;
    3b30:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    3b34:	2000      	movs	r0, #0
    3b36:	f04f 36ff 	mov.w	r6, #4294967295
    3b3a:	f04f 37ff 	mov.w	r7, #4294967295
    3b3e:	e9cd 3003 	strd	r3, r0, [sp, #12]
    3b42:	e9cd 0001 	strd	r0, r0, [sp, #4]
    3b46:	e9cd 6706 	strd	r6, r7, [sp, #24]
    3b4a:	4b09      	ldr	r3, [pc, #36]	; (3b70 <k_work_queue_start+0x6c>)
    3b4c:	9400      	str	r4, [sp, #0]
    3b4e:	4620      	mov	r0, r4
    3b50:	f7ff fd3a 	bl	35c8 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    3b54:	b125      	cbz	r5, 3b60 <k_work_queue_start+0x5c>
    3b56:	6829      	ldr	r1, [r5, #0]
    3b58:	b111      	cbz	r1, 3b60 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    3b5a:	4620      	mov	r0, r4
    3b5c:	f001 f9e9 	bl	4f32 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    3b60:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    3b62:	b009      	add	sp, #36	; 0x24
    3b64:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    3b68:	f001 b9e6 	b.w	4f38 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    3b6c:	2001      	movs	r0, #1
    3b6e:	e7df      	b.n	3b30 <k_work_queue_start+0x2c>
    3b70:	0000390d 	.word	0x0000390d

00003b74 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    3b74:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    3b76:	4d07      	ldr	r5, [pc, #28]	; (3b94 <z_reset_time_slice+0x20>)
    3b78:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    3b7a:	b154      	cbz	r4, 3b92 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    3b7c:	f7fe fdda 	bl	2734 <sys_clock_elapsed>
    3b80:	4b05      	ldr	r3, [pc, #20]	; (3b98 <z_reset_time_slice+0x24>)
    3b82:	4404      	add	r4, r0
    3b84:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    3b86:	6828      	ldr	r0, [r5, #0]
    3b88:	2100      	movs	r1, #0
	}
}
    3b8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    3b8e:	f001 bb3c 	b.w	520a <z_set_timeout_expiry>
}
    3b92:	bd38      	pop	{r3, r4, r5, pc}
    3b94:	200003ec 	.word	0x200003ec
    3b98:	200003b4 	.word	0x200003b4

00003b9c <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    3b9c:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    3b9e:	4d0d      	ldr	r5, [pc, #52]	; (3bd4 <update_cache+0x38>)
    3ba0:	462b      	mov	r3, r5
    3ba2:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3ba6:	429c      	cmp	r4, r3
    3ba8:	d000      	beq.n	3bac <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    3baa:	b904      	cbnz	r4, 3bae <update_cache+0x12>
    3bac:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    3bae:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    3bb0:	b938      	cbnz	r0, 3bc2 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    3bb2:	7b5a      	ldrb	r2, [r3, #13]
    3bb4:	06d2      	lsls	r2, r2, #27
    3bb6:	d104      	bne.n	3bc2 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    3bb8:	69a2      	ldr	r2, [r4, #24]
    3bba:	b912      	cbnz	r2, 3bc2 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    3bbc:	89da      	ldrh	r2, [r3, #14]
    3bbe:	2a7f      	cmp	r2, #127	; 0x7f
    3bc0:	d805      	bhi.n	3bce <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    3bc2:	429c      	cmp	r4, r3
    3bc4:	d002      	beq.n	3bcc <update_cache+0x30>
			z_reset_time_slice(thread);
    3bc6:	4620      	mov	r0, r4
    3bc8:	f7ff ffd4 	bl	3b74 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    3bcc:	4623      	mov	r3, r4
    3bce:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    3bd0:	bd38      	pop	{r3, r4, r5, pc}
    3bd2:	bf00      	nop
    3bd4:	200003b4 	.word	0x200003b4

00003bd8 <move_thread_to_end_of_prio_q>:
{
    3bd8:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    3bda:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    3bde:	7b43      	ldrb	r3, [r0, #13]
    3be0:	2a00      	cmp	r2, #0
{
    3be2:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    3be4:	da04      	bge.n	3bf0 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3be6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3bea:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    3bec:	f001 f9ff 	bl	4fee <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    3bf0:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    3bf2:	4a15      	ldr	r2, [pc, #84]	; (3c48 <move_thread_to_end_of_prio_q+0x70>)
    3bf4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3bf8:	4610      	mov	r0, r2
    3bfa:	734b      	strb	r3, [r1, #13]
    3bfc:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    3c00:	6a54      	ldr	r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3c02:	4283      	cmp	r3, r0
    3c04:	bf08      	it	eq
    3c06:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3c08:	b923      	cbnz	r3, 3c14 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    3c0a:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    3c0e:	6021      	str	r1, [r4, #0]
	list->tail = node;
    3c10:	6251      	str	r1, [r2, #36]	; 0x24
}
    3c12:	e00c      	b.n	3c2e <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
    3c14:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    3c18:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    3c1c:	42b5      	cmp	r5, r6
    3c1e:	d00e      	beq.n	3c3e <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    3c20:	42ae      	cmp	r6, r5
    3c22:	dd0c      	ble.n	3c3e <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    3c24:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    3c26:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    3c2a:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    3c2c:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    3c2e:	6890      	ldr	r0, [r2, #8]
    3c30:	1a43      	subs	r3, r0, r1
    3c32:	4258      	negs	r0, r3
}
    3c34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    3c38:	4158      	adcs	r0, r3
    3c3a:	f7ff bfaf 	b.w	3b9c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    3c3e:	429c      	cmp	r4, r3
    3c40:	d0e3      	beq.n	3c0a <move_thread_to_end_of_prio_q+0x32>
    3c42:	681b      	ldr	r3, [r3, #0]
    3c44:	e7e0      	b.n	3c08 <move_thread_to_end_of_prio_q+0x30>
    3c46:	bf00      	nop
    3c48:	200003b4 	.word	0x200003b4

00003c4c <ready_thread>:
{
    3c4c:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    3c4e:	f990 300d 	ldrsb.w	r3, [r0, #13]
    3c52:	7b42      	ldrb	r2, [r0, #13]
    3c54:	2b00      	cmp	r3, #0
    3c56:	db29      	blt.n	3cac <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    3c58:	06d3      	lsls	r3, r2, #27
    3c5a:	d127      	bne.n	3cac <ready_thread+0x60>
	return node->next != NULL;
    3c5c:	6983      	ldr	r3, [r0, #24]
    3c5e:	bb2b      	cbnz	r3, 3cac <ready_thread+0x60>
	return list->head == list;
    3c60:	4913      	ldr	r1, [pc, #76]	; (3cb0 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    3c62:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3c66:	7342      	strb	r2, [r0, #13]
    3c68:	460a      	mov	r2, r1
    3c6a:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3c6e:	4294      	cmp	r4, r2
    3c70:	bf18      	it	ne
    3c72:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    3c74:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3c76:	b923      	cbnz	r3, 3c82 <ready_thread+0x36>
	node->prev = tail;
    3c78:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    3c7c:	6020      	str	r0, [r4, #0]
	list->tail = node;
    3c7e:	6248      	str	r0, [r1, #36]	; 0x24
}
    3c80:	e00c      	b.n	3c9c <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    3c82:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    3c86:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    3c8a:	42b5      	cmp	r5, r6
    3c8c:	d00a      	beq.n	3ca4 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    3c8e:	42ae      	cmp	r6, r5
    3c90:	dd08      	ble.n	3ca4 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    3c92:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    3c94:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    3c98:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    3c9a:	6058      	str	r0, [r3, #4]
}
    3c9c:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    3c9e:	2000      	movs	r0, #0
    3ca0:	f7ff bf7c 	b.w	3b9c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    3ca4:	42a3      	cmp	r3, r4
    3ca6:	d0e7      	beq.n	3c78 <ready_thread+0x2c>
    3ca8:	681b      	ldr	r3, [r3, #0]
    3caa:	e7e4      	b.n	3c76 <ready_thread+0x2a>
}
    3cac:	bc70      	pop	{r4, r5, r6}
    3cae:	4770      	bx	lr
    3cb0:	200003b4 	.word	0x200003b4

00003cb4 <unready_thread>:
{
    3cb4:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    3cb6:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    3cba:	7b43      	ldrb	r3, [r0, #13]
    3cbc:	2a00      	cmp	r2, #0
{
    3cbe:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    3cc0:	da04      	bge.n	3ccc <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3cc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3cc6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3cc8:	f001 f991 	bl	4fee <sys_dlist_remove>
	update_cache(thread == _current);
    3ccc:	4b04      	ldr	r3, [pc, #16]	; (3ce0 <unready_thread+0x2c>)
    3cce:	6898      	ldr	r0, [r3, #8]
    3cd0:	1a43      	subs	r3, r0, r1
    3cd2:	4258      	negs	r0, r3
    3cd4:	4158      	adcs	r0, r3
}
    3cd6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    3cda:	f7ff bf5f 	b.w	3b9c <update_cache>
    3cde:	bf00      	nop
    3ce0:	200003b4 	.word	0x200003b4

00003ce4 <pend_locked>:
{
    3ce4:	b570      	push	{r4, r5, r6, lr}
    3ce6:	4615      	mov	r5, r2
    3ce8:	461c      	mov	r4, r3
    3cea:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    3cec:	f001 f9b3 	bl	5056 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3cf0:	f1b4 3fff 	cmp.w	r4, #4294967295
    3cf4:	bf08      	it	eq
    3cf6:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    3cfa:	d008      	beq.n	3d0e <pend_locked+0x2a>
    3cfc:	462a      	mov	r2, r5
    3cfe:	4623      	mov	r3, r4
    3d00:	f106 0018 	add.w	r0, r6, #24
    3d04:	4902      	ldr	r1, [pc, #8]	; (3d10 <pend_locked+0x2c>)
}
    3d06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3d0a:	f000 baf5 	b.w	42f8 <z_add_timeout>
    3d0e:	bd70      	pop	{r4, r5, r6, pc}
    3d10:	00005013 	.word	0x00005013

00003d14 <k_sched_time_slice_set>:
{
    3d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d16:	4604      	mov	r4, r0
    3d18:	460d      	mov	r5, r1
	__asm__ volatile(
    3d1a:	f04f 0320 	mov.w	r3, #32
    3d1e:	f3ef 8711 	mrs	r7, BASEPRI
    3d22:	f383 8812 	msr	BASEPRI_MAX, r3
    3d26:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
    3d2a:	2600      	movs	r6, #0
    3d2c:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    3d30:	f240 30e7 	movw	r0, #999	; 0x3e7
    3d34:	4631      	mov	r1, r6
    3d36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3d3a:	2300      	movs	r3, #0
    3d3c:	fbe4 010c 	umlal	r0, r1, r4, ip
    3d40:	f7fc f9ba 	bl	b8 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    3d44:	42b4      	cmp	r4, r6
    3d46:	dd02      	ble.n	3d4e <k_sched_time_slice_set+0x3a>
			slice_ticks = MAX(2, slice_ticks);
    3d48:	2802      	cmp	r0, #2
    3d4a:	bfb8      	it	lt
    3d4c:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    3d4e:	4a07      	ldr	r2, [pc, #28]	; (3d6c <k_sched_time_slice_set+0x58>)
		_current_cpu->slice_ticks = 0;
    3d50:	4b07      	ldr	r3, [pc, #28]	; (3d70 <k_sched_time_slice_set+0x5c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    3d52:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
    3d54:	4a07      	ldr	r2, [pc, #28]	; (3d74 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
    3d56:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
    3d58:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
    3d5a:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
    3d5c:	f7ff ff0a 	bl	3b74 <z_reset_time_slice>
	__asm__ volatile(
    3d60:	f387 8811 	msr	BASEPRI, r7
    3d64:	f3bf 8f6f 	isb	sy
}
    3d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3d6a:	bf00      	nop
    3d6c:	200003ec 	.word	0x200003ec
    3d70:	200003b4 	.word	0x200003b4
    3d74:	200003e8 	.word	0x200003e8

00003d78 <z_time_slice>:
{
    3d78:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    3d7a:	f04f 0320 	mov.w	r3, #32
    3d7e:	f3ef 8511 	mrs	r5, BASEPRI
    3d82:	f383 8812 	msr	BASEPRI_MAX, r3
    3d86:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    3d8a:	4b17      	ldr	r3, [pc, #92]	; (3de8 <z_time_slice+0x70>)
    3d8c:	4a17      	ldr	r2, [pc, #92]	; (3dec <z_time_slice+0x74>)
    3d8e:	689c      	ldr	r4, [r3, #8]
    3d90:	6811      	ldr	r1, [r2, #0]
    3d92:	428c      	cmp	r4, r1
    3d94:	d107      	bne.n	3da6 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
    3d96:	4620      	mov	r0, r4
    3d98:	f7ff feec 	bl	3b74 <z_reset_time_slice>
	__asm__ volatile(
    3d9c:	f385 8811 	msr	BASEPRI, r5
    3da0:	f3bf 8f6f 	isb	sy
}
    3da4:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    3da6:	2100      	movs	r1, #0
    3da8:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    3daa:	4a11      	ldr	r2, [pc, #68]	; (3df0 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
    3dac:	6812      	ldr	r2, [r2, #0]
    3dae:	b1c2      	cbz	r2, 3de2 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    3db0:	89e2      	ldrh	r2, [r4, #14]
    3db2:	2a7f      	cmp	r2, #127	; 0x7f
    3db4:	d815      	bhi.n	3de2 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    3db6:	7b62      	ldrb	r2, [r4, #13]
    3db8:	06d2      	lsls	r2, r2, #27
    3dba:	d112      	bne.n	3de2 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    3dbc:	4a0d      	ldr	r2, [pc, #52]	; (3df4 <z_time_slice+0x7c>)
    3dbe:	f994 100e 	ldrsb.w	r1, [r4, #14]
    3dc2:	6812      	ldr	r2, [r2, #0]
    3dc4:	4291      	cmp	r1, r2
    3dc6:	db0c      	blt.n	3de2 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    3dc8:	4a0b      	ldr	r2, [pc, #44]	; (3df8 <z_time_slice+0x80>)
    3dca:	4294      	cmp	r4, r2
    3dcc:	d009      	beq.n	3de2 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    3dce:	691a      	ldr	r2, [r3, #16]
    3dd0:	4282      	cmp	r2, r0
    3dd2:	dc03      	bgt.n	3ddc <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
    3dd4:	4620      	mov	r0, r4
    3dd6:	f7ff feff 	bl	3bd8 <move_thread_to_end_of_prio_q>
    3dda:	e7dc      	b.n	3d96 <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
    3ddc:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
    3dde:	611a      	str	r2, [r3, #16]
    3de0:	e7dc      	b.n	3d9c <z_time_slice+0x24>
    3de2:	2200      	movs	r2, #0
    3de4:	e7fb      	b.n	3dde <z_time_slice+0x66>
    3de6:	bf00      	nop
    3de8:	200003b4 	.word	0x200003b4
    3dec:	200003e4 	.word	0x200003e4
    3df0:	200003ec 	.word	0x200003ec
    3df4:	200003e8 	.word	0x200003e8
    3df8:	20000108 	.word	0x20000108

00003dfc <z_pend_curr>:
{
    3dfc:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
    3dfe:	480c      	ldr	r0, [pc, #48]	; (3e30 <z_pend_curr+0x34>)
    3e00:	4d0c      	ldr	r5, [pc, #48]	; (3e34 <z_pend_curr+0x38>)
    3e02:	6886      	ldr	r6, [r0, #8]
    3e04:	602e      	str	r6, [r5, #0]
{
    3e06:	460c      	mov	r4, r1
    3e08:	4611      	mov	r1, r2
    3e0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    3e0e:	f04f 0620 	mov.w	r6, #32
    3e12:	f3ef 8511 	mrs	r5, BASEPRI
    3e16:	f386 8812 	msr	BASEPRI_MAX, r6
    3e1a:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    3e1e:	6880      	ldr	r0, [r0, #8]
    3e20:	f7ff ff60 	bl	3ce4 <pend_locked>
	ret = arch_swap(key);
    3e24:	4620      	mov	r0, r4
}
    3e26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3e2a:	f7fd b971 	b.w	1110 <arch_swap>
    3e2e:	bf00      	nop
    3e30:	200003b4 	.word	0x200003b4
    3e34:	200003e4 	.word	0x200003e4

00003e38 <z_set_prio>:
{
    3e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e3a:	4604      	mov	r4, r0
    3e3c:	f04f 0320 	mov.w	r3, #32
    3e40:	f3ef 8611 	mrs	r6, BASEPRI
    3e44:	f383 8812 	msr	BASEPRI_MAX, r3
    3e48:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    3e4c:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    3e4e:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    3e50:	b249      	sxtb	r1, r1
    3e52:	d119      	bne.n	3e88 <z_set_prio+0x50>
	return node->next != NULL;
    3e54:	6985      	ldr	r5, [r0, #24]
    3e56:	b9bd      	cbnz	r5, 3e88 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3e58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3e5c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3e5e:	f001 f8c6 	bl	4fee <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    3e62:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    3e64:	4a16      	ldr	r2, [pc, #88]	; (3ec0 <z_set_prio+0x88>)
				thread->base.prio = prio;
    3e66:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    3e68:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3e6c:	7343      	strb	r3, [r0, #13]
    3e6e:	4613      	mov	r3, r2
    3e70:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3e74:	4298      	cmp	r0, r3
    3e76:	bf18      	it	ne
    3e78:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
    3e7a:	6a50      	ldr	r0, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3e7c:	b95d      	cbnz	r5, 3e96 <z_set_prio+0x5e>
	node->prev = tail;
    3e7e:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
    3e82:	6004      	str	r4, [r0, #0]
	list->tail = node;
    3e84:	6254      	str	r4, [r2, #36]	; 0x24
}
    3e86:	e011      	b.n	3eac <z_set_prio+0x74>
			thread->base.prio = prio;
    3e88:	73a1      	strb	r1, [r4, #14]
    3e8a:	2000      	movs	r0, #0
	__asm__ volatile(
    3e8c:	f386 8811 	msr	BASEPRI, r6
    3e90:	f3bf 8f6f 	isb	sy
}
    3e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
    3e96:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
    3e9a:	42b9      	cmp	r1, r7
    3e9c:	d00b      	beq.n	3eb6 <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    3e9e:	428f      	cmp	r7, r1
    3ea0:	dd09      	ble.n	3eb6 <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
    3ea2:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    3ea4:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    3ea8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    3eaa:	606c      	str	r4, [r5, #4]
			update_cache(1);
    3eac:	2001      	movs	r0, #1
    3eae:	f7ff fe75 	bl	3b9c <update_cache>
    3eb2:	2001      	movs	r0, #1
    3eb4:	e7ea      	b.n	3e8c <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
    3eb6:	42a8      	cmp	r0, r5
    3eb8:	d0e1      	beq.n	3e7e <z_set_prio+0x46>
    3eba:	682d      	ldr	r5, [r5, #0]
    3ebc:	e7de      	b.n	3e7c <z_set_prio+0x44>
    3ebe:	bf00      	nop
    3ec0:	200003b4 	.word	0x200003b4

00003ec4 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    3ec4:	b949      	cbnz	r1, 3eda <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3ec6:	f3ef 8005 	mrs	r0, IPSR
    3eca:	b930      	cbnz	r0, 3eda <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    3ecc:	4b05      	ldr	r3, [pc, #20]	; (3ee4 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    3ece:	69da      	ldr	r2, [r3, #28]
    3ed0:	689b      	ldr	r3, [r3, #8]
    3ed2:	429a      	cmp	r2, r3
    3ed4:	d001      	beq.n	3eda <z_reschedule+0x16>
    3ed6:	f7fd b91b 	b.w	1110 <arch_swap>
    3eda:	f381 8811 	msr	BASEPRI, r1
    3ede:	f3bf 8f6f 	isb	sy
}
    3ee2:	4770      	bx	lr
    3ee4:	200003b4 	.word	0x200003b4

00003ee8 <z_sched_start>:
{
    3ee8:	b510      	push	{r4, lr}
	__asm__ volatile(
    3eea:	f04f 0220 	mov.w	r2, #32
    3eee:	f3ef 8411 	mrs	r4, BASEPRI
    3ef2:	f382 8812 	msr	BASEPRI_MAX, r2
    3ef6:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    3efa:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    3efc:	0751      	lsls	r1, r2, #29
    3efe:	d404      	bmi.n	3f0a <z_sched_start+0x22>
	__asm__ volatile(
    3f00:	f384 8811 	msr	BASEPRI, r4
    3f04:	f3bf 8f6f 	isb	sy
}
    3f08:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3f0a:	f022 0204 	bic.w	r2, r2, #4
    3f0e:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    3f10:	f7ff fe9c 	bl	3c4c <ready_thread>
	z_reschedule(&sched_spinlock, key);
    3f14:	4621      	mov	r1, r4
    3f16:	4802      	ldr	r0, [pc, #8]	; (3f20 <z_sched_start+0x38>)
}
    3f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    3f1c:	f7ff bfd2 	b.w	3ec4 <z_reschedule>
    3f20:	200003fb 	.word	0x200003fb

00003f24 <z_impl_k_thread_suspend>:
{
    3f24:	b570      	push	{r4, r5, r6, lr}
    3f26:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    3f28:	3018      	adds	r0, #24
    3f2a:	f001 f948 	bl	51be <z_abort_timeout>
	__asm__ volatile(
    3f2e:	f04f 0320 	mov.w	r3, #32
    3f32:	f3ef 8611 	mrs	r6, BASEPRI
    3f36:	f383 8812 	msr	BASEPRI_MAX, r3
    3f3a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    3f3e:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    3f42:	7b63      	ldrb	r3, [r4, #13]
    3f44:	2a00      	cmp	r2, #0
    3f46:	da05      	bge.n	3f54 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3f48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3f4c:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3f4e:	4620      	mov	r0, r4
    3f50:	f001 f84d 	bl	4fee <sys_dlist_remove>
		update_cache(thread == _current);
    3f54:	4d0b      	ldr	r5, [pc, #44]	; (3f84 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    3f56:	7b63      	ldrb	r3, [r4, #13]
    3f58:	68a8      	ldr	r0, [r5, #8]
    3f5a:	f043 0310 	orr.w	r3, r3, #16
    3f5e:	7363      	strb	r3, [r4, #13]
    3f60:	1b03      	subs	r3, r0, r4
    3f62:	4258      	negs	r0, r3
    3f64:	4158      	adcs	r0, r3
    3f66:	f7ff fe19 	bl	3b9c <update_cache>
	__asm__ volatile(
    3f6a:	f386 8811 	msr	BASEPRI, r6
    3f6e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    3f72:	68ab      	ldr	r3, [r5, #8]
    3f74:	42a3      	cmp	r3, r4
    3f76:	d103      	bne.n	3f80 <z_impl_k_thread_suspend+0x5c>
}
    3f78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    3f7c:	f001 b8f2 	b.w	5164 <z_reschedule_unlocked>
}
    3f80:	bd70      	pop	{r4, r5, r6, pc}
    3f82:	bf00      	nop
    3f84:	200003b4 	.word	0x200003b4

00003f88 <k_sched_lock>:
	__asm__ volatile(
    3f88:	f04f 0320 	mov.w	r3, #32
    3f8c:	f3ef 8111 	mrs	r1, BASEPRI
    3f90:	f383 8812 	msr	BASEPRI_MAX, r3
    3f94:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    3f98:	4b04      	ldr	r3, [pc, #16]	; (3fac <k_sched_lock+0x24>)
    3f9a:	689a      	ldr	r2, [r3, #8]
    3f9c:	7bd3      	ldrb	r3, [r2, #15]
    3f9e:	3b01      	subs	r3, #1
    3fa0:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    3fa2:	f381 8811 	msr	BASEPRI, r1
    3fa6:	f3bf 8f6f 	isb	sy
}
    3faa:	4770      	bx	lr
    3fac:	200003b4 	.word	0x200003b4

00003fb0 <k_sched_unlock>:
{
    3fb0:	b510      	push	{r4, lr}
	__asm__ volatile(
    3fb2:	f04f 0320 	mov.w	r3, #32
    3fb6:	f3ef 8411 	mrs	r4, BASEPRI
    3fba:	f383 8812 	msr	BASEPRI_MAX, r3
    3fbe:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    3fc2:	4b08      	ldr	r3, [pc, #32]	; (3fe4 <k_sched_unlock+0x34>)
    3fc4:	689a      	ldr	r2, [r3, #8]
    3fc6:	7bd3      	ldrb	r3, [r2, #15]
    3fc8:	3301      	adds	r3, #1
    3fca:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    3fcc:	2000      	movs	r0, #0
    3fce:	f7ff fde5 	bl	3b9c <update_cache>
	__asm__ volatile(
    3fd2:	f384 8811 	msr	BASEPRI, r4
    3fd6:	f3bf 8f6f 	isb	sy
}
    3fda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    3fde:	f001 b8c1 	b.w	5164 <z_reschedule_unlocked>
    3fe2:	bf00      	nop
    3fe4:	200003b4 	.word	0x200003b4

00003fe8 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    3fe8:	4b04      	ldr	r3, [pc, #16]	; (3ffc <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    3fea:	2100      	movs	r1, #0
    3fec:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    3ff0:	e9c3 2208 	strd	r2, r2, [r3, #32]
    3ff4:	4608      	mov	r0, r1
    3ff6:	f7ff be8d 	b.w	3d14 <k_sched_time_slice_set>
    3ffa:	bf00      	nop
    3ffc:	200003b4 	.word	0x200003b4

00004000 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    4000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    4002:	f04f 0320 	mov.w	r3, #32
    4006:	f3ef 8511 	mrs	r5, BASEPRI
    400a:	f383 8812 	msr	BASEPRI_MAX, r3
    400e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    4012:	4919      	ldr	r1, [pc, #100]	; (4078 <z_impl_k_yield+0x78>)
    4014:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4016:	7b43      	ldrb	r3, [r0, #13]
    4018:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    401c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    401e:	f000 ffe6 	bl	4fee <sys_dlist_remove>
	}
	queue_thread(_current);
    4022:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    4024:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    4026:	4608      	mov	r0, r1
    4028:	f062 027f 	orn	r2, r2, #127	; 0x7f
    402c:	735a      	strb	r2, [r3, #13]
    402e:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return (node == list->tail) ? NULL : node->next;
    4032:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4034:	4282      	cmp	r2, r0
    4036:	bf08      	it	eq
    4038:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    403a:	b922      	cbnz	r2, 4046 <z_impl_k_yield+0x46>
	node->prev = tail;
    403c:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    4040:	6023      	str	r3, [r4, #0]
	list->tail = node;
    4042:	624b      	str	r3, [r1, #36]	; 0x24
}
    4044:	e00c      	b.n	4060 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    4046:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    404a:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    404e:	42be      	cmp	r6, r7
    4050:	d00e      	beq.n	4070 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    4052:	42b7      	cmp	r7, r6
    4054:	dd0c      	ble.n	4070 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    4056:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    4058:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    405c:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    405e:	6053      	str	r3, [r2, #4]
	update_cache(1);
    4060:	2001      	movs	r0, #1
    4062:	f7ff fd9b 	bl	3b9c <update_cache>
    4066:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    4068:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    406c:	f7fd b850 	b.w	1110 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    4070:	42a2      	cmp	r2, r4
    4072:	d0e3      	beq.n	403c <z_impl_k_yield+0x3c>
    4074:	6812      	ldr	r2, [r2, #0]
    4076:	e7e0      	b.n	403a <z_impl_k_yield+0x3a>
    4078:	200003b4 	.word	0x200003b4

0000407c <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    407c:	ea50 0301 	orrs.w	r3, r0, r1
{
    4080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4084:	4605      	mov	r5, r0
    4086:	460e      	mov	r6, r1
	if (ticks == 0) {
    4088:	d103      	bne.n	4092 <z_tick_sleep+0x16>
	z_impl_k_yield();
    408a:	f7ff ffb9 	bl	4000 <z_impl_k_yield>
		k_yield();
		return 0;
    408e:	2000      	movs	r0, #0
    4090:	e02c      	b.n	40ec <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    4092:	1c83      	adds	r3, r0, #2
    4094:	f171 33ff 	sbcs.w	r3, r1, #4294967295
    4098:	db2a      	blt.n	40f0 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    409a:	f001 f8d2 	bl	5242 <sys_clock_tick_get_32>
    409e:	1944      	adds	r4, r0, r5
    40a0:	f04f 0320 	mov.w	r3, #32
    40a4:	f3ef 8811 	mrs	r8, BASEPRI
    40a8:	f383 8812 	msr	BASEPRI_MAX, r3
    40ac:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    40b0:	4f11      	ldr	r7, [pc, #68]	; (40f8 <z_tick_sleep+0x7c>)
    40b2:	4b12      	ldr	r3, [pc, #72]	; (40fc <z_tick_sleep+0x80>)
    40b4:	68b8      	ldr	r0, [r7, #8]
    40b6:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    40b8:	f7ff fdfc 	bl	3cb4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    40bc:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    40be:	4910      	ldr	r1, [pc, #64]	; (4100 <z_tick_sleep+0x84>)
    40c0:	462a      	mov	r2, r5
    40c2:	4633      	mov	r3, r6
    40c4:	3018      	adds	r0, #24
    40c6:	f000 f917 	bl	42f8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    40ca:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    40cc:	7b53      	ldrb	r3, [r2, #13]
    40ce:	f043 0310 	orr.w	r3, r3, #16
    40d2:	7353      	strb	r3, [r2, #13]
    40d4:	4640      	mov	r0, r8
    40d6:	f7fd f81b 	bl	1110 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    40da:	f001 f8b2 	bl	5242 <sys_clock_tick_get_32>
    40de:	1a20      	subs	r0, r4, r0
    40e0:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    40e4:	2801      	cmp	r0, #1
    40e6:	f173 0300 	sbcs.w	r3, r3, #0
    40ea:	dbd0      	blt.n	408e <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    40ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    40f0:	f06f 0401 	mvn.w	r4, #1
    40f4:	1a24      	subs	r4, r4, r0
    40f6:	e7d3      	b.n	40a0 <z_tick_sleep+0x24>
    40f8:	200003b4 	.word	0x200003b4
    40fc:	200003e4 	.word	0x200003e4
    4100:	00005013 	.word	0x00005013

00004104 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4104:	f1b1 3fff 	cmp.w	r1, #4294967295
    4108:	bf08      	it	eq
    410a:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    410e:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4110:	d106      	bne.n	4120 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    4112:	4b08      	ldr	r3, [pc, #32]	; (4134 <z_impl_k_sleep+0x30>)
    4114:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    4116:	f7ff ff05 	bl	3f24 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    411a:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    411e:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    4120:	f7ff ffac 	bl	407c <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    4124:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    4128:	fb80 0303 	smull	r0, r3, r0, r3
    412c:	0bc0      	lsrs	r0, r0, #15
    412e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    4132:	e7f4      	b.n	411e <z_impl_k_sleep+0x1a>
    4134:	200003b4 	.word	0x200003b4

00004138 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    4138:	4b01      	ldr	r3, [pc, #4]	; (4140 <z_impl_z_current_get+0x8>)
    413a:	6898      	ldr	r0, [r3, #8]
    413c:	4770      	bx	lr
    413e:	bf00      	nop
    4140:	200003b4 	.word	0x200003b4

00004144 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    4144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4148:	4604      	mov	r4, r0
    414a:	f04f 0320 	mov.w	r3, #32
    414e:	f3ef 8611 	mrs	r6, BASEPRI
    4152:	f383 8812 	msr	BASEPRI_MAX, r3
    4156:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    415a:	7b03      	ldrb	r3, [r0, #12]
    415c:	07d9      	lsls	r1, r3, #31
    415e:	d50b      	bpl.n	4178 <z_thread_abort+0x34>
	__asm__ volatile(
    4160:	f386 8811 	msr	BASEPRI, r6
    4164:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    4168:	4040      	eors	r0, r0
    416a:	f380 8811 	msr	BASEPRI, r0
    416e:	f04f 0004 	mov.w	r0, #4
    4172:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    4174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    4178:	7b43      	ldrb	r3, [r0, #13]
    417a:	071a      	lsls	r2, r3, #28
    417c:	d504      	bpl.n	4188 <z_thread_abort+0x44>
    417e:	f386 8811 	msr	BASEPRI, r6
    4182:	f3bf 8f6f 	isb	sy
    4186:	e7f5      	b.n	4174 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    4188:	f023 0220 	bic.w	r2, r3, #32
    418c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    4190:	09d2      	lsrs	r2, r2, #7
    4192:	d120      	bne.n	41d6 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    4194:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    4196:	68a3      	ldr	r3, [r4, #8]
    4198:	b113      	cbz	r3, 41a0 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    419a:	4620      	mov	r0, r4
    419c:	f000 ff2f 	bl	4ffe <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    41a0:	f104 0018 	add.w	r0, r4, #24
    41a4:	f001 f80b 	bl	51be <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    41a8:	f104 0758 	add.w	r7, r4, #88	; 0x58
    41ac:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    41b0:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    41b2:	42bd      	cmp	r5, r7
    41b4:	d000      	beq.n	41b8 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    41b6:	b9b5      	cbnz	r5, 41e6 <z_thread_abort+0xa2>
		update_cache(1);
    41b8:	2001      	movs	r0, #1
    41ba:	f7ff fcef 	bl	3b9c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    41be:	4b10      	ldr	r3, [pc, #64]	; (4200 <z_thread_abort+0xbc>)
    41c0:	689b      	ldr	r3, [r3, #8]
    41c2:	42a3      	cmp	r3, r4
    41c4:	d1db      	bne.n	417e <z_thread_abort+0x3a>
    41c6:	f3ef 8305 	mrs	r3, IPSR
    41ca:	2b00      	cmp	r3, #0
    41cc:	d1d7      	bne.n	417e <z_thread_abort+0x3a>
    41ce:	4630      	mov	r0, r6
    41d0:	f7fc ff9e 	bl	1110 <arch_swap>
	return ret;
    41d4:	e7d3      	b.n	417e <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    41d6:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    41da:	f043 0308 	orr.w	r3, r3, #8
    41de:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    41e0:	f000 ff05 	bl	4fee <sys_dlist_remove>
}
    41e4:	e7d7      	b.n	4196 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    41e6:	4628      	mov	r0, r5
    41e8:	f000 ff09 	bl	4ffe <unpend_thread_no_timeout>
    41ec:	f105 0018 	add.w	r0, r5, #24
    41f0:	f000 ffe5 	bl	51be <z_abort_timeout>
    41f4:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    41f8:	4628      	mov	r0, r5
    41fa:	f7ff fd27 	bl	3c4c <ready_thread>
    41fe:	e7d7      	b.n	41b0 <z_thread_abort+0x6c>
    4200:	200003b4 	.word	0x200003b4

00004204 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    4204:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    4206:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    420a:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    420c:	e9cd 6700 	strd	r6, r7, [sp]
    4210:	f7ff fdf4 	bl	3dfc <z_pend_curr>

	if (data != NULL) {
    4214:	b11c      	cbz	r4, 421e <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    4216:	4b03      	ldr	r3, [pc, #12]	; (4224 <z_sched_wait+0x20>)
    4218:	689b      	ldr	r3, [r3, #8]
    421a:	695b      	ldr	r3, [r3, #20]
    421c:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    421e:	b002      	add	sp, #8
    4220:	bdd0      	pop	{r4, r6, r7, pc}
    4222:	bf00      	nop
    4224:	200003b4 	.word	0x200003b4

00004228 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    4228:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    422a:	4806      	ldr	r0, [pc, #24]	; (4244 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    422c:	4a06      	ldr	r2, [pc, #24]	; (4248 <z_data_copy+0x20>)
    422e:	4907      	ldr	r1, [pc, #28]	; (424c <z_data_copy+0x24>)
    4230:	1a12      	subs	r2, r2, r0
    4232:	f000 fe76 	bl	4f22 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    4236:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    423a:	4a05      	ldr	r2, [pc, #20]	; (4250 <z_data_copy+0x28>)
    423c:	4905      	ldr	r1, [pc, #20]	; (4254 <z_data_copy+0x2c>)
    423e:	4806      	ldr	r0, [pc, #24]	; (4258 <z_data_copy+0x30>)
    4240:	f000 be6f 	b.w	4f22 <z_early_memcpy>
    4244:	20000000 	.word	0x20000000
    4248:	200000e8 	.word	0x200000e8
    424c:	0000560c 	.word	0x0000560c
    4250:	00000000 	.word	0x00000000
    4254:	0000560c 	.word	0x0000560c
    4258:	20000000 	.word	0x20000000

0000425c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    425c:	4b03      	ldr	r3, [pc, #12]	; (426c <elapsed+0x10>)
    425e:	681b      	ldr	r3, [r3, #0]
    4260:	b90b      	cbnz	r3, 4266 <elapsed+0xa>
    4262:	f7fe ba67 	b.w	2734 <sys_clock_elapsed>
}
    4266:	2000      	movs	r0, #0
    4268:	4770      	bx	lr
    426a:	bf00      	nop
    426c:	200003f0 	.word	0x200003f0

00004270 <next_timeout>:

static int32_t next_timeout(void)
{
    4270:	b510      	push	{r4, lr}
	return list->head == list;
    4272:	4b11      	ldr	r3, [pc, #68]	; (42b8 <next_timeout+0x48>)
    4274:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4276:	429c      	cmp	r4, r3
    4278:	d10a      	bne.n	4290 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    427a:	f7ff ffef 	bl	425c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    427e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    4282:	4b0e      	ldr	r3, [pc, #56]	; (42bc <next_timeout+0x4c>)
    4284:	691b      	ldr	r3, [r3, #16]
    4286:	b113      	cbz	r3, 428e <next_timeout+0x1e>
    4288:	4298      	cmp	r0, r3
    428a:	bfa8      	it	ge
    428c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    428e:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    4290:	f7ff ffe4 	bl	425c <elapsed>
	if ((to == NULL) ||
    4294:	2c00      	cmp	r4, #0
    4296:	d0f2      	beq.n	427e <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    4298:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    429c:	1a1b      	subs	r3, r3, r0
    429e:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    42a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    42a6:	f172 0100 	sbcs.w	r1, r2, #0
    42aa:	dae8      	bge.n	427e <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    42ac:	2a00      	cmp	r2, #0
    42ae:	bfac      	ite	ge
    42b0:	4618      	movge	r0, r3
    42b2:	2000      	movlt	r0, #0
    42b4:	e7e5      	b.n	4282 <next_timeout+0x12>
    42b6:	bf00      	nop
    42b8:	2000009c 	.word	0x2000009c
    42bc:	200003b4 	.word	0x200003b4

000042c0 <remove_timeout>:
{
    42c0:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    42c2:	b170      	cbz	r0, 42e2 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    42c4:	4b0b      	ldr	r3, [pc, #44]	; (42f4 <remove_timeout+0x34>)
    42c6:	685b      	ldr	r3, [r3, #4]
    42c8:	4298      	cmp	r0, r3
    42ca:	d00a      	beq.n	42e2 <remove_timeout+0x22>
    42cc:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    42ce:	b143      	cbz	r3, 42e2 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    42d0:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    42d4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    42d8:	1912      	adds	r2, r2, r4
    42da:	eb41 0105 	adc.w	r1, r1, r5
    42de:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    42e2:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    42e6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    42e8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    42ea:	2300      	movs	r3, #0
	node->prev = NULL;
    42ec:	e9c0 3300 	strd	r3, r3, [r0]
}
    42f0:	bd30      	pop	{r4, r5, pc}
    42f2:	bf00      	nop
    42f4:	2000009c 	.word	0x2000009c

000042f8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    42f8:	f1b3 3fff 	cmp.w	r3, #4294967295
    42fc:	bf08      	it	eq
    42fe:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    4302:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4304:	4604      	mov	r4, r0
    4306:	461d      	mov	r5, r3
    4308:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    430a:	d061      	beq.n	43d0 <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    430c:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    430e:	f04f 0320 	mov.w	r3, #32
    4312:	f3ef 8711 	mrs	r7, BASEPRI
    4316:	f383 8812 	msr	BASEPRI_MAX, r3
    431a:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    431e:	3201      	adds	r2, #1
    4320:	f175 33ff 	sbcs.w	r3, r5, #4294967295
    4324:	da24      	bge.n	4370 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    4326:	4930      	ldr	r1, [pc, #192]	; (43e8 <z_add_timeout+0xf0>)
    4328:	e9d1 2000 	ldrd	r2, r0, [r1]
    432c:	f06f 0301 	mvn.w	r3, #1
    4330:	1a9b      	subs	r3, r3, r2
    4332:	f04f 32ff 	mov.w	r2, #4294967295
    4336:	eb62 0000 	sbc.w	r0, r2, r0
    433a:	1b9e      	subs	r6, r3, r6
    433c:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    4340:	2e01      	cmp	r6, #1
    4342:	f170 0300 	sbcs.w	r3, r0, #0
    4346:	da01      	bge.n	434c <z_add_timeout+0x54>
    4348:	2601      	movs	r6, #1
    434a:	2000      	movs	r0, #0
    434c:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    4350:	4e26      	ldr	r6, [pc, #152]	; (43ec <z_add_timeout+0xf4>)
    4352:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    4356:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4358:	45b4      	cmp	ip, r6
    435a:	bf08      	it	eq
    435c:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    4360:	f1bc 0f00 	cmp.w	ip, #0
    4364:	d10d      	bne.n	4382 <z_add_timeout+0x8a>
	node->prev = tail;
    4366:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    436a:	602c      	str	r4, [r5, #0]
	list->tail = node;
    436c:	6074      	str	r4, [r6, #4]
}
    436e:	e01c      	b.n	43aa <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    4370:	f7ff ff74 	bl	425c <elapsed>
    4374:	3601      	adds	r6, #1
    4376:	f145 0500 	adc.w	r5, r5, #0
    437a:	1836      	adds	r6, r6, r0
    437c:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    4380:	e7e4      	b.n	434c <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    4382:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    4386:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    438a:	4293      	cmp	r3, r2
    438c:	eb71 0e00 	sbcs.w	lr, r1, r0
    4390:	da1f      	bge.n	43d2 <z_add_timeout+0xda>
				t->dticks -= to->dticks;
    4392:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    4394:	f8dc 3004 	ldr.w	r3, [ip, #4]
    4398:	eb60 0001 	sbc.w	r0, r0, r1
    439c:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    43a0:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    43a4:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    43a6:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    43aa:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    43ac:	42b3      	cmp	r3, r6
    43ae:	d00b      	beq.n	43c8 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    43b0:	429c      	cmp	r4, r3
    43b2:	d109      	bne.n	43c8 <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    43b4:	f7ff ff5c 	bl	4270 <next_timeout>

			if (next_time == 0 ||
    43b8:	b118      	cbz	r0, 43c2 <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
    43ba:	4b0d      	ldr	r3, [pc, #52]	; (43f0 <z_add_timeout+0xf8>)
			if (next_time == 0 ||
    43bc:	691b      	ldr	r3, [r3, #16]
    43be:	4283      	cmp	r3, r0
    43c0:	d002      	beq.n	43c8 <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
    43c2:	2100      	movs	r1, #0
    43c4:	f7fe f984 	bl	26d0 <sys_clock_set_timeout>
	__asm__ volatile(
    43c8:	f387 8811 	msr	BASEPRI, r7
    43cc:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    43d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    43d2:	1a9b      	subs	r3, r3, r2
    43d4:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    43d8:	45ac      	cmp	ip, r5
    43da:	e9c4 3104 	strd	r3, r1, [r4, #16]
    43de:	d0c2      	beq.n	4366 <z_add_timeout+0x6e>
    43e0:	f8dc c000 	ldr.w	ip, [ip]
    43e4:	e7bc      	b.n	4360 <z_add_timeout+0x68>
    43e6:	bf00      	nop
    43e8:	20000208 	.word	0x20000208
    43ec:	2000009c 	.word	0x2000009c
    43f0:	200003b4 	.word	0x200003b4

000043f4 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    43f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    43f8:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    43fa:	f7ff fcbd 	bl	3d78 <z_time_slice>
	__asm__ volatile(
    43fe:	f04f 0320 	mov.w	r3, #32
    4402:	f3ef 8611 	mrs	r6, BASEPRI
    4406:	f383 8812 	msr	BASEPRI_MAX, r3
    440a:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    440e:	4f23      	ldr	r7, [pc, #140]	; (449c <sys_clock_announce+0xa8>)
	return list->head == list;
    4410:	f8df 808c 	ldr.w	r8, [pc, #140]	; 44a0 <sys_clock_announce+0xac>
    4414:	f8d8 0000 	ldr.w	r0, [r8]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    4418:	4a22      	ldr	r2, [pc, #136]	; (44a4 <sys_clock_announce+0xb0>)
	announce_remaining = ticks;
    441a:	603c      	str	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    441c:	4540      	cmp	r0, r8
		curr_tick += dt;
    441e:	e9d2 3e00 	ldrd	r3, lr, [r2]
    4422:	ea4f 71e4 	mov.w	r1, r4, asr #31
    4426:	d00b      	beq.n	4440 <sys_clock_announce+0x4c>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    4428:	b150      	cbz	r0, 4440 <sys_clock_announce+0x4c>
    442a:	e9d0 5c04 	ldrd	r5, ip, [r0, #16]
    442e:	42ac      	cmp	r4, r5
    4430:	eb71 090c 	sbcs.w	r9, r1, ip
    4434:	da16      	bge.n	4464 <sys_clock_announce+0x70>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    4436:	1b2d      	subs	r5, r5, r4
    4438:	eb6c 0c01 	sbc.w	ip, ip, r1
    443c:	e9c0 5c04 	strd	r5, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    4440:	18e3      	adds	r3, r4, r3
    4442:	eb4e 0101 	adc.w	r1, lr, r1
	announce_remaining = 0;
    4446:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    4448:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
    444c:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
    444e:	f7ff ff0f 	bl	4270 <next_timeout>
    4452:	4621      	mov	r1, r4
    4454:	f7fe f93c 	bl	26d0 <sys_clock_set_timeout>
	__asm__ volatile(
    4458:	f386 8811 	msr	BASEPRI, r6
    445c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    4460:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    4464:	18eb      	adds	r3, r5, r3
    4466:	eb4e 71e5 	adc.w	r1, lr, r5, asr #31
    446a:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
    446e:	2200      	movs	r2, #0
    4470:	2300      	movs	r3, #0
    4472:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
    4476:	f7ff ff23 	bl	42c0 <remove_timeout>
    447a:	f386 8811 	msr	BASEPRI, r6
    447e:	f3bf 8f6f 	isb	sy
		t->fn(t);
    4482:	6883      	ldr	r3, [r0, #8]
    4484:	4798      	blx	r3
	__asm__ volatile(
    4486:	f04f 0320 	mov.w	r3, #32
    448a:	f3ef 8611 	mrs	r6, BASEPRI
    448e:	f383 8812 	msr	BASEPRI_MAX, r3
    4492:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    4496:	683c      	ldr	r4, [r7, #0]
    4498:	1b64      	subs	r4, r4, r5
    449a:	e7bb      	b.n	4414 <sys_clock_announce+0x20>
    449c:	200003f0 	.word	0x200003f0
    44a0:	2000009c 	.word	0x2000009c
    44a4:	20000208 	.word	0x20000208

000044a8 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    44a8:	b510      	push	{r4, lr}
    44aa:	f04f 0320 	mov.w	r3, #32
    44ae:	f3ef 8411 	mrs	r4, BASEPRI
    44b2:	f383 8812 	msr	BASEPRI_MAX, r3
    44b6:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    44ba:	f7ff fecf 	bl	425c <elapsed>
    44be:	4a06      	ldr	r2, [pc, #24]	; (44d8 <sys_clock_tick_get+0x30>)
    44c0:	4603      	mov	r3, r0
    44c2:	e9d2 0100 	ldrd	r0, r1, [r2]
    44c6:	1818      	adds	r0, r3, r0
    44c8:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    44cc:	f384 8811 	msr	BASEPRI, r4
    44d0:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    44d4:	bd10      	pop	{r4, pc}
    44d6:	bf00      	nop
    44d8:	20000208 	.word	0x20000208

000044dc <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    44dc:	b570      	push	{r4, r5, r6, lr}
    44de:	4604      	mov	r4, r0
	__asm__ volatile(
    44e0:	f04f 0320 	mov.w	r3, #32
    44e4:	f3ef 8511 	mrs	r5, BASEPRI
    44e8:	f383 8812 	msr	BASEPRI_MAX, r3
    44ec:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    44f0:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
    44f4:	3301      	adds	r3, #1
    44f6:	f142 0200 	adc.w	r2, r2, #0
    44fa:	2b02      	cmp	r3, #2
    44fc:	f172 0200 	sbcs.w	r2, r2, #0
    4500:	d322      	bcc.n	4548 <z_timer_expiration_handler+0x6c>
	return z_impl_k_uptime_ticks();
    4502:	f000 fea2 	bl	524a <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
    4506:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
    450a:	3001      	adds	r0, #1
    450c:	f141 0100 	adc.w	r1, r1, #0
    4510:	18c0      	adds	r0, r0, r3
    4512:	eb41 0102 	adc.w	r1, r1, r2
    4516:	2801      	cmp	r0, #1
    4518:	f171 0100 	sbcs.w	r1, r1, #0
    451c:	db32      	blt.n	4584 <z_timer_expiration_handler+0xa8>
    451e:	f000 fe94 	bl	524a <z_impl_k_uptime_ticks>
    4522:	3001      	adds	r0, #1
    4524:	f141 0300 	adc.w	r3, r1, #0
    4528:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
    452c:	1880      	adds	r0, r0, r2
    452e:	f06f 0201 	mvn.w	r2, #1
    4532:	eb43 0301 	adc.w	r3, r3, r1
    4536:	1a12      	subs	r2, r2, r0
    4538:	f04f 31ff 	mov.w	r1, #4294967295
    453c:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    4540:	491a      	ldr	r1, [pc, #104]	; (45ac <z_timer_expiration_handler+0xd0>)
    4542:	4620      	mov	r0, r4
    4544:	f7ff fed8 	bl	42f8 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
    4548:	6b23      	ldr	r3, [r4, #48]	; 0x30
    454a:	3301      	adds	r3, #1
    454c:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    454e:	6a23      	ldr	r3, [r4, #32]
    4550:	b173      	cbz	r3, 4570 <z_timer_expiration_handler+0x94>
	__asm__ volatile(
    4552:	f385 8811 	msr	BASEPRI, r5
    4556:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    455a:	6a23      	ldr	r3, [r4, #32]
    455c:	4620      	mov	r0, r4
    455e:	4798      	blx	r3
	__asm__ volatile(
    4560:	f04f 0320 	mov.w	r3, #32
    4564:	f3ef 8511 	mrs	r5, BASEPRI
    4568:	f383 8812 	msr	BASEPRI_MAX, r3
    456c:	f3bf 8f6f 	isb	sy
	return list->head == list;
    4570:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4574:	42a6      	cmp	r6, r4
    4576:	d000      	beq.n	457a <z_timer_expiration_handler+0x9e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    4578:	b94e      	cbnz	r6, 458e <z_timer_expiration_handler+0xb2>
	__asm__ volatile(
    457a:	f385 8811 	msr	BASEPRI, r5
    457e:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    4582:	bd70      	pop	{r4, r5, r6, pc}
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
    4584:	f06f 0201 	mvn.w	r2, #1
    4588:	f04f 33ff 	mov.w	r3, #4294967295
    458c:	e7d8      	b.n	4540 <z_timer_expiration_handler+0x64>
	z_unpend_thread_no_timeout(thread);
    458e:	4630      	mov	r0, r6
    4590:	f000 fd99 	bl	50c6 <z_unpend_thread_no_timeout>
    4594:	2300      	movs	r3, #0
    4596:	67b3      	str	r3, [r6, #120]	; 0x78
    4598:	f385 8811 	msr	BASEPRI, r5
    459c:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    45a0:	4630      	mov	r0, r6
}
    45a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
    45a6:	f000 bd7e 	b.w	50a6 <z_ready_thread>
    45aa:	bf00      	nop
    45ac:	000044dd 	.word	0x000044dd

000045b0 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    45b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    45b4:	f1b3 3fff 	cmp.w	r3, #4294967295
    45b8:	bf08      	it	eq
    45ba:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    45be:	4605      	mov	r5, r0
    45c0:	4614      	mov	r4, r2
    45c2:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
    45c6:	4619      	mov	r1, r3
    45c8:	4691      	mov	r9, r2
    45ca:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    45cc:	d037      	beq.n	463e <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    45ce:	f1b0 3fff 	cmp.w	r0, #4294967295
    45d2:	bf08      	it	eq
    45d4:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    45d8:	4637      	mov	r7, r6
    45da:	4682      	mov	sl, r0
    45dc:	d011      	beq.n	4602 <z_impl_k_timer_start+0x52>
    45de:	ea50 0306 	orrs.w	r3, r0, r6
    45e2:	d00e      	beq.n	4602 <z_impl_k_timer_start+0x52>
    45e4:	1c72      	adds	r2, r6, #1
    45e6:	f170 33ff 	sbcs.w	r3, r0, #4294967295
    45ea:	db0a      	blt.n	4602 <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
    45ec:	2e02      	cmp	r6, #2
    45ee:	4684      	mov	ip, r0
    45f0:	f170 0000 	sbcs.w	r0, r0, #0
    45f4:	bfbc      	itt	lt
    45f6:	2702      	movlt	r7, #2
    45f8:	f04f 0c00 	movlt.w	ip, #0
    45fc:	3f01      	subs	r7, #1
    45fe:	f14c 3aff 	adc.w	sl, ip, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    4602:	1c63      	adds	r3, r4, #1
    4604:	f171 33ff 	sbcs.w	r3, r1, #4294967295
    4608:	db0a      	blt.n	4620 <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
    460a:	2c01      	cmp	r4, #1
    460c:	f171 0300 	sbcs.w	r3, r1, #0
    4610:	4622      	mov	r2, r4
    4612:	bfbc      	itt	lt
    4614:	2201      	movlt	r2, #1
    4616:	2100      	movlt	r1, #0
    4618:	f112 39ff 	adds.w	r9, r2, #4294967295
    461c:	f141 38ff 	adc.w	r8, r1, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
    4620:	4628      	mov	r0, r5
    4622:	f000 fdcc 	bl	51be <z_abort_timeout>
	timer->period = period;
    4626:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
    462a:	2300      	movs	r3, #0
    462c:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    462e:	464a      	mov	r2, r9
    4630:	4643      	mov	r3, r8
    4632:	4628      	mov	r0, r5
    4634:	4903      	ldr	r1, [pc, #12]	; (4644 <z_impl_k_timer_start+0x94>)
		     duration);
}
    4636:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    463a:	f7ff be5d 	b.w	42f8 <z_add_timeout>
}
    463e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4642:	bf00      	nop
    4644:	000044dd 	.word	0x000044dd

00004648 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    4648:	4801      	ldr	r0, [pc, #4]	; (4650 <boot_banner+0x8>)
    464a:	f000 b824 	b.w	4696 <printk>
    464e:	bf00      	nop
    4650:	000055d2 	.word	0x000055d2

00004654 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    4654:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    4656:	4b09      	ldr	r3, [pc, #36]	; (467c <k_sys_work_q_init+0x28>)
    4658:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    465a:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    465c:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    465e:	9300      	str	r3, [sp, #0]
    4660:	4907      	ldr	r1, [pc, #28]	; (4680 <k_sys_work_q_init+0x2c>)
    4662:	4808      	ldr	r0, [pc, #32]	; (4684 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    4664:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    4668:	f04f 33ff 	mov.w	r3, #4294967295
    466c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4670:	f7ff fa48 	bl	3b04 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    4674:	4620      	mov	r0, r4
    4676:	b004      	add	sp, #16
    4678:	bd10      	pop	{r4, pc}
    467a:	bf00      	nop
    467c:	00005600 	.word	0x00005600
    4680:	200011c0 	.word	0x200011c0
    4684:	20000210 	.word	0x20000210

00004688 <k_msleep.constprop.0.isra.0>:
	return z_impl_k_sleep(timeout);
    4688:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    468c:	2100      	movs	r1, #0
    468e:	f7ff bd39 	b.w	4104 <z_impl_k_sleep>

00004692 <arch_printk_char_out>:
}
    4692:	2000      	movs	r0, #0
    4694:	4770      	bx	lr

00004696 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    4696:	b40f      	push	{r0, r1, r2, r3}
    4698:	b507      	push	{r0, r1, r2, lr}
    469a:	a904      	add	r1, sp, #16
    469c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    46a0:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    46a2:	f7fb fec1 	bl	428 <vprintk>

	va_end(ap);
}
    46a6:	b003      	add	sp, #12
    46a8:	f85d eb04 	ldr.w	lr, [sp], #4
    46ac:	b004      	add	sp, #16
    46ae:	4770      	bx	lr

000046b0 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    46b0:	4604      	mov	r4, r0
    46b2:	b508      	push	{r3, lr}
    46b4:	4608      	mov	r0, r1
    46b6:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    46b8:	461a      	mov	r2, r3
    46ba:	47a0      	blx	r4
	return z_impl_z_current_get();
    46bc:	f7ff fd3c 	bl	4138 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    46c0:	f7fc ff62 	bl	1588 <z_impl_k_thread_abort>

000046c4 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    46c4:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    46c6:	f013 0307 	ands.w	r3, r3, #7
    46ca:	d105      	bne.n	46d8 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    46cc:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    46ce:	2b00      	cmp	r3, #0
    46d0:	bf0c      	ite	eq
    46d2:	2000      	moveq	r0, #0
    46d4:	2003      	movne	r0, #3
    46d6:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    46d8:	2b02      	cmp	r3, #2
    46da:	d105      	bne.n	46e8 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    46dc:	8b40      	ldrh	r0, [r0, #26]
    46de:	fab0 f080 	clz	r0, r0
    46e2:	0940      	lsrs	r0, r0, #5
    46e4:	0080      	lsls	r0, r0, #2
    46e6:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    46e8:	2b01      	cmp	r3, #1
    46ea:	d105      	bne.n	46f8 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    46ec:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    46ee:	2b00      	cmp	r3, #0
    46f0:	bf0c      	ite	eq
    46f2:	2000      	moveq	r0, #0
    46f4:	2005      	movne	r0, #5
    46f6:	4770      	bx	lr
	int evt = EVT_NOP;
    46f8:	2000      	movs	r0, #0
}
    46fa:	4770      	bx	lr

000046fc <validate_args>:
{
    46fc:	b510      	push	{r4, lr}
    46fe:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    4700:	b100      	cbz	r0, 4704 <validate_args+0x8>
    4702:	b911      	cbnz	r1, 470a <validate_args+0xe>
		return -EINVAL;
    4704:	f06f 0015 	mvn.w	r0, #21
}
    4708:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    470a:	1d08      	adds	r0, r1, #4
    470c:	f000 f8ba 	bl	4884 <sys_notify_validate>
	if ((rv == 0)
    4710:	2800      	cmp	r0, #0
    4712:	d1f9      	bne.n	4708 <validate_args+0xc>
	    && ((cli->notify.flags
    4714:	68a3      	ldr	r3, [r4, #8]
    4716:	2b03      	cmp	r3, #3
    4718:	d9f6      	bls.n	4708 <validate_args+0xc>
    471a:	e7f3      	b.n	4704 <validate_args+0x8>

0000471c <notify_one>:
{
    471c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4720:	460d      	mov	r5, r1
    4722:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    4724:	4619      	mov	r1, r3
    4726:	1d28      	adds	r0, r5, #4
{
    4728:	4690      	mov	r8, r2
    472a:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    472c:	f000 f8bb 	bl	48a6 <sys_notify_finalize>
	if (cb) {
    4730:	4604      	mov	r4, r0
    4732:	b138      	cbz	r0, 4744 <notify_one+0x28>
		cb(mgr, cli, state, res);
    4734:	4633      	mov	r3, r6
    4736:	4642      	mov	r2, r8
    4738:	4629      	mov	r1, r5
    473a:	4638      	mov	r0, r7
    473c:	46a4      	mov	ip, r4
}
    473e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    4742:	4760      	bx	ip
}
    4744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004748 <transition_complete>:
{
    4748:	b410      	push	{r4}
	__asm__ volatile(
    474a:	f04f 0420 	mov.w	r4, #32
    474e:	f3ef 8211 	mrs	r2, BASEPRI
    4752:	f384 8812 	msr	BASEPRI_MAX, r4
    4756:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    475a:	6141      	str	r1, [r0, #20]
}
    475c:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    475e:	2101      	movs	r1, #1
    4760:	f7fb be70 	b.w	444 <process_event>

00004764 <onoff_manager_init>:
{
    4764:	b538      	push	{r3, r4, r5, lr}
    4766:	460c      	mov	r4, r1
	if ((mgr == NULL)
    4768:	4605      	mov	r5, r0
    476a:	b158      	cbz	r0, 4784 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    476c:	b151      	cbz	r1, 4784 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    476e:	680b      	ldr	r3, [r1, #0]
    4770:	b143      	cbz	r3, 4784 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    4772:	684b      	ldr	r3, [r1, #4]
    4774:	b133      	cbz	r3, 4784 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    4776:	221c      	movs	r2, #28
    4778:	2100      	movs	r1, #0
    477a:	f000 f92b 	bl	49d4 <memset>
    477e:	612c      	str	r4, [r5, #16]
	return 0;
    4780:	2000      	movs	r0, #0
}
    4782:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    4784:	f06f 0015 	mvn.w	r0, #21
    4788:	e7fb      	b.n	4782 <onoff_manager_init+0x1e>

0000478a <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    478a:	b570      	push	{r4, r5, r6, lr}
    478c:	4605      	mov	r5, r0
    478e:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    4790:	f7ff ffb4 	bl	46fc <validate_args>

	if (rv < 0) {
    4794:	1e04      	subs	r4, r0, #0
    4796:	db15      	blt.n	47c4 <onoff_request+0x3a>
    4798:	f04f 0320 	mov.w	r3, #32
    479c:	f3ef 8211 	mrs	r2, BASEPRI
    47a0:	f383 8812 	msr	BASEPRI_MAX, r3
    47a4:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    47a8:	8b6b      	ldrh	r3, [r5, #26]
    47aa:	8b2c      	ldrh	r4, [r5, #24]
    47ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
    47b0:	428b      	cmp	r3, r1
    47b2:	f004 0407 	and.w	r4, r4, #7
    47b6:	d107      	bne.n	47c8 <onoff_request+0x3e>
	__asm__ volatile(
    47b8:	f382 8811 	msr	BASEPRI, r2
    47bc:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    47c0:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    47c4:	4620      	mov	r0, r4
    47c6:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    47c8:	2c02      	cmp	r4, #2
    47ca:	d10c      	bne.n	47e6 <onoff_request+0x5c>
		mgr->refs += 1U;
    47cc:	3301      	adds	r3, #1
    47ce:	836b      	strh	r3, [r5, #26]
    47d0:	f382 8811 	msr	BASEPRI, r2
    47d4:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    47d8:	2300      	movs	r3, #0
    47da:	4622      	mov	r2, r4
    47dc:	4631      	mov	r1, r6
    47de:	4628      	mov	r0, r5
    47e0:	f7ff ff9c 	bl	471c <notify_one>
    47e4:	e7ee      	b.n	47c4 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    47e6:	2c06      	cmp	r4, #6
    47e8:	d814      	bhi.n	4814 <onoff_request+0x8a>
    47ea:	e8df f004 	tbb	[pc, r4]
    47ee:	1304      	.short	0x1304
    47f0:	1a041313 	.word	0x1a041313
    47f4:	04          	.byte	0x04
    47f5:	00          	.byte	0x00
	parent->next = child;
    47f6:	2300      	movs	r3, #0
    47f8:	6033      	str	r3, [r6, #0]
	return list->tail;
    47fa:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
    47fc:	b93b      	cbnz	r3, 480e <onoff_request+0x84>
	list->head = node;
    47fe:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    4802:	b9ac      	cbnz	r4, 4830 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    4804:	2102      	movs	r1, #2
    4806:	4628      	mov	r0, r5
    4808:	f7fb fe1c 	bl	444 <process_event>
    480c:	e7da      	b.n	47c4 <onoff_request+0x3a>
	parent->next = child;
    480e:	601e      	str	r6, [r3, #0]
	list->tail = node;
    4810:	606e      	str	r6, [r5, #4]
}
    4812:	e7f6      	b.n	4802 <onoff_request+0x78>
    4814:	f382 8811 	msr	BASEPRI, r2
    4818:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    481c:	f06f 0404 	mvn.w	r4, #4
    4820:	e7d0      	b.n	47c4 <onoff_request+0x3a>
    4822:	f382 8811 	msr	BASEPRI, r2
    4826:	f3bf 8f6f 	isb	sy
    482a:	f06f 0485 	mvn.w	r4, #133	; 0x85
    482e:	e7c9      	b.n	47c4 <onoff_request+0x3a>
    4830:	f382 8811 	msr	BASEPRI, r2
    4834:	f3bf 8f6f 	isb	sy
		if (notify) {
    4838:	e7c4      	b.n	47c4 <onoff_request+0x3a>

0000483a <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    483a:	b510      	push	{r4, lr}
	__asm__ volatile(
    483c:	f04f 0320 	mov.w	r3, #32
    4840:	f3ef 8211 	mrs	r2, BASEPRI
    4844:	f383 8812 	msr	BASEPRI_MAX, r3
    4848:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    484c:	8b04      	ldrh	r4, [r0, #24]
    484e:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    4852:	2c02      	cmp	r4, #2
    4854:	d00a      	beq.n	486c <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    4856:	2c01      	cmp	r4, #1
    4858:	bf0c      	ite	eq
    485a:	f06f 0004 	mvneq.w	r0, #4
    485e:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
    4862:	f382 8811 	msr	BASEPRI, r2
    4866:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
    486a:	e008      	b.n	487e <onoff_release+0x44>
	mgr->refs -= 1U;
    486c:	8b43      	ldrh	r3, [r0, #26]
    486e:	3b01      	subs	r3, #1
    4870:	b29b      	uxth	r3, r3
    4872:	8343      	strh	r3, [r0, #26]
	if (stop) {
    4874:	b923      	cbnz	r3, 4880 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
    4876:	4621      	mov	r1, r4
    4878:	f7fb fde4 	bl	444 <process_event>
	int rv = state;
    487c:	4620      	mov	r0, r4
}
    487e:	bd10      	pop	{r4, pc}
	int rv = state;
    4880:	4620      	mov	r0, r4
    4882:	e7ee      	b.n	4862 <onoff_release+0x28>

00004884 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    4884:	4603      	mov	r3, r0
    4886:	b158      	cbz	r0, 48a0 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    4888:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    488a:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    488e:	2a01      	cmp	r2, #1
    4890:	d003      	beq.n	489a <sys_notify_validate+0x16>
    4892:	2a03      	cmp	r2, #3
    4894:	d104      	bne.n	48a0 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    4896:	6802      	ldr	r2, [r0, #0]
    4898:	b112      	cbz	r2, 48a0 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    489a:	2000      	movs	r0, #0
    489c:	6098      	str	r0, [r3, #8]
    489e:	4770      	bx	lr
    48a0:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    48a4:	4770      	bx	lr

000048a6 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    48a6:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    48a8:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    48aa:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    48ae:	2a03      	cmp	r2, #3
    48b0:	f04f 0200 	mov.w	r2, #0
{
    48b4:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    48b6:	bf0c      	ite	eq
    48b8:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    48ba:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    48bc:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    48be:	4770      	bx	lr

000048c0 <encode_uint>:
{
    48c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    48c4:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    48c6:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    48c8:	2b6f      	cmp	r3, #111	; 0x6f
{
    48ca:	4680      	mov	r8, r0
    48cc:	460f      	mov	r7, r1
    48ce:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    48d0:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    48d4:	d029      	beq.n	492a <encode_uint+0x6a>
    48d6:	d824      	bhi.n	4922 <encode_uint+0x62>
		return 10;
    48d8:	2b58      	cmp	r3, #88	; 0x58
    48da:	bf0c      	ite	eq
    48dc:	2610      	moveq	r6, #16
    48de:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
    48e0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    48e4:	4632      	mov	r2, r6
    48e6:	2300      	movs	r3, #0
    48e8:	4640      	mov	r0, r8
    48ea:	4639      	mov	r1, r7
    48ec:	f7fb fbe4 	bl	b8 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    48f0:	2a09      	cmp	r2, #9
    48f2:	b2d4      	uxtb	r4, r2
    48f4:	d81e      	bhi.n	4934 <encode_uint+0x74>
    48f6:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    48f8:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    48fa:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    48fc:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4900:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    4904:	d301      	bcc.n	490a <encode_uint+0x4a>
    4906:	45d1      	cmp	r9, sl
    4908:	d811      	bhi.n	492e <encode_uint+0x6e>
	if (conv->flag_hash) {
    490a:	782b      	ldrb	r3, [r5, #0]
    490c:	069b      	lsls	r3, r3, #26
    490e:	d505      	bpl.n	491c <encode_uint+0x5c>
		if (radix == 8) {
    4910:	2e08      	cmp	r6, #8
    4912:	d115      	bne.n	4940 <encode_uint+0x80>
			conv->altform_0 = true;
    4914:	78ab      	ldrb	r3, [r5, #2]
    4916:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    491a:	70ab      	strb	r3, [r5, #2]
}
    491c:	4648      	mov	r0, r9
    491e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    4922:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    4926:	2b70      	cmp	r3, #112	; 0x70
    4928:	e7d7      	b.n	48da <encode_uint+0x1a>
	switch (specifier) {
    492a:	2608      	movs	r6, #8
    492c:	e7d8      	b.n	48e0 <encode_uint+0x20>
		value /= radix;
    492e:	4680      	mov	r8, r0
    4930:	460f      	mov	r7, r1
    4932:	e7d7      	b.n	48e4 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4934:	f1bb 0f19 	cmp.w	fp, #25
    4938:	bf94      	ite	ls
    493a:	3437      	addls	r4, #55	; 0x37
    493c:	3457      	addhi	r4, #87	; 0x57
    493e:	e7db      	b.n	48f8 <encode_uint+0x38>
		} else if (radix == 16) {
    4940:	2e10      	cmp	r6, #16
    4942:	d1eb      	bne.n	491c <encode_uint+0x5c>
			conv->altform_0c = true;
    4944:	78ab      	ldrb	r3, [r5, #2]
    4946:	f043 0310 	orr.w	r3, r3, #16
    494a:	e7e6      	b.n	491a <encode_uint+0x5a>

0000494c <outs>:
{
    494c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4950:	4607      	mov	r7, r0
    4952:	4688      	mov	r8, r1
    4954:	4615      	mov	r5, r2
    4956:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    4958:	4614      	mov	r4, r2
    495a:	42b4      	cmp	r4, r6
    495c:	d305      	bcc.n	496a <outs+0x1e>
    495e:	b10e      	cbz	r6, 4964 <outs+0x18>
	return (int)count;
    4960:	1b60      	subs	r0, r4, r5
    4962:	e008      	b.n	4976 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    4964:	7823      	ldrb	r3, [r4, #0]
    4966:	2b00      	cmp	r3, #0
    4968:	d0fa      	beq.n	4960 <outs+0x14>
		int rc = out((int)*sp++, ctx);
    496a:	f814 0b01 	ldrb.w	r0, [r4], #1
    496e:	4641      	mov	r1, r8
    4970:	47b8      	blx	r7
		if (rc < 0) {
    4972:	2800      	cmp	r0, #0
    4974:	daf1      	bge.n	495a <outs+0xe>
}
    4976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000497a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    497a:	4770      	bx	lr

0000497c <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    497c:	f000 bab4 	b.w	4ee8 <z_fatal_error>

00004980 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    4980:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    4982:	6800      	ldr	r0, [r0, #0]
    4984:	f000 bab0 	b.w	4ee8 <z_fatal_error>

00004988 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    4988:	2100      	movs	r1, #0
    498a:	2001      	movs	r0, #1
    498c:	f7ff bff6 	b.w	497c <z_arm_fatal_error>

00004990 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    4990:	b508      	push	{r3, lr}
	handler();
    4992:	f7fc fba3 	bl	10dc <z_SysNmiOnReset>
	z_arm_int_exit();
}
    4996:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    499a:	f7fc bc75 	b.w	1288 <z_arm_exc_exit>

0000499e <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    499e:	4603      	mov	r3, r0
	size_t n = 0;
    49a0:	2000      	movs	r0, #0

	while (*s != '\0') {
    49a2:	5c1a      	ldrb	r2, [r3, r0]
    49a4:	b902      	cbnz	r2, 49a8 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    49a6:	4770      	bx	lr
		n++;
    49a8:	3001      	adds	r0, #1
    49aa:	e7fa      	b.n	49a2 <strlen+0x4>

000049ac <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    49ac:	4603      	mov	r3, r0
	size_t n = 0;
    49ae:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    49b0:	5c1a      	ldrb	r2, [r3, r0]
    49b2:	b10a      	cbz	r2, 49b8 <strnlen+0xc>
    49b4:	4288      	cmp	r0, r1
    49b6:	d100      	bne.n	49ba <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    49b8:	4770      	bx	lr
		n++;
    49ba:	3001      	adds	r0, #1
    49bc:	e7f8      	b.n	49b0 <strnlen+0x4>

000049be <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    49be:	b510      	push	{r4, lr}
    49c0:	1e43      	subs	r3, r0, #1
    49c2:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    49c4:	4291      	cmp	r1, r2
    49c6:	d100      	bne.n	49ca <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    49c8:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    49ca:	f811 4b01 	ldrb.w	r4, [r1], #1
    49ce:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    49d2:	e7f7      	b.n	49c4 <memcpy+0x6>

000049d4 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    49d4:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    49d6:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    49d8:	4603      	mov	r3, r0
	while (n > 0) {
    49da:	4293      	cmp	r3, r2
    49dc:	d100      	bne.n	49e0 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    49de:	4770      	bx	lr
		*(d_byte++) = c_byte;
    49e0:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    49e4:	e7f9      	b.n	49da <memset+0x6>

000049e6 <_stdout_hook_default>:
}
    49e6:	f04f 30ff 	mov.w	r0, #4294967295
    49ea:	4770      	bx	lr

000049ec <nordicsemi_nrf52_init>:
	__asm__ volatile(
    49ec:	f04f 0220 	mov.w	r2, #32
    49f0:	f3ef 8311 	mrs	r3, BASEPRI
    49f4:	f382 8812 	msr	BASEPRI_MAX, r2
    49f8:	f3bf 8f6f 	isb	sy
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    49fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4a00:	2101      	movs	r1, #1
    4a02:	f8c2 1578 	str.w	r1, [r2, #1400]	; 0x578
	__asm__ volatile(
    4a06:	f383 8811 	msr	BASEPRI, r3
    4a0a:	f3bf 8f6f 	isb	sy
}
    4a0e:	2000      	movs	r0, #0
    4a10:	4770      	bx	lr

00004a12 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    4a12:	2806      	cmp	r0, #6
    4a14:	d108      	bne.n	4a28 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    4a16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4a1a:	2201      	movs	r2, #1
    4a1c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    4a20:	f3bf 8f4f 	dsb	sy
        __WFE();
    4a24:	bf20      	wfe
    while (true)
    4a26:	e7fd      	b.n	4a24 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    4a28:	4770      	bx	lr

00004a2a <pm_state_exit_post_ops>:
    4a2a:	2300      	movs	r3, #0
    4a2c:	f383 8811 	msr	BASEPRI, r3
    4a30:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    4a34:	4770      	bx	lr

00004a36 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    4a36:	6903      	ldr	r3, [r0, #16]
    4a38:	b2c9      	uxtb	r1, r1
    4a3a:	220c      	movs	r2, #12
    4a3c:	fb01 3302 	mla	r3, r1, r2, r3
    4a40:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    4a42:	f000 0007 	and.w	r0, r0, #7
    4a46:	4770      	bx	lr

00004a48 <set_on_state>:
	__asm__ volatile(
    4a48:	f04f 0320 	mov.w	r3, #32
    4a4c:	f3ef 8211 	mrs	r2, BASEPRI
    4a50:	f383 8812 	msr	BASEPRI_MAX, r3
    4a54:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    4a58:	6803      	ldr	r3, [r0, #0]
    4a5a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    4a5e:	f043 0302 	orr.w	r3, r3, #2
    4a62:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    4a64:	f382 8811 	msr	BASEPRI, r2
    4a68:	f3bf 8f6f 	isb	sy
}
    4a6c:	4770      	bx	lr

00004a6e <stop>:
{
    4a6e:	b570      	push	{r4, r5, r6, lr}
    4a70:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    4a72:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    4a74:	f04f 0420 	mov.w	r4, #32
    4a78:	f3ef 8511 	mrs	r5, BASEPRI
    4a7c:	f384 8812 	msr	BASEPRI_MAX, r4
    4a80:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    4a84:	260c      	movs	r6, #12
    4a86:	fb06 3401 	mla	r4, r6, r1, r3
    4a8a:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    4a8c:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    4a90:	d008      	beq.n	4aa4 <stop+0x36>
    4a92:	42a2      	cmp	r2, r4
    4a94:	d006      	beq.n	4aa4 <stop+0x36>
	__asm__ volatile(
    4a96:	f385 8811 	msr	BASEPRI, r5
    4a9a:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    4a9e:	f04f 30ff 	mov.w	r0, #4294967295
}
    4aa2:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    4aa4:	fb06 3301 	mla	r3, r6, r1, r3
    4aa8:	2201      	movs	r2, #1
    4aaa:	641a      	str	r2, [r3, #64]	; 0x40
    4aac:	f385 8811 	msr	BASEPRI, r5
    4ab0:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    4ab4:	6843      	ldr	r3, [r0, #4]
    4ab6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    4aba:	685b      	ldr	r3, [r3, #4]
    4abc:	4798      	blx	r3
	return 0;
    4abe:	2000      	movs	r0, #0
    4ac0:	e7ef      	b.n	4aa2 <stop+0x34>

00004ac2 <api_stop>:
	return stop(dev, subsys, CTX_API);
    4ac2:	2280      	movs	r2, #128	; 0x80
    4ac4:	f7ff bfd3 	b.w	4a6e <stop>

00004ac8 <async_start>:
{
    4ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4aca:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    4acc:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    4ace:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    4ad0:	f04f 0520 	mov.w	r5, #32
    4ad4:	f3ef 8611 	mrs	r6, BASEPRI
    4ad8:	f385 8812 	msr	BASEPRI_MAX, r5
    4adc:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    4ae0:	250c      	movs	r5, #12
    4ae2:	fb05 4401 	mla	r4, r5, r1, r4
    4ae6:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    4ae8:	f005 0c07 	and.w	ip, r5, #7
    4aec:	f1bc 0f01 	cmp.w	ip, #1
    4af0:	d10c      	bne.n	4b0c <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    4af2:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
    4af4:	f386 8811 	msr	BASEPRI, r6
    4af8:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    4afc:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    4b00:	6843      	ldr	r3, [r0, #4]
    4b02:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    4b06:	4798      	blx	r3
	return 0;
    4b08:	2000      	movs	r0, #0
}
    4b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    4b0c:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    4b10:	42af      	cmp	r7, r5
    4b12:	f386 8811 	msr	BASEPRI, r6
    4b16:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    4b1a:	bf0c      	ite	eq
    4b1c:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    4b20:	f04f 30ff 	movne.w	r0, #4294967295
    4b24:	e7f1      	b.n	4b0a <async_start+0x42>

00004b26 <api_start>:
{
    4b26:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    4b28:	2480      	movs	r4, #128	; 0x80
    4b2a:	9400      	str	r4, [sp, #0]
    4b2c:	f7ff ffcc 	bl	4ac8 <async_start>
}
    4b30:	b002      	add	sp, #8
    4b32:	bd10      	pop	{r4, pc}

00004b34 <onoff_started_callback>:
{
    4b34:	b410      	push	{r4}
	return &data->mgr[type];
    4b36:	6900      	ldr	r0, [r0, #16]
    4b38:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    4b3a:	241c      	movs	r4, #28
    4b3c:	fb03 0004 	mla	r0, r3, r4, r0
    4b40:	2100      	movs	r1, #0
}
    4b42:	bc10      	pop	{r4}
	notify(mgr, 0);
    4b44:	4710      	bx	r2

00004b46 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    4b46:	2000      	movs	r0, #0
    4b48:	f000 b97a 	b.w	4e40 <nrfx_clock_start>

00004b4c <blocking_start_callback>:
{
    4b4c:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    4b4e:	f7fe be95 	b.w	387c <z_impl_k_sem_give>

00004b52 <lfclk_stop>:
{
    4b52:	b508      	push	{r3, lr}
		z_nrf_clock_calibration_lfclk_stopped();
    4b54:	f7fd f82e 	bl	1bb4 <z_nrf_clock_calibration_lfclk_stopped>
}
    4b58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    4b5c:	2000      	movs	r0, #0
    4b5e:	f000 b9a7 	b.w	4eb0 <nrfx_clock_stop>

00004b62 <timeout_handler>:
	start_cal_process();
    4b62:	f7fc bf77 	b.w	1a54 <start_cal_process>

00004b66 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4b66:	6843      	ldr	r3, [r0, #4]
    4b68:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    4b6a:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    4b6e:	600b      	str	r3, [r1, #0]
}
    4b70:	2000      	movs	r0, #0
    4b72:	4770      	bx	lr

00004b74 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4b74:	6843      	ldr	r3, [r0, #4]
    4b76:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    4b78:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    4b7c:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    4b80:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    4b84:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    4b88:	2000      	movs	r0, #0
    4b8a:	4770      	bx	lr

00004b8c <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4b8c:	6843      	ldr	r3, [r0, #4]
    4b8e:	685b      	ldr	r3, [r3, #4]
}
    4b90:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    4b92:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    4b96:	4770      	bx	lr

00004b98 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4b98:	6843      	ldr	r3, [r0, #4]
    4b9a:	685b      	ldr	r3, [r3, #4]
}
    4b9c:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    4b9e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    4ba2:	4770      	bx	lr

00004ba4 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4ba4:	6843      	ldr	r3, [r0, #4]
    4ba6:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    4ba8:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
    4bac:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    4bb0:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    4bb2:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    4bb6:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    4bba:	2000      	movs	r0, #0
    4bbc:	4770      	bx	lr

00004bbe <gpio_nrfx_manage_callback>:
{
    4bbe:	b510      	push	{r4, lr}
	return port->data;
    4bc0:	6903      	ldr	r3, [r0, #16]
	return list->head;
    4bc2:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    4bc4:	b1f8      	cbz	r0, 4c06 <gpio_nrfx_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4bc6:	4288      	cmp	r0, r1
    4bc8:	d119      	bne.n	4bfe <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
    4bca:	689c      	ldr	r4, [r3, #8]
	return node->next;
    4bcc:	6808      	ldr	r0, [r1, #0]
	list->head = node;
    4bce:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    4bd0:	42a1      	cmp	r1, r4
    4bd2:	d100      	bne.n	4bd6 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    4bd4:	6098      	str	r0, [r3, #8]
	parent->next = child;
    4bd6:	2000      	movs	r0, #0
    4bd8:	6008      	str	r0, [r1, #0]
	if (set) {
    4bda:	b12a      	cbz	r2, 4be8 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
    4bdc:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    4bde:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    4be0:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    4be2:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    4be4:	b902      	cbnz	r2, 4be8 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
    4be6:	6099      	str	r1, [r3, #8]
	return 0;
    4be8:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    4bea:	e010      	b.n	4c0e <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4bec:	4281      	cmp	r1, r0
    4bee:	d106      	bne.n	4bfe <gpio_nrfx_manage_callback+0x40>
	return node->next;
    4bf0:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    4bf2:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    4bf4:	6898      	ldr	r0, [r3, #8]
    4bf6:	4281      	cmp	r1, r0
    4bf8:	d1ed      	bne.n	4bd6 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    4bfa:	609c      	str	r4, [r3, #8]
}
    4bfc:	e7eb      	b.n	4bd6 <gpio_nrfx_manage_callback+0x18>
	return node->next;
    4bfe:	4604      	mov	r4, r0
    4c00:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4c02:	2800      	cmp	r0, #0
    4c04:	d1f2      	bne.n	4bec <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
    4c06:	2a00      	cmp	r2, #0
    4c08:	d1e8      	bne.n	4bdc <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    4c0a:	f06f 0015 	mvn.w	r0, #21
}
    4c0e:	bd10      	pop	{r4, pc}

00004c10 <uarte_nrfx_config_get>:
	struct uarte_nrfx_data *data = dev->data;
    4c10:	6902      	ldr	r2, [r0, #16]
{
    4c12:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    4c14:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    4c18:	e883 0003 	stmia.w	r3, {r0, r1}
}
    4c1c:	2000      	movs	r0, #0
    4c1e:	4770      	bx	lr

00004c20 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    4c20:	6843      	ldr	r3, [r0, #4]
    4c22:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    4c24:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    4c28:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    4c2c:	4770      	bx	lr

00004c2e <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    4c2e:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    4c30:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    4c32:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4c34:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    4c38:	b150      	cbz	r0, 4c50 <uarte_nrfx_poll_in+0x22>
	*c = *data->rx_data;
    4c3a:	6952      	ldr	r2, [r2, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4c3c:	2000      	movs	r0, #0
    4c3e:	7812      	ldrb	r2, [r2, #0]
    4c40:	700a      	strb	r2, [r1, #0]
    4c42:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    4c46:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4c4a:	2201      	movs	r2, #1
    4c4c:	601a      	str	r2, [r3, #0]
	return 0;
    4c4e:	4770      	bx	lr
		return -1;
    4c50:	f04f 30ff 	mov.w	r0, #4294967295
}
    4c54:	4770      	bx	lr

00004c56 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    4c56:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    4c58:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4c5a:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    4c5e:	b940      	cbnz	r0, 4c72 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    4c60:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    4c62:	079b      	lsls	r3, r3, #30
    4c64:	d406      	bmi.n	4c74 <is_tx_ready.isra.0+0x1e>
    4c66:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    4c6a:	3800      	subs	r0, #0
    4c6c:	bf18      	it	ne
    4c6e:	2001      	movne	r0, #1
    4c70:	4770      	bx	lr
    4c72:	2001      	movs	r0, #1
}
    4c74:	4770      	bx	lr

00004c76 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    4c76:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    4c78:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    4c7a:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    4c7e:	05c9      	lsls	r1, r1, #23
    4c80:	d518      	bpl.n	4cb4 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4c82:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    4c86:	b1a9      	cbz	r1, 4cb4 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    4c88:	f04f 0020 	mov.w	r0, #32
    4c8c:	f3ef 8111 	mrs	r1, BASEPRI
    4c90:	f380 8812 	msr	BASEPRI_MAX, r0
    4c94:	f3bf 8f6f 	isb	sy
    4c98:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    4c9c:	b130      	cbz	r0, 4cac <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4c9e:	2000      	movs	r0, #0
    4ca0:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    4ca4:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4ca8:	2001      	movs	r0, #1
    4caa:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
    4cac:	f381 8811 	msr	BASEPRI, r1
    4cb0:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    4cb4:	6852      	ldr	r2, [r2, #4]
    4cb6:	06d2      	lsls	r2, r2, #27
    4cb8:	d515      	bpl.n	4ce6 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
    4cba:	f04f 0120 	mov.w	r1, #32
    4cbe:	f3ef 8211 	mrs	r2, BASEPRI
    4cc2:	f381 8812 	msr	BASEPRI_MAX, r1
    4cc6:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4cca:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    4cce:	b111      	cbz	r1, 4cd6 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    4cd0:	2100      	movs	r1, #0
    4cd2:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    4cd6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    4cda:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    4cde:	f382 8811 	msr	BASEPRI, r2
    4ce2:	f3bf 8f6f 	isb	sy
}
    4ce6:	4770      	bx	lr

00004ce8 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    4ce8:	4770      	bx	lr

00004cea <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    4cea:	b570      	push	{r4, r5, r6, lr}
	*state = &config->states[0];
    4cec:	6843      	ldr	r3, [r0, #4]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    4cee:	f06f 4660 	mvn.w	r6, #3758096384	; 0xe0000000
	*state = &config->states[0];
    4cf2:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    4cf4:	7a05      	ldrb	r5, [r0, #8]
    4cf6:	6844      	ldr	r4, [r0, #4]
    4cf8:	4435      	add	r5, r6
    4cfa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    4cfe:	42a3      	cmp	r3, r4
    4d00:	d902      	bls.n	4d08 <pinctrl_lookup_state+0x1e>
		}

		(*state)++;
	}

	return -ENOENT;
    4d02:	f06f 0001 	mvn.w	r0, #1
}
    4d06:	bd70      	pop	{r4, r5, r6, pc}
		if (id == (*state)->id) {
    4d08:	795c      	ldrb	r4, [r3, #5]
    4d0a:	428c      	cmp	r4, r1
    4d0c:	d001      	beq.n	4d12 <pinctrl_lookup_state+0x28>
		(*state)++;
    4d0e:	3308      	adds	r3, #8
    4d10:	e7ef      	b.n	4cf2 <pinctrl_lookup_state+0x8>
			return 0;
    4d12:	2000      	movs	r0, #0
    4d14:	e7f7      	b.n	4d06 <pinctrl_lookup_state+0x1c>

00004d16 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    4d16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4d1a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4d1e:	f04f 0c01 	mov.w	ip, #1
    p_reg->OUTSET = set_mask;
    4d22:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    4d26:	4281      	cmp	r1, r0
    4d28:	d102      	bne.n	4d30 <pinctrl_configure_pins+0x1a>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    4d2a:	2000      	movs	r0, #0
}
    4d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    4d30:	6805      	ldr	r5, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    4d32:	f005 037f 	and.w	r3, r5, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    4d36:	f3c5 2443 	ubfx	r4, r5, #9, #4
			pin = 0xFFFFFFFFU;
    4d3a:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
    4d3c:	ea4f 4515 	mov.w	r5, r5, lsr #16
			pin = 0xFFFFFFFFU;
    4d40:	bf08      	it	eq
    4d42:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
    4d46:	2d0c      	cmp	r5, #12
    4d48:	d850      	bhi.n	4dec <pinctrl_configure_pins+0xd6>
    4d4a:	e8df f005 	tbb	[pc, r5]
    4d4e:	1107      	.short	0x1107
    4d50:	271c1916 	.word	0x271c1916
    4d54:	4f4f4f19 	.word	0x4f4f4f19
    4d58:	2b4f      	.short	0x2b4f
    4d5a:	4c          	.byte	0x4c
    4d5b:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
    4d5c:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
    4d60:	f003 051f 	and.w	r5, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4d64:	fa0c f505 	lsl.w	r5, ip, r5
    p_reg->OUTSET = set_mask;
    4d68:	f8c7 5508 	str.w	r5, [r7, #1288]	; 0x508
}
    4d6c:	2501      	movs	r5, #1
    4d6e:	e002      	b.n	4d76 <pinctrl_configure_pins+0x60>
			NRF_PSEL_UART(reg, RXD) = pin;
    4d70:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    4d74:	2500      	movs	r5, #0
    4d76:	462e      	mov	r6, r5
    4d78:	e01b      	b.n	4db2 <pinctrl_configure_pins+0x9c>
			NRF_PSEL_UART(reg, RTS) = pin;
    4d7a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
    4d7e:	e7ef      	b.n	4d60 <pinctrl_configure_pins+0x4a>
			NRF_PSEL_UART(reg, CTS) = pin;
    4d80:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
    4d84:	e7f6      	b.n	4d74 <pinctrl_configure_pins+0x5e>
			NRF_PSEL_SPIM(reg, SCK) = pin;
    4d86:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    4d8a:	2500      	movs	r5, #0
    *p_pin = pin_number & 0x1F;
    4d8c:	f003 061f 	and.w	r6, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    4d90:	fa0c f606 	lsl.w	r6, ip, r6
    p_reg->OUTCLR = clr_mask;
    4d94:	f8c7 650c 	str.w	r6, [r7, #1292]	; 0x50c
}
    4d98:	2601      	movs	r6, #1
    4d9a:	e00a      	b.n	4db2 <pinctrl_configure_pins+0x9c>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    4d9c:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    4da0:	2501      	movs	r5, #1
    4da2:	e7f3      	b.n	4d8c <pinctrl_configure_pins+0x76>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    4da4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    4da8:	2c00      	cmp	r4, #0
    4daa:	d1e3      	bne.n	4d74 <pinctrl_configure_pins+0x5e>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    4dac:	2500      	movs	r5, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    4dae:	462e      	mov	r6, r5
				drive = NRF_DRIVE_S0D1;
    4db0:	2406      	movs	r4, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    4db2:	f850 eb04 	ldr.w	lr, [r0], #4
    4db6:	f40e 5800 	and.w	r8, lr, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    4dba:	f1b8 0f00 	cmp.w	r8, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4dbe:	f3ce 1ec1 	ubfx	lr, lr, #7, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    4dc2:	ea4f 2404 	mov.w	r4, r4, lsl #8
    4dc6:	bf18      	it	ne
    4dc8:	2600      	movne	r6, #0
    *p_pin = pin_number & 0x1F;
    4dca:	f003 031f 	and.w	r3, r3, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4dce:	ea44 048e 	orr.w	r4, r4, lr, lsl #2
    4dd2:	bf18      	it	ne
    4dd4:	2501      	movne	r5, #1
    4dd6:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
    4dd8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4ddc:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    4de0:	f847 4023 	str.w	r4, [r7, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    4de4:	e79f      	b.n	4d26 <pinctrl_configure_pins+0x10>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    4de6:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    4dea:	e7dd      	b.n	4da8 <pinctrl_configure_pins+0x92>
		switch (NRF_GET_FUN(pins[i])) {
    4dec:	f06f 0085 	mvn.w	r0, #133	; 0x85
    4df0:	e79c      	b.n	4d2c <pinctrl_configure_pins+0x16>

00004df2 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    4df2:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    4df4:	2000      	movs	r0, #0
    4df6:	f7fc fcab 	bl	1750 <sys_arch_reboot>

00004dfa <nrf52_errata_136>:
            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    4dfa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4dfe:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
    4e02:	1c42      	adds	r2, r0, #1
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    4e04:	bf04      	itt	eq
    4e06:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
    4e0a:	f893 0fe0 	ldrbeq.w	r0, [r3, #4064]	; 0xfe0
            if (var1 == 0x06)
    4e0e:	2806      	cmp	r0, #6
    4e10:	d004      	beq.n	4e1c <nrf52_errata_136+0x22>
            if (var1 == 0x0A)
    4e12:	f1a0 030a 	sub.w	r3, r0, #10
    4e16:	4258      	negs	r0, r3
    4e18:	4158      	adcs	r0, r3
    4e1a:	4770      	bx	lr
                        return true;
    4e1c:	2001      	movs	r0, #1
}
    4e1e:	4770      	bx	lr

00004e20 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    4e20:	4700      	bx	r0

00004e22 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    4e22:	f000 ba14 	b.w	524e <z_impl_k_busy_wait>

00004e26 <nrfx_clock_enable>:
{
    4e26:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    4e28:	2000      	movs	r0, #0
    4e2a:	f7fc f931 	bl	1090 <arch_irq_is_enabled>
    4e2e:	b908      	cbnz	r0, 4e34 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    4e30:	f7fc f920 	bl	1074 <arch_irq_enable>
#pragma GCC diagnostic pop
#endif

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    4e34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4e38:	2200      	movs	r2, #0
    4e3a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    4e3e:	bd08      	pop	{r3, pc}

00004e40 <nrfx_clock_start>:
{
    4e40:	b508      	push	{r3, lr}
    switch (domain)
    4e42:	b110      	cbz	r0, 4e4a <nrfx_clock_start+0xa>
    4e44:	2801      	cmp	r0, #1
    4e46:	d028      	beq.n	4e9a <nrfx_clock_start+0x5a>
}
    4e48:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4e4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4e4e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4e52:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    4e56:	03c9      	lsls	r1, r1, #15
    4e58:	d40b      	bmi.n	4e72 <nrfx_clock_start+0x32>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    4e5a:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    4e5e:	07d0      	lsls	r0, r2, #31
    4e60:	d50c      	bpl.n	4e7c <nrfx_clock_start+0x3c>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    4e62:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
    if (!is_correct_clk)
    4e66:	0792      	lsls	r2, r2, #30
    4e68:	d105      	bne.n	4e76 <nrfx_clock_start+0x36>
    p_reg->INTENSET = mask;
    4e6a:	2202      	movs	r2, #2
    4e6c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    4e70:	e7ea      	b.n	4e48 <nrfx_clock_start+0x8>
    if (!is_correct_clk)
    4e72:	0791      	lsls	r1, r2, #30
    4e74:	d002      	beq.n	4e7c <nrfx_clock_start+0x3c>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    4e76:	2000      	movs	r0, #0
    4e78:	f7fd fe70 	bl	2b5c <clock_stop>
    p_reg->LFCLKSRC = (uint32_t)(source);
    4e7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4e80:	2200      	movs	r2, #0
    4e82:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4e86:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    4e8a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    4e8e:	2202      	movs	r2, #2
    4e90:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4e94:	2201      	movs	r2, #1
    4e96:	609a      	str	r2, [r3, #8]
}
    4e98:	e7d6      	b.n	4e48 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4e9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4e9e:	2200      	movs	r2, #0
    4ea0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    4ea4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    4ea8:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4eac:	6018      	str	r0, [r3, #0]
}
    4eae:	e7cb      	b.n	4e48 <nrfx_clock_start+0x8>

00004eb0 <nrfx_clock_stop>:
    clock_stop(domain);
    4eb0:	f7fd be54 	b.w	2b5c <clock_stop>

00004eb4 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
    4eb4:	f000 001f 	and.w	r0, r0, #31
    4eb8:	0080      	lsls	r0, r0, #2
    4eba:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4ebe:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    cnf &= ~to_update;
    4ec2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4ec6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    4eca:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
    4ece:	4770      	bx	lr

00004ed0 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
    4ed0:	4770      	bx	lr

00004ed2 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    4ed2:	b140      	cbz	r0, 4ee6 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    4ed4:	68c3      	ldr	r3, [r0, #12]
    4ed6:	7858      	ldrb	r0, [r3, #1]
    4ed8:	f010 0001 	ands.w	r0, r0, #1
    4edc:	bf1e      	ittt	ne
    4ede:	7818      	ldrbne	r0, [r3, #0]
    4ee0:	fab0 f080 	clzne	r0, r0
    4ee4:	0940      	lsrne	r0, r0, #5
}
    4ee6:	4770      	bx	lr

00004ee8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    4ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4eea:	4605      	mov	r5, r0
    4eec:	460e      	mov	r6, r1
	__asm__ volatile(
    4eee:	f04f 0320 	mov.w	r3, #32
    4ef2:	f3ef 8711 	mrs	r7, BASEPRI
    4ef6:	f383 8812 	msr	BASEPRI_MAX, r3
    4efa:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    4efe:	f7ff f91b 	bl	4138 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    4f02:	4631      	mov	r1, r6
    4f04:	4604      	mov	r4, r0
    4f06:	4628      	mov	r0, r5
    4f08:	f7ff ff73 	bl	4df2 <k_sys_fatal_error_handler>
	__asm__ volatile(
    4f0c:	f387 8811 	msr	BASEPRI, r7
    4f10:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    4f14:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    4f16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4f1a:	f7fc bb35 	b.w	1588 <z_impl_k_thread_abort>

00004f1e <z_early_memset>:
	(void) memset(dst, c, n);
    4f1e:	f7ff bd59 	b.w	49d4 <memset>

00004f22 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    4f22:	f7ff bd4c 	b.w	49be <memcpy>

00004f26 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4f26:	f3ef 8005 	mrs	r0, IPSR
}
    4f2a:	3800      	subs	r0, #0
    4f2c:	bf18      	it	ne
    4f2e:	2001      	movne	r0, #1
    4f30:	4770      	bx	lr

00004f32 <z_impl_k_thread_name_set>:
}
    4f32:	f06f 0057 	mvn.w	r0, #87	; 0x57
    4f36:	4770      	bx	lr

00004f38 <z_impl_k_thread_start>:
	z_sched_start(thread);
    4f38:	f7fe bfd6 	b.w	3ee8 <z_sched_start>

00004f3c <z_pm_save_idle_exit>:
{
    4f3c:	b508      	push	{r3, lr}
	pm_system_resume();
    4f3e:	f7fb ff71 	bl	e24 <pm_system_resume>
}
    4f42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    4f46:	f7ff becf 	b.w	4ce8 <sys_clock_idle_exit>

00004f4a <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    4f4a:	f990 300e 	ldrsb.w	r3, [r0, #14]
    4f4e:	428b      	cmp	r3, r1
    4f50:	d001      	beq.n	4f56 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    4f52:	f7fe bf71 	b.w	3e38 <z_set_prio>
}
    4f56:	2000      	movs	r0, #0
    4f58:	4770      	bx	lr

00004f5a <z_impl_k_mutex_init>:
{
    4f5a:	4603      	mov	r3, r0
	mutex->owner = NULL;
    4f5c:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    4f5e:	e9c3 0002 	strd	r0, r0, [r3, #8]
	list->tail = (sys_dnode_t *)list;
    4f62:	e9c3 3300 	strd	r3, r3, [r3]
}
    4f66:	4770      	bx	lr

00004f68 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    4f68:	b13a      	cbz	r2, 4f7a <z_impl_k_sem_init+0x12>
    4f6a:	428a      	cmp	r2, r1
    4f6c:	d305      	bcc.n	4f7a <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    4f6e:	e9c0 1202 	strd	r1, r2, [r0, #8]
    4f72:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    4f76:	2000      	movs	r0, #0
    4f78:	4770      	bx	lr
		return -EINVAL;
    4f7a:	f06f 0015 	mvn.w	r0, #21
}
    4f7e:	4770      	bx	lr

00004f80 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
    4f80:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
    4f82:	2301      	movs	r3, #1
    4f84:	408b      	lsls	r3, r1
    4f86:	ea22 0303 	bic.w	r3, r2, r3
    4f8a:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
    4f8c:	fa22 f001 	lsr.w	r0, r2, r1
}
    4f90:	f000 0001 	and.w	r0, r0, #1
    4f94:	4770      	bx	lr

00004f96 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
    4f96:	b120      	cbz	r0, 4fa2 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    4f98:	2200      	movs	r2, #0
    4f9a:	4611      	mov	r1, r2
    4f9c:	3088      	adds	r0, #136	; 0x88
    4f9e:	f000 b8eb 	b.w	5178 <z_sched_wake>
}
    4fa2:	4770      	bx	lr

00004fa4 <z_work_submit_to_queue>:
{
    4fa4:	b513      	push	{r0, r1, r4, lr}
    4fa6:	9001      	str	r0, [sp, #4]
    4fa8:	4608      	mov	r0, r1
	__asm__ volatile(
    4faa:	f04f 0320 	mov.w	r3, #32
    4fae:	f3ef 8411 	mrs	r4, BASEPRI
    4fb2:	f383 8812 	msr	BASEPRI_MAX, r3
    4fb6:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    4fba:	a901      	add	r1, sp, #4
    4fbc:	f7fe fd42 	bl	3a44 <submit_to_queue_locked>
	__asm__ volatile(
    4fc0:	f384 8811 	msr	BASEPRI, r4
    4fc4:	f3bf 8f6f 	isb	sy
}
    4fc8:	b002      	add	sp, #8
    4fca:	bd10      	pop	{r4, pc}

00004fcc <k_work_submit_to_queue>:
{
    4fcc:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
    4fce:	f7ff ffe9 	bl	4fa4 <z_work_submit_to_queue>
	if (ret > 0) {
    4fd2:	1e04      	subs	r4, r0, #0
    4fd4:	dd09      	ble.n	4fea <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
    4fd6:	f04f 0320 	mov.w	r3, #32
    4fda:	f3ef 8011 	mrs	r0, BASEPRI
    4fde:	f383 8812 	msr	BASEPRI_MAX, r3
    4fe2:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    4fe6:	f000 f8b1 	bl	514c <z_reschedule_irqlock>
}
    4fea:	4620      	mov	r0, r4
    4fec:	bd10      	pop	{r4, pc}

00004fee <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    4fee:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    4ff2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    4ff4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    4ff6:	2300      	movs	r3, #0
	node->prev = NULL;
    4ff8:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    4ffc:	4770      	bx	lr

00004ffe <unpend_thread_no_timeout>:
{
    4ffe:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    5000:	f7ff fff5 	bl	4fee <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    5004:	7b43      	ldrb	r3, [r0, #13]
    5006:	f023 0302 	bic.w	r3, r3, #2
    500a:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    500c:	2300      	movs	r3, #0
    500e:	6083      	str	r3, [r0, #8]
}
    5010:	bd08      	pop	{r3, pc}

00005012 <z_thread_timeout>:
{
    5012:	b510      	push	{r4, lr}
    5014:	4601      	mov	r1, r0
    5016:	f04f 0320 	mov.w	r3, #32
    501a:	f3ef 8411 	mrs	r4, BASEPRI
    501e:	f383 8812 	msr	BASEPRI_MAX, r3
    5022:	f3bf 8f6f 	isb	sy
		if (!killed) {
    5026:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    502a:	f013 0f28 	tst.w	r3, #40	; 0x28
    502e:	d10d      	bne.n	504c <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    5030:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    5034:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    5036:	b10b      	cbz	r3, 503c <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    5038:	f7ff ffe1 	bl	4ffe <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    503c:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    5040:	f023 0314 	bic.w	r3, r3, #20
    5044:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    5048:	f7fe fe00 	bl	3c4c <ready_thread>
	__asm__ volatile(
    504c:	f384 8811 	msr	BASEPRI, r4
    5050:	f3bf 8f6f 	isb	sy
}
    5054:	bd10      	pop	{r4, pc}

00005056 <add_to_waitq_locked>:
{
    5056:	b538      	push	{r3, r4, r5, lr}
    5058:	4604      	mov	r4, r0
    505a:	460d      	mov	r5, r1
	unready_thread(thread);
    505c:	f7fe fe2a 	bl	3cb4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    5060:	7b63      	ldrb	r3, [r4, #13]
    5062:	f043 0302 	orr.w	r3, r3, #2
    5066:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    5068:	b1e5      	cbz	r5, 50a4 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
    506a:	60a5      	str	r5, [r4, #8]
	return list->head == list;
    506c:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    506e:	429d      	cmp	r5, r3
    5070:	d109      	bne.n	5086 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    5072:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    5074:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    5078:	601c      	str	r4, [r3, #0]
	list->tail = node;
    507a:	606c      	str	r4, [r5, #4]
}
    507c:	e012      	b.n	50a4 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
    507e:	686a      	ldr	r2, [r5, #4]
    5080:	4293      	cmp	r3, r2
    5082:	d0f6      	beq.n	5072 <add_to_waitq_locked+0x1c>
    5084:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5086:	2b00      	cmp	r3, #0
    5088:	d0f3      	beq.n	5072 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    508a:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    508e:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    5092:	428a      	cmp	r2, r1
    5094:	d0f3      	beq.n	507e <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
    5096:	4291      	cmp	r1, r2
    5098:	ddf1      	ble.n	507e <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    509a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    509c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    50a0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    50a2:	605c      	str	r4, [r3, #4]
}
    50a4:	bd38      	pop	{r3, r4, r5, pc}

000050a6 <z_ready_thread>:
{
    50a6:	b510      	push	{r4, lr}
	__asm__ volatile(
    50a8:	f04f 0320 	mov.w	r3, #32
    50ac:	f3ef 8411 	mrs	r4, BASEPRI
    50b0:	f383 8812 	msr	BASEPRI_MAX, r3
    50b4:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    50b8:	f7fe fdc8 	bl	3c4c <ready_thread>
	__asm__ volatile(
    50bc:	f384 8811 	msr	BASEPRI, r4
    50c0:	f3bf 8f6f 	isb	sy
}
    50c4:	bd10      	pop	{r4, pc}

000050c6 <z_unpend_thread_no_timeout>:
{
    50c6:	b508      	push	{r3, lr}
	__asm__ volatile(
    50c8:	f04f 0320 	mov.w	r3, #32
    50cc:	f3ef 8111 	mrs	r1, BASEPRI
    50d0:	f383 8812 	msr	BASEPRI_MAX, r3
    50d4:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    50d8:	f7ff ff91 	bl	4ffe <unpend_thread_no_timeout>
	__asm__ volatile(
    50dc:	f381 8811 	msr	BASEPRI, r1
    50e0:	f3bf 8f6f 	isb	sy
}
    50e4:	bd08      	pop	{r3, pc}

000050e6 <z_unpend1_no_timeout>:
{
    50e6:	b508      	push	{r3, lr}
    50e8:	4603      	mov	r3, r0
	__asm__ volatile(
    50ea:	f04f 0220 	mov.w	r2, #32
    50ee:	f3ef 8111 	mrs	r1, BASEPRI
    50f2:	f382 8812 	msr	BASEPRI_MAX, r2
    50f6:	f3bf 8f6f 	isb	sy
	return list->head == list;
    50fa:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    50fc:	4283      	cmp	r3, r0
    50fe:	d007      	beq.n	5110 <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
    5100:	b108      	cbz	r0, 5106 <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
    5102:	f7ff ff7c 	bl	4ffe <unpend_thread_no_timeout>
	__asm__ volatile(
    5106:	f381 8811 	msr	BASEPRI, r1
    510a:	f3bf 8f6f 	isb	sy
}
    510e:	bd08      	pop	{r3, pc}
    5110:	2000      	movs	r0, #0
    5112:	e7f8      	b.n	5106 <z_unpend1_no_timeout+0x20>

00005114 <z_unpend_first_thread>:
{
    5114:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    5116:	f04f 0320 	mov.w	r3, #32
    511a:	f3ef 8511 	mrs	r5, BASEPRI
    511e:	f383 8812 	msr	BASEPRI_MAX, r3
    5122:	f3bf 8f6f 	isb	sy
	return list->head == list;
    5126:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5128:	42a0      	cmp	r0, r4
    512a:	d00d      	beq.n	5148 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    512c:	b134      	cbz	r4, 513c <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    512e:	4620      	mov	r0, r4
    5130:	f7ff ff65 	bl	4ffe <unpend_thread_no_timeout>
    5134:	f104 0018 	add.w	r0, r4, #24
    5138:	f000 f841 	bl	51be <z_abort_timeout>
	__asm__ volatile(
    513c:	f385 8811 	msr	BASEPRI, r5
    5140:	f3bf 8f6f 	isb	sy
}
    5144:	4620      	mov	r0, r4
    5146:	bd38      	pop	{r3, r4, r5, pc}
    5148:	2400      	movs	r4, #0
    514a:	e7f7      	b.n	513c <z_unpend_first_thread+0x28>

0000514c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    514c:	4603      	mov	r3, r0
    514e:	b920      	cbnz	r0, 515a <z_reschedule_irqlock+0xe>
    5150:	f3ef 8205 	mrs	r2, IPSR
    5154:	b90a      	cbnz	r2, 515a <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    5156:	f7fb bfdb 	b.w	1110 <arch_swap>
    515a:	f383 8811 	msr	BASEPRI, r3
    515e:	f3bf 8f6f 	isb	sy
}
    5162:	4770      	bx	lr

00005164 <z_reschedule_unlocked>:
	__asm__ volatile(
    5164:	f04f 0320 	mov.w	r3, #32
    5168:	f3ef 8011 	mrs	r0, BASEPRI
    516c:	f383 8812 	msr	BASEPRI_MAX, r3
    5170:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    5174:	f7ff bfea 	b.w	514c <z_reschedule_irqlock>

00005178 <z_sched_wake>:
{
    5178:	b538      	push	{r3, r4, r5, lr}
    517a:	f04f 0320 	mov.w	r3, #32
    517e:	f3ef 8511 	mrs	r5, BASEPRI
    5182:	f383 8812 	msr	BASEPRI_MAX, r3
    5186:	f3bf 8f6f 	isb	sy
	return list->head == list;
    518a:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    518c:	42a0      	cmp	r0, r4
    518e:	d012      	beq.n	51b6 <z_sched_wake+0x3e>
		if (thread != NULL) {
    5190:	b19c      	cbz	r4, 51ba <z_sched_wake+0x42>
    5192:	67a1      	str	r1, [r4, #120]	; 0x78
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    5194:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
    5196:	4620      	mov	r0, r4
    5198:	f7ff ff31 	bl	4ffe <unpend_thread_no_timeout>
    519c:	f104 0018 	add.w	r0, r4, #24
    51a0:	f000 f80d 	bl	51be <z_abort_timeout>
			ready_thread(thread);
    51a4:	4620      	mov	r0, r4
    51a6:	f7fe fd51 	bl	3c4c <ready_thread>
			ret = true;
    51aa:	2001      	movs	r0, #1
	__asm__ volatile(
    51ac:	f385 8811 	msr	BASEPRI, r5
    51b0:	f3bf 8f6f 	isb	sy
}
    51b4:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
    51b6:	2000      	movs	r0, #0
    51b8:	e7f8      	b.n	51ac <z_sched_wake+0x34>
    51ba:	4620      	mov	r0, r4
    51bc:	e7f6      	b.n	51ac <z_sched_wake+0x34>

000051be <z_abort_timeout>:
{
    51be:	b510      	push	{r4, lr}
	__asm__ volatile(
    51c0:	f04f 0220 	mov.w	r2, #32
    51c4:	f3ef 8411 	mrs	r4, BASEPRI
    51c8:	f382 8812 	msr	BASEPRI_MAX, r2
    51cc:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    51d0:	6803      	ldr	r3, [r0, #0]
    51d2:	b13b      	cbz	r3, 51e4 <z_abort_timeout+0x26>
			remove_timeout(to);
    51d4:	f7ff f874 	bl	42c0 <remove_timeout>
			ret = 0;
    51d8:	2000      	movs	r0, #0
	__asm__ volatile(
    51da:	f384 8811 	msr	BASEPRI, r4
    51de:	f3bf 8f6f 	isb	sy
}
    51e2:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    51e4:	f06f 0015 	mvn.w	r0, #21
    51e8:	e7f7      	b.n	51da <z_abort_timeout+0x1c>

000051ea <z_get_next_timeout_expiry>:
{
    51ea:	b510      	push	{r4, lr}
	__asm__ volatile(
    51ec:	f04f 0320 	mov.w	r3, #32
    51f0:	f3ef 8411 	mrs	r4, BASEPRI
    51f4:	f383 8812 	msr	BASEPRI_MAX, r3
    51f8:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    51fc:	f7ff f838 	bl	4270 <next_timeout>
	__asm__ volatile(
    5200:	f384 8811 	msr	BASEPRI, r4
    5204:	f3bf 8f6f 	isb	sy
}
    5208:	bd10      	pop	{r4, pc}

0000520a <z_set_timeout_expiry>:
{
    520a:	b570      	push	{r4, r5, r6, lr}
    520c:	4604      	mov	r4, r0
    520e:	460d      	mov	r5, r1
	__asm__ volatile(
    5210:	f04f 0320 	mov.w	r3, #32
    5214:	f3ef 8611 	mrs	r6, BASEPRI
    5218:	f383 8812 	msr	BASEPRI_MAX, r3
    521c:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    5220:	f7ff f826 	bl	4270 <next_timeout>
			      || (ticks <= next_to);
    5224:	2801      	cmp	r0, #1
    5226:	dd07      	ble.n	5238 <z_set_timeout_expiry+0x2e>
    5228:	42a0      	cmp	r0, r4
    522a:	db05      	blt.n	5238 <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    522c:	42a0      	cmp	r0, r4
    522e:	4629      	mov	r1, r5
    5230:	bfa8      	it	ge
    5232:	4620      	movge	r0, r4
    5234:	f7fd fa4c 	bl	26d0 <sys_clock_set_timeout>
	__asm__ volatile(
    5238:	f386 8811 	msr	BASEPRI, r6
    523c:	f3bf 8f6f 	isb	sy
}
    5240:	bd70      	pop	{r4, r5, r6, pc}

00005242 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    5242:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    5244:	f7ff f930 	bl	44a8 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    5248:	bd08      	pop	{r3, pc}

0000524a <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    524a:	f7ff b92d 	b.w	44a8 <sys_clock_tick_get>

0000524e <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    524e:	b108      	cbz	r0, 5254 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    5250:	f7fc ba94 	b.w	177c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    5254:	4770      	bx	lr

00005256 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    5256:	b510      	push	{r4, lr}
    5258:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
    525a:	f7ff ffb0 	bl	51be <z_abort_timeout>

	if (inactive) {
    525e:	b9b0      	cbnz	r0, 528e <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    5260:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5262:	b10b      	cbz	r3, 5268 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    5264:	4620      	mov	r0, r4
    5266:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    5268:	f104 0018 	add.w	r0, r4, #24
    526c:	f7ff ff3b 	bl	50e6 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    5270:	b168      	cbz	r0, 528e <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    5272:	f7ff ff18 	bl	50a6 <z_ready_thread>
	__asm__ volatile(
    5276:	f04f 0320 	mov.w	r3, #32
    527a:	f3ef 8011 	mrs	r0, BASEPRI
    527e:	f383 8812 	msr	BASEPRI_MAX, r3
    5282:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    5286:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    528a:	f7ff bf5f 	b.w	514c <z_reschedule_irqlock>
    528e:	bd10      	pop	{r4, pc}

00005290 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    5290:	4770      	bx	lr
	...
